<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.8.20" doxygen_gitid="96e72f598f3db6894cc3227a9f7df1e612357a42*">
  <compound kind="file">
    <name>arg_parser_demo.cc</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/demo/</path>
    <filename>a00002.html</filename>
    <includes id="a00170" name="arg_parser.h" local="no" imported="no">lemon/arg_parser.h</includes>
  </compound>
  <compound kind="file">
    <name>graph_to_eps_demo.cc</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/demo/</path>
    <filename>a00011.html</filename>
    <includes id="a00332" name="list_graph.h" local="no" imported="no">lemon/list_graph.h</includes>
    <includes id="a00293" name="graph_to_eps.h" local="no" imported="no">lemon/graph_to_eps.h</includes>
    <includes id="a00356" name="math.h" local="no" imported="no">lemon/math.h</includes>
  </compound>
  <compound kind="file">
    <name>lgf_demo.cc</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/demo/</path>
    <filename>a00014.html</filename>
    <includes id="a00407" name="smart_graph.h" local="no" imported="no">lemon/smart_graph.h</includes>
    <includes id="a00326" name="lgf_reader.h" local="no" imported="no">lemon/lgf_reader.h</includes>
    <includes id="a00329" name="lgf_writer.h" local="no" imported="no">lemon/lgf_writer.h</includes>
  </compound>
  <compound kind="file">
    <name>adaptors.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00164.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00350" name="maps.h" local="no" imported="no">lemon/maps.h</includes>
    <includes id="a00425" name="tolerance.h" local="no" imported="no">lemon/tolerance.h</includes>
    <class kind="class">lemon::ReverseDigraph</class>
    <class kind="class">lemon::SubDigraph</class>
    <class kind="class">lemon::SubGraph</class>
    <class kind="class">lemon::FilterNodes</class>
    <class kind="class">lemon::FilterArcs</class>
    <class kind="class">lemon::FilterEdges</class>
    <class kind="class">lemon::Undirector</class>
    <class kind="class">lemon::Undirector::CombinedArcMap</class>
    <class kind="class">lemon::Orienter</class>
    <class kind="class">lemon::ResidualDigraph</class>
    <class kind="class">lemon::ResidualDigraph::ResidualCapacity</class>
    <class kind="class">lemon::SplitNodes</class>
    <class kind="class">lemon::SplitNodes::CombinedNodeMap</class>
    <class kind="class">lemon::SplitNodes::CombinedArcMap</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>arg_parser.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00170.html</filename>
    <includes id="a00173" name="assert.h" local="no" imported="no">lemon/assert.h</includes>
    <class kind="class">lemon::ArgParserException</class>
    <class kind="class">lemon::ArgParser</class>
    <class kind="class">lemon::ArgParser::RefType</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>assert.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00173.html</filename>
    <includes id="a00269" name="error.h" local="no" imported="no">lemon/error.h</includes>
    <namespace>lemon</namespace>
    <member kind="define">
      <type>#define</type>
      <name>LEMON_ASSERT</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>gaf78cf5572d91896ceecdd970f55601bc</anchor>
      <arglist>(exp, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LEMON_DEBUG</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>gacbefc04b0335938603649e96af183843</anchor>
      <arglist>(exp, msg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>base.cc</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00176.html</filename>
    <includes id="a00425" name="tolerance.h" local="no" imported="no">lemon/tolerance.h</includes>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00422" name="time_measure.h" local="no" imported="no">lemon/time_measure.h</includes>
    <namespace>lemon</namespace>
    <member kind="variable">
      <type>const Invalid</type>
      <name>INVALID</name>
      <anchorfile>a00554.html</anchorfile>
      <anchor>a0f04de8e6be7bc21ed685c651571d9fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bellman_ford.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00179.html</filename>
    <includes id="a00332" name="list_graph.h" local="no" imported="no">lemon/list_graph.h</includes>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00269" name="error.h" local="no" imported="no">lemon/error.h</includes>
    <includes id="a00350" name="maps.h" local="no" imported="no">lemon/maps.h</includes>
    <includes id="a00383" name="path.h" local="no" imported="no">lemon/path.h</includes>
    <class kind="struct">lemon::BellmanFordDefaultOperationTraits</class>
    <class kind="struct">lemon::BellmanFordDefaultTraits</class>
    <class kind="class">lemon::BellmanFord</class>
    <class kind="struct">lemon::BellmanFord::SetPredMap</class>
    <class kind="struct">lemon::BellmanFord::SetDistMap</class>
    <class kind="struct">lemon::BellmanFord::SetOperationTraits</class>
    <class kind="class">lemon::BellmanFord::ActiveIt</class>
    <class kind="struct">lemon::BellmanFordWizardDefaultTraits</class>
    <class kind="class">lemon::BellmanFordWizardBase</class>
    <class kind="class">lemon::BellmanFordWizard</class>
    <namespace>lemon</namespace>
    <member kind="function">
      <type>BellmanFordWizard&lt; BellmanFordWizardBase&lt; GR, LEN &gt; &gt;</type>
      <name>bellmanFord</name>
      <anchorfile>a00524.html</anchorfile>
      <anchor>ga359aa931ac3c9550d5b5b5f3ec2e9e56</anchor>
      <arglist>(const GR &amp;digraph, const LEN &amp;length)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bfs.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00182.html</filename>
    <includes id="a00332" name="list_graph.h" local="no" imported="no">lemon/list_graph.h</includes>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00269" name="error.h" local="no" imported="no">lemon/error.h</includes>
    <includes id="a00350" name="maps.h" local="no" imported="no">lemon/maps.h</includes>
    <includes id="a00383" name="path.h" local="no" imported="no">lemon/path.h</includes>
    <class kind="struct">lemon::BfsDefaultTraits</class>
    <class kind="class">lemon::Bfs</class>
    <class kind="struct">lemon::Bfs::SetPredMap</class>
    <class kind="struct">lemon::Bfs::SetDistMap</class>
    <class kind="struct">lemon::Bfs::SetReachedMap</class>
    <class kind="struct">lemon::Bfs::SetProcessedMap</class>
    <class kind="struct">lemon::Bfs::SetStandardProcessedMap</class>
    <class kind="struct">lemon::BfsWizardDefaultTraits</class>
    <class kind="class">lemon::BfsWizardBase</class>
    <class kind="class">lemon::BfsWizard</class>
    <class kind="struct">lemon::BfsVisitor</class>
    <class kind="struct">lemon::BfsVisitDefaultTraits</class>
    <class kind="class">lemon::BfsVisit</class>
    <class kind="struct">lemon::BfsVisit::SetReachedMap</class>
    <namespace>lemon</namespace>
    <member kind="function">
      <type>BfsWizard&lt; BfsWizardBase&lt; GR &gt; &gt;</type>
      <name>bfs</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>ga99817221896aba2eb403691a0a230a0b</anchor>
      <arglist>(const GR &amp;digraph)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bin_heap.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00185.html</filename>
    <class kind="class">lemon::BinHeap</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>binomial_heap.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00188.html</filename>
    <includes id="a00356" name="math.h" local="no" imported="no">lemon/math.h</includes>
    <includes id="a00233" name="counter.h" local="no" imported="no">lemon/counter.h</includes>
    <class kind="class">lemon::BinomialHeap</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>windows.cc</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/bits/</path>
    <filename>a00476.html</filename>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>bucket_heap.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00191.html</filename>
    <class kind="class">lemon::BucketHeap</class>
    <class kind="class">lemon::SimpleBucketHeap</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>capacity_scaling.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00194.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00185" name="bin_heap.h" local="no" imported="no">lemon/bin_heap.h</includes>
    <class kind="struct">lemon::CapacityScalingDefaultTraits</class>
    <class kind="class">lemon::CapacityScaling</class>
    <class kind="struct">lemon::CapacityScaling::SetHeap</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>cbc.cc</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00197.html</filename>
    <includes id="a00200" name="cbc.h" local="yes" imported="no">cbc.h</includes>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>cbc.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00200.html</filename>
    <includes id="a00341" name="lp_base.h" local="no" imported="no">lemon/lp_base.h</includes>
    <class kind="class">lemon::CbcMip</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>christofides_tsp.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00203.html</filename>
    <includes id="a00281" name="full_graph.h" local="no" imported="no">lemon/full_graph.h</includes>
    <includes id="a00407" name="smart_graph.h" local="no" imported="no">lemon/smart_graph.h</includes>
    <includes id="a00323" name="kruskal.h" local="no" imported="no">lemon/kruskal.h</includes>
    <includes id="a00353" name="matching.h" local="no" imported="no">lemon/matching.h</includes>
    <includes id="a00272" name="euler.h" local="no" imported="no">lemon/euler.h</includes>
    <class kind="class">lemon::ChristofidesTsp</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>circulation.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00206.html</filename>
    <includes id="a00425" name="tolerance.h" local="no" imported="no">lemon/tolerance.h</includes>
    <includes id="a00266" name="elevator.h" local="no" imported="no">lemon/elevator.h</includes>
    <class kind="struct">lemon::CirculationDefaultTraits</class>
    <class kind="class">lemon::Circulation</class>
    <class kind="struct">lemon::Circulation::SetFlowMap</class>
    <class kind="struct">lemon::Circulation::SetElevator</class>
    <class kind="struct">lemon::Circulation::SetStandardElevator</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>clp.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00212.html</filename>
    <includes id="a00341" name="lp_base.h" local="no" imported="no">lemon/lp_base.h</includes>
    <class kind="class">lemon::ClpLp</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>color.cc</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00215.html</filename>
    <includes id="a00218" name="color.h" local="no" imported="no">lemon/color.h</includes>
    <namespace>lemon</namespace>
    <member kind="variable">
      <type>const Color</type>
      <name>WHITE</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gaa574c6748d637031ff114ee5396f371d</anchor>
      <arglist>(1, 1, 1)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>BLACK</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga887e77777b0cdd4bd98cd8582eab747d</anchor>
      <arglist>(0, 0, 0)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>RED</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga3aab05ed4f1fa1188cb5cec4a951da36</anchor>
      <arglist>(1, 0, 0)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>GREEN</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga9d50a7cbc8c947f88556291754b964df</anchor>
      <arglist>(0, 1, 0)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>BLUE</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga8d1bd8aebf1ea19b34a359b95afb2271</anchor>
      <arglist>(0, 0, 1)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>YELLOW</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga7b3b82796993ff082f39aeaca4f74be9</anchor>
      <arglist>(1, 1, 0)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>MAGENTA</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gad9c523e1fcd76b6e97a7e8f6c89a6d09</anchor>
      <arglist>(1, 0, 1)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>CYAN</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga6b139d00115defc76ec508dff90c91fd</anchor>
      <arglist>(0, 1, 1)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>GREY</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gaccc4c0904a38839f9554cde971bb4963</anchor>
      <arglist>(0, 0, 0)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>DARK_RED</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga1c9259e9d2ec9a44ea6bf855d3dd3917</anchor>
      <arglist>(.5, 0, 0)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>DARK_GREEN</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gabc9fc012aa002dd8e311065b3115969c</anchor>
      <arglist>(0,.5, 0)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>DARK_BLUE</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gac56cc8c77b9fcb56e308652d922d08f0</anchor>
      <arglist>(0, 0,.5)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>DARK_YELLOW</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga5dbe8dbe7b513bc66228981dcad165f7</anchor>
      <arglist>(.5,.5, 0)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>DARK_MAGENTA</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gaa3457b13dd61099a849816a02ba55efc</anchor>
      <arglist>(.5, 0,.5)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>DARK_CYAN</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga1814dea6aea83b28d9137adaa4d8b937</anchor>
      <arglist>(0,.5,.5)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>color.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00218.html</filename>
    <includes id="a00356" name="math.h" local="no" imported="no">lemon/math.h</includes>
    <includes id="a00350" name="maps.h" local="no" imported="no">lemon/maps.h</includes>
    <class kind="class">lemon::Color</class>
    <class kind="class">lemon::Palette</class>
    <namespace>lemon</namespace>
    <member kind="function">
      <type>Color</type>
      <name>distantColor</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gaafbc768b20325e1e5048dcd2b10bc4e7</anchor>
      <arglist>(const Color &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>distantBW</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga22a184708d82339466dd08286e01a756</anchor>
      <arglist>(const Color &amp;c)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>concept_check.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00221.html</filename>
    <namespace>lemon</namespace>
    <member kind="function">
      <type>void</type>
      <name>function_requires</name>
      <anchorfile>a00554.html</anchorfile>
      <anchor>a3b4bbb2e8a649d05287b65fdf29b6930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConcept</name>
      <anchorfile>a00554.html</anchorfile>
      <anchor>ac202d55258d62489acf256b88b87e470</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bpgraph.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/concepts/</path>
    <filename>a00482.html</filename>
    <includes id="a00491" name="graph_components.h" local="no" imported="no">lemon/concepts/graph_components.h</includes>
    <includes id="a07265" name="maps.h" local="no" imported="no">lemon/concepts/maps.h</includes>
    <includes id="a00221" name="concept_check.h" local="no" imported="no">lemon/concept_check.h</includes>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <class kind="class">lemon::concepts::BpGraph</class>
    <class kind="class">lemon::concepts::BpGraph::Node</class>
    <class kind="class">lemon::concepts::BpGraph::RedNode</class>
    <class kind="class">lemon::concepts::BpGraph::BlueNode</class>
    <class kind="class">lemon::concepts::BpGraph::RedNodeIt</class>
    <class kind="class">lemon::concepts::BpGraph::BlueNodeIt</class>
    <class kind="class">lemon::concepts::BpGraph::NodeIt</class>
    <class kind="class">lemon::concepts::BpGraph::Edge</class>
    <class kind="class">lemon::concepts::BpGraph::EdgeIt</class>
    <class kind="class">lemon::concepts::BpGraph::IncEdgeIt</class>
    <class kind="class">lemon::concepts::BpGraph::Arc</class>
    <class kind="class">lemon::concepts::BpGraph::ArcIt</class>
    <class kind="class">lemon::concepts::BpGraph::OutArcIt</class>
    <class kind="class">lemon::concepts::BpGraph::InArcIt</class>
    <class kind="class">lemon::concepts::BpGraph::NodeMap</class>
    <class kind="class">lemon::concepts::BpGraph::RedNodeMap</class>
    <class kind="class">lemon::concepts::BpGraph::BlueNodeMap</class>
    <class kind="class">lemon::concepts::BpGraph::ArcMap</class>
    <class kind="class">lemon::concepts::BpGraph::EdgeMap</class>
    <namespace>lemon</namespace>
    <namespace>lemon::concepts</namespace>
  </compound>
  <compound kind="file">
    <name>digraph.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/concepts/</path>
    <filename>a00485.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a07265" name="maps.h" local="no" imported="no">lemon/concepts/maps.h</includes>
    <includes id="a00221" name="concept_check.h" local="no" imported="no">lemon/concept_check.h</includes>
    <includes id="a00491" name="graph_components.h" local="no" imported="no">lemon/concepts/graph_components.h</includes>
    <class kind="class">lemon::concepts::Digraph</class>
    <class kind="class">lemon::concepts::Digraph::Node</class>
    <class kind="class">lemon::concepts::Digraph::NodeIt</class>
    <class kind="class">lemon::concepts::Digraph::Arc</class>
    <class kind="class">lemon::concepts::Digraph::OutArcIt</class>
    <class kind="class">lemon::concepts::Digraph::InArcIt</class>
    <class kind="class">lemon::concepts::Digraph::ArcIt</class>
    <class kind="class">lemon::concepts::Digraph::NodeMap</class>
    <class kind="class">lemon::concepts::Digraph::ArcMap</class>
    <namespace>lemon</namespace>
    <namespace>lemon::concepts</namespace>
  </compound>
  <compound kind="file">
    <name>graph.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/concepts/</path>
    <filename>a00488.html</filename>
    <includes id="a00491" name="graph_components.h" local="no" imported="no">lemon/concepts/graph_components.h</includes>
    <includes id="a07265" name="maps.h" local="no" imported="no">lemon/concepts/maps.h</includes>
    <includes id="a00221" name="concept_check.h" local="no" imported="no">lemon/concept_check.h</includes>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <class kind="class">lemon::concepts::Graph</class>
    <class kind="class">lemon::concepts::Graph::Node</class>
    <class kind="class">lemon::concepts::Graph::NodeIt</class>
    <class kind="class">lemon::concepts::Graph::Edge</class>
    <class kind="class">lemon::concepts::Graph::EdgeIt</class>
    <class kind="class">lemon::concepts::Graph::IncEdgeIt</class>
    <class kind="class">lemon::concepts::Graph::Arc</class>
    <class kind="class">lemon::concepts::Graph::ArcIt</class>
    <class kind="class">lemon::concepts::Graph::OutArcIt</class>
    <class kind="class">lemon::concepts::Graph::InArcIt</class>
    <class kind="class">lemon::concepts::Graph::NodeMap</class>
    <class kind="class">lemon::concepts::Graph::ArcMap</class>
    <class kind="class">lemon::concepts::Graph::EdgeMap</class>
    <namespace>lemon</namespace>
    <namespace>lemon::concepts</namespace>
  </compound>
  <compound kind="file">
    <name>graph_components.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/concepts/</path>
    <filename>a00491.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a07265" name="maps.h" local="no" imported="no">lemon/concepts/maps.h</includes>
    <class kind="class">lemon::concepts::GraphItem</class>
    <class kind="class">lemon::concepts::BaseDigraphComponent</class>
    <class kind="class">lemon::concepts::BaseGraphComponent</class>
    <class kind="class">lemon::concepts::BaseGraphComponent::Edge</class>
    <class kind="class">lemon::concepts::BaseBpGraphComponent</class>
    <class kind="class">lemon::concepts::BaseBpGraphComponent::RedNode</class>
    <class kind="class">lemon::concepts::BaseBpGraphComponent::BlueNode</class>
    <class kind="class">lemon::concepts::IDableDigraphComponent</class>
    <class kind="class">lemon::concepts::IDableGraphComponent</class>
    <class kind="class">lemon::concepts::IDableBpGraphComponent</class>
    <class kind="class">lemon::concepts::GraphItemIt</class>
    <class kind="class">lemon::concepts::GraphIncIt</class>
    <class kind="class">lemon::concepts::IterableDigraphComponent</class>
    <class kind="class">lemon::concepts::IterableGraphComponent</class>
    <class kind="class">lemon::concepts::IterableBpGraphComponent</class>
    <class kind="class">lemon::concepts::AlterableDigraphComponent</class>
    <class kind="class">lemon::concepts::AlterableGraphComponent</class>
    <class kind="class">lemon::concepts::AlterableBpGraphComponent</class>
    <class kind="class">lemon::concepts::GraphMap</class>
    <class kind="class">lemon::concepts::MappableDigraphComponent</class>
    <class kind="class">lemon::concepts::MappableDigraphComponent::NodeMap</class>
    <class kind="class">lemon::concepts::MappableDigraphComponent::ArcMap</class>
    <class kind="class">lemon::concepts::MappableGraphComponent</class>
    <class kind="class">lemon::concepts::MappableGraphComponent::EdgeMap</class>
    <class kind="class">lemon::concepts::MappableBpGraphComponent</class>
    <class kind="class">lemon::concepts::MappableBpGraphComponent::RedNodeMap</class>
    <class kind="class">lemon::concepts::MappableBpGraphComponent::BlueNodeMap</class>
    <class kind="class">lemon::concepts::ExtendableDigraphComponent</class>
    <class kind="class">lemon::concepts::ExtendableGraphComponent</class>
    <class kind="class">lemon::concepts::ExtendableBpGraphComponent</class>
    <class kind="class">lemon::concepts::ErasableDigraphComponent</class>
    <class kind="class">lemon::concepts::ErasableGraphComponent</class>
    <class kind="class">lemon::concepts::ErasableBpGraphComponent</class>
    <class kind="class">lemon::concepts::ClearableDigraphComponent</class>
    <class kind="class">lemon::concepts::ClearableGraphComponent</class>
    <class kind="class">lemon::concepts::ClearableBpGraphComponent</class>
    <namespace>lemon</namespace>
    <namespace>lemon::concepts</namespace>
  </compound>
  <compound kind="file">
    <name>heap.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/concepts/</path>
    <filename>a00494.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00221" name="concept_check.h" local="no" imported="no">lemon/concept_check.h</includes>
    <class kind="class">lemon::concepts::Heap</class>
    <namespace>lemon</namespace>
    <namespace>lemon::concepts</namespace>
  </compound>
  <compound kind="file">
    <name>connectivity.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00224.html</filename>
    <includes id="a00245" name="dfs.h" local="no" imported="no">lemon/dfs.h</includes>
    <includes id="a00182" name="bfs.h" local="no" imported="no">lemon/bfs.h</includes>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00350" name="maps.h" local="no" imported="no">lemon/maps.h</includes>
    <includes id="a00164" name="adaptors.h" local="no" imported="no">lemon/adaptors.h</includes>
    <includes id="a00485" name="digraph.h" local="no" imported="no">lemon/concepts/digraph.h</includes>
    <includes id="a00488" name="graph.h" local="no" imported="no">lemon/concepts/graph.h</includes>
    <includes id="a00221" name="concept_check.h" local="no" imported="no">lemon/concept_check.h</includes>
    <namespace>lemon</namespace>
    <member kind="function">
      <type>bool</type>
      <name>connected</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gad5c8d1b650f6b614a852f8430d90e184</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countConnectedComponents</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga33a9d9d4803cb15e83568b2526e978a5</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>connectedComponents</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gaa467a3e0a8c2e9e762650fd01fadff89</anchor>
      <arglist>(const Graph &amp;graph, NodeMap &amp;compMap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stronglyConnected</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gacd21b34d7b42b9835a204a57fcf15964</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countStronglyConnectedComponents</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gad30bc47dfffb78234eeee903cb3766f4</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>stronglyConnectedComponents</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga46f8c22f3e2989c4689faa4c46ec9436</anchor>
      <arglist>(const Digraph &amp;digraph, NodeMap &amp;compMap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>stronglyConnectedCutArcs</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gad7af5c3a97453e37f251f0e86dbb83db</anchor>
      <arglist>(const Digraph &amp;digraph, ArcMap &amp;cutMap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countBiNodeConnectedComponents</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gaf7c5744b2175210b8ea67897aaa27885</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>biNodeConnected</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gac9257323ead7cbe64b7b4a628c4876b3</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>biNodeConnectedComponents</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga9d70526ab54e10b4b6fe3762af8675dd</anchor>
      <arglist>(const Graph &amp;graph, EdgeMap &amp;compMap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>biNodeConnectedCutNodes</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga31461f33a748327ea3ef2a3199ffb6c7</anchor>
      <arglist>(const Graph &amp;graph, NodeMap &amp;cutMap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countBiEdgeConnectedComponents</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga4d5db78dc21099d075c3967484990954</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>biEdgeConnected</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga37d22a2ddd5a064a9203720f2b93518e</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>biEdgeConnectedComponents</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga76c1fdd1881d21677507100b7e96c983</anchor>
      <arglist>(const Graph &amp;graph, NodeMap &amp;compMap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>biEdgeConnectedCutEdges</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga58d444eba448c5f1a53539bd1b69636e</anchor>
      <arglist>(const Graph &amp;graph, EdgeMap &amp;cutMap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dag</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gaef2b43c8cd1d74e15fa5c7607bc5e396</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>topologicalSort</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gafc2cb20cf3859f157c0e12da7f310bb3</anchor>
      <arglist>(const Digraph &amp;digraph, NodeMap &amp;order)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkedTopologicalSort</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gaf10c5e1630e5720c20d83cfb77dbf024</anchor>
      <arglist>(const Digraph &amp;digraph, NodeMap &amp;order)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>acyclic</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga14c191b2133a1dd23e1527f074c821c0</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tree</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gad1e4de234e926958647905478415bd54</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bipartite</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga577db110d33bd487aaad5bfffb31c6f5</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bipartitePartitions</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga58ba1d00c569f0eb0deb42afca9f80bb</anchor>
      <arglist>(const Graph &amp;graph, NodeMap &amp;partMap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loopFree</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga127f3963003cd532c79c226885fe1c8c</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parallelFree</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gaa05e0683f90b69f31eb29fe7d09afde4</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>simpleGraph</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gae4c7ae734e2509ab78dc747d602c9236</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>core.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00227.html</filename>
    <includes id="a00173" name="assert.h" local="no" imported="no">lemon/assert.h</includes>
    <class kind="struct">lemon::Invalid</class>
    <class kind="class">lemon::DigraphCopy</class>
    <class kind="class">lemon::GraphCopy</class>
    <class kind="class">lemon::BpGraphCopy</class>
    <class kind="class">lemon::ConArcIt</class>
    <class kind="class">lemon::ConEdgeIt</class>
    <class kind="class">lemon::DynArcLookUp</class>
    <class kind="class">lemon::ArcLookUp</class>
    <class kind="class">lemon::AllArcLookUp</class>
    <namespace>lemon</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DIGRAPH_TYPEDEFS</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>gac618f30ace596c69836144bfdcc9112c</anchor>
      <arglist>(Digraph)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TEMPLATE_DIGRAPH_TYPEDEFS</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga14ef90d8fd45b56f1cc2c5023c76c4b1</anchor>
      <arglist>(Digraph)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GRAPH_TYPEDEFS</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>gab8c497e4257836f4669b8922237d830b</anchor>
      <arglist>(Graph)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TEMPLATE_GRAPH_TYPEDEFS</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>gab0e6cf49071e60eda3e15e2b0e0d8310</anchor>
      <arglist>(Graph)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BPGRAPH_TYPEDEFS</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>gac8d6365af7bc18ed8d55d0d4e752399f</anchor>
      <arglist>(BpGraph)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TEMPLATE_BPGRAPH_TYPEDEFS</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga1442da4c0ddce15a9a5f651693d7ab57</anchor>
      <arglist>(BpGraph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countItems</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga65f512e54ae6256fcd098592fc582e50</anchor>
      <arglist>(const Graph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countNodes</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga9156d36059e59ebc8dc14bad0112633d</anchor>
      <arglist>(const Graph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countRedNodes</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>gac1a04fa8a9e0460accf28c5337b2c5eb</anchor>
      <arglist>(const Graph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countBlueNodes</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga40c1bf81c7096481ca39f286eeb74163</anchor>
      <arglist>(const Graph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countArcs</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga1b3307d4e63c19d4ebadf133ebb43683</anchor>
      <arglist>(const Graph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countEdges</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>gaede53fc1ef848a03b7f844a5ec7eeca6</anchor>
      <arglist>(const Graph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countOutArcs</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>gaf199da654058dd16da1702f38b60f30c</anchor>
      <arglist>(const Graph &amp;g, const typename Graph::Node &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countInArcs</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga03d0d2f770d7f7faac66438139ae9b18</anchor>
      <arglist>(const Graph &amp;g, const typename Graph::Node &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countIncEdges</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>gae93681c4e849f6fd3a102fcb2756e317</anchor>
      <arglist>(const Graph &amp;g, const typename Graph::Node &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>undirected</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>gaa7a3075a14f2acde20f1d999675a8040</anchor>
      <arglist>(const GR &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>DigraphCopy&lt; From, To &gt;</type>
      <name>digraphCopy</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga47e4bf893a80e68971c511735117c707</anchor>
      <arglist>(const From &amp;from, To &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>GraphCopy&lt; From, To &gt;</type>
      <name>graphCopy</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga6d9c65013887bb0710df0d58985d67dc</anchor>
      <arglist>(const From &amp;from, To &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphCopy&lt; From, To &gt;</type>
      <name>bpGraphCopy</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga58f5d796ccf095d19f507f47bf92d38f</anchor>
      <arglist>(const From &amp;from, To &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>Graph::Arc</type>
      <name>findArc</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga8f2c525c18d4b29476db308e49066334</anchor>
      <arglist>(const Graph &amp;g, typename Graph::Node u, typename Graph::Node v, typename Graph::Arc prev=INVALID)</arglist>
    </member>
    <member kind="function">
      <type>Graph::Edge</type>
      <name>findEdge</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga50b131b15b6c98823c4dc308f7e884e8</anchor>
      <arglist>(const Graph &amp;g, typename Graph::Node u, typename Graph::Node v, typename Graph::Edge p=INVALID)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cost_scaling.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00230.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00350" name="maps.h" local="no" imported="no">lemon/maps.h</includes>
    <includes id="a00356" name="math.h" local="no" imported="no">lemon/math.h</includes>
    <includes id="a00416" name="static_graph.h" local="no" imported="no">lemon/static_graph.h</includes>
    <includes id="a00206" name="circulation.h" local="no" imported="no">lemon/circulation.h</includes>
    <includes id="a00179" name="bellman_ford.h" local="no" imported="no">lemon/bellman_ford.h</includes>
    <class kind="struct">lemon::CostScalingDefaultTraits</class>
    <class kind="class">lemon::CostScaling</class>
    <class kind="struct">lemon::CostScaling::SetLargeCost</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>counter.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00233.html</filename>
    <class kind="class">lemon::Counter</class>
    <class kind="class">lemon::NoCounter</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>cplex.cc</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00236.html</filename>
    <includes id="a00239" name="cplex.h" local="no" imported="no">lemon/cplex.h</includes>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>cplex.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00239.html</filename>
    <includes id="a00341" name="lp_base.h" local="no" imported="no">lemon/lp_base.h</includes>
    <class kind="class">lemon::CplexEnv</class>
    <class kind="class">lemon::CplexEnv::LicenseError</class>
    <class kind="class">lemon::CplexBase</class>
    <class kind="class">lemon::CplexLp</class>
    <class kind="class">lemon::CplexMip</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>cycle_canceling.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00242.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00350" name="maps.h" local="no" imported="no">lemon/maps.h</includes>
    <includes id="a00383" name="path.h" local="no" imported="no">lemon/path.h</includes>
    <includes id="a00356" name="math.h" local="no" imported="no">lemon/math.h</includes>
    <includes id="a00416" name="static_graph.h" local="no" imported="no">lemon/static_graph.h</includes>
    <includes id="a00164" name="adaptors.h" local="no" imported="no">lemon/adaptors.h</includes>
    <includes id="a00206" name="circulation.h" local="no" imported="no">lemon/circulation.h</includes>
    <includes id="a00179" name="bellman_ford.h" local="no" imported="no">lemon/bellman_ford.h</includes>
    <includes id="a00311" name="howard_mmc.h" local="no" imported="no">lemon/howard_mmc.h</includes>
    <includes id="a00308" name="hartmann_orlin_mmc.h" local="no" imported="no">lemon/hartmann_orlin_mmc.h</includes>
    <class kind="class">lemon::CycleCanceling</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>dfs.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00245.html</filename>
    <includes id="a00332" name="list_graph.h" local="no" imported="no">lemon/list_graph.h</includes>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00269" name="error.h" local="no" imported="no">lemon/error.h</includes>
    <includes id="a00350" name="maps.h" local="no" imported="no">lemon/maps.h</includes>
    <includes id="a00383" name="path.h" local="no" imported="no">lemon/path.h</includes>
    <class kind="struct">lemon::DfsDefaultTraits</class>
    <class kind="class">lemon::Dfs</class>
    <class kind="struct">lemon::Dfs::SetPredMap</class>
    <class kind="struct">lemon::Dfs::SetDistMap</class>
    <class kind="struct">lemon::Dfs::SetReachedMap</class>
    <class kind="struct">lemon::Dfs::SetProcessedMap</class>
    <class kind="struct">lemon::Dfs::SetStandardProcessedMap</class>
    <class kind="struct">lemon::DfsWizardDefaultTraits</class>
    <class kind="class">lemon::DfsWizardBase</class>
    <class kind="class">lemon::DfsWizard</class>
    <class kind="struct">lemon::DfsVisitor</class>
    <class kind="struct">lemon::DfsVisitDefaultTraits</class>
    <class kind="class">lemon::DfsVisit</class>
    <class kind="struct">lemon::DfsVisit::SetReachedMap</class>
    <namespace>lemon</namespace>
    <member kind="function">
      <type>DfsWizard&lt; DfsWizardBase&lt; GR &gt; &gt;</type>
      <name>dfs</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>gaa6a12c70b10ad9693117ec2b3774b0d8</anchor>
      <arglist>(const GR &amp;digraph)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dheap.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00248.html</filename>
    <class kind="class">lemon::DHeap</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>dijkstra.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00251.html</filename>
    <includes id="a00332" name="list_graph.h" local="no" imported="no">lemon/list_graph.h</includes>
    <includes id="a00185" name="bin_heap.h" local="no" imported="no">lemon/bin_heap.h</includes>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00269" name="error.h" local="no" imported="no">lemon/error.h</includes>
    <includes id="a00350" name="maps.h" local="no" imported="no">lemon/maps.h</includes>
    <includes id="a00383" name="path.h" local="no" imported="no">lemon/path.h</includes>
    <class kind="struct">lemon::DijkstraDefaultOperationTraits</class>
    <class kind="struct">lemon::DijkstraDefaultTraits</class>
    <class kind="class">lemon::Dijkstra</class>
    <class kind="struct">lemon::Dijkstra::SetPredMap</class>
    <class kind="struct">lemon::Dijkstra::SetDistMap</class>
    <class kind="struct">lemon::Dijkstra::SetProcessedMap</class>
    <class kind="struct">lemon::Dijkstra::SetStandardProcessedMap</class>
    <class kind="struct">lemon::Dijkstra::SetHeap</class>
    <class kind="struct">lemon::Dijkstra::SetStandardHeap</class>
    <class kind="struct">lemon::Dijkstra::SetOperationTraits</class>
    <class kind="struct">lemon::DijkstraWizardDefaultTraits</class>
    <class kind="class">lemon::DijkstraWizardBase</class>
    <class kind="class">lemon::DijkstraWizard</class>
    <namespace>lemon</namespace>
    <member kind="function">
      <type>DijkstraWizard&lt; DijkstraWizardBase&lt; GR, LEN &gt; &gt;</type>
      <name>dijkstra</name>
      <anchorfile>a00524.html</anchorfile>
      <anchor>gaa781be76e5adb6a9df7592457a5c3857</anchor>
      <arglist>(const GR &amp;digraph, const LEN &amp;length)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dim2.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00254.html</filename>
    <class kind="class">lemon::dim2::Point</class>
    <class kind="class">lemon::dim2::Box</class>
    <class kind="class">lemon::dim2::XMap</class>
    <class kind="class">lemon::dim2::ConstXMap</class>
    <class kind="class">lemon::dim2::YMap</class>
    <class kind="class">lemon::dim2::ConstYMap</class>
    <class kind="class">lemon::dim2::NormSquareMap</class>
    <namespace>lemon</namespace>
    <namespace>lemon::dim2</namespace>
  </compound>
  <compound kind="file">
    <name>dimacs.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00257.html</filename>
    <includes id="a00350" name="maps.h" local="no" imported="no">lemon/maps.h</includes>
    <includes id="a00269" name="error.h" local="no" imported="no">lemon/error.h</includes>
    <class kind="struct">lemon::DimacsDescriptor</class>
    <namespace>lemon</namespace>
    <member kind="function">
      <type>DimacsDescriptor</type>
      <name>dimacsType</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>gad16c7910d72fa073be372881e1b3b087</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDimacsMin</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ga309d99eda5d1f5f3df2b2ca2d57ec024</anchor>
      <arglist>(std::istream &amp;is, Digraph &amp;g, LowerMap &amp;lower, CapacityMap &amp;capacity, CostMap &amp;cost, SupplyMap &amp;supply, typename CapacityMap::Value infty=0, DimacsDescriptor desc=DimacsDescriptor())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDimacsMax</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ga44cf335757161623864f8b1ef4446601</anchor>
      <arglist>(std::istream &amp;is, Digraph &amp;g, CapacityMap &amp;capacity, typename Digraph::Node &amp;s, typename Digraph::Node &amp;t, typename CapacityMap::Value infty=0, DimacsDescriptor desc=DimacsDescriptor())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDimacsSp</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>gae8f5ba3e3f9ce3281f83c152d193625b</anchor>
      <arglist>(std::istream &amp;is, Digraph &amp;g, LengthMap &amp;length, typename Digraph::Node &amp;s, DimacsDescriptor desc=DimacsDescriptor())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDimacsCap</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ga2ec47d238c02a465037377e65875793d</anchor>
      <arglist>(std::istream &amp;is, Digraph &amp;g, CapacityMap &amp;capacity, typename CapacityMap::Value infty=0, DimacsDescriptor desc=DimacsDescriptor())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDimacsMat</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ga2f4cd9537b1e6da13b64220bed687ad2</anchor>
      <arglist>(std::istream &amp;is, Graph &amp;g, DimacsDescriptor desc=DimacsDescriptor())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeDimacsMat</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>gada363b719022ba1fe1c03978ba6cece9</anchor>
      <arglist>(std::ostream &amp;os, const Digraph &amp;g, std::string comment=&quot;&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>edge_set.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00260.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <class kind="class">lemon::ListArcSet</class>
    <class kind="class">lemon::ListEdgeSet</class>
    <class kind="class">lemon::SmartArcSet</class>
    <class kind="class">lemon::SmartEdgeSet</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>edmonds_karp.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00263.html</filename>
    <includes id="a00425" name="tolerance.h" local="no" imported="no">lemon/tolerance.h</includes>
    <class kind="struct">lemon::EdmondsKarpDefaultTraits</class>
    <class kind="class">lemon::EdmondsKarp</class>
    <class kind="struct">lemon::EdmondsKarp::SetFlowMap</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>elevator.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00266.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <class kind="class">lemon::Elevator</class>
    <class kind="class">lemon::LinkedElevator</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>error.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00269.html</filename>
    <class kind="class">lemon::Exception</class>
    <class kind="class">lemon::IoError</class>
    <class kind="class">lemon::FormatError</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>euler.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00272.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00164" name="adaptors.h" local="no" imported="no">lemon/adaptors.h</includes>
    <includes id="a00224" name="connectivity.h" local="no" imported="no">lemon/connectivity.h</includes>
    <class kind="class">lemon::DiEulerIt</class>
    <class kind="class">lemon::EulerIt</class>
    <namespace>lemon</namespace>
    <member kind="function">
      <type>bool</type>
      <name>eulerian</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gafb5a4961cac4d877006869fc4cb6ea1d</anchor>
      <arglist>(const GR &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fib_heap.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00275.html</filename>
    <includes id="a00356" name="math.h" local="no" imported="no">lemon/math.h</includes>
    <class kind="class">lemon::FibHeap</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>fractional_matching.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00278.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00428" name="unionfind.h" local="no" imported="no">lemon/unionfind.h</includes>
    <includes id="a00185" name="bin_heap.h" local="no" imported="no">lemon/bin_heap.h</includes>
    <includes id="a00350" name="maps.h" local="no" imported="no">lemon/maps.h</includes>
    <includes id="a00173" name="assert.h" local="no" imported="no">lemon/assert.h</includes>
    <includes id="a00266" name="elevator.h" local="no" imported="no">lemon/elevator.h</includes>
    <class kind="struct">lemon::MaxFractionalMatchingDefaultTraits</class>
    <class kind="class">lemon::MaxFractionalMatching</class>
    <class kind="struct">lemon::MaxFractionalMatching::SetMatchingMap</class>
    <class kind="struct">lemon::MaxFractionalMatching::SetElevator</class>
    <class kind="struct">lemon::MaxFractionalMatching::SetStandardElevator</class>
    <class kind="class">lemon::MaxWeightedFractionalMatching</class>
    <class kind="class">lemon::MaxWeightedPerfectFractionalMatching</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>full_graph.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00281.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <class kind="class">lemon::FullDigraph</class>
    <class kind="class">lemon::FullGraph</class>
    <class kind="class">lemon::FullBpGraph</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>glpk.cc</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00284.html</filename>
    <includes id="a00287" name="glpk.h" local="no" imported="no">lemon/glpk.h</includes>
    <includes id="a00173" name="assert.h" local="no" imported="no">lemon/assert.h</includes>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>glpk.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00287.html</filename>
    <includes id="a00341" name="lp_base.h" local="no" imported="no">lemon/lp_base.h</includes>
    <class kind="class">lemon::GlpkBase</class>
    <class kind="class">lemon::GlpkLp</class>
    <class kind="class">lemon::GlpkMip</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>gomory_hu.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00290.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00389" name="preflow.h" local="no" imported="no">lemon/preflow.h</includes>
    <includes id="a00221" name="concept_check.h" local="no" imported="no">lemon/concept_check.h</includes>
    <includes id="a07265" name="maps.h" local="no" imported="no">lemon/concepts/maps.h</includes>
    <class kind="class">lemon::GomoryHu</class>
    <class kind="class">lemon::GomoryHu::MinCutNodeIt</class>
    <class kind="class">lemon::GomoryHu::MinCutEdgeIt</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>graph_to_eps.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00293.html</filename>
    <includes id="a00356" name="math.h" local="no" imported="no">lemon/math.h</includes>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00254" name="dim2.h" local="no" imported="no">lemon/dim2.h</includes>
    <includes id="a00350" name="maps.h" local="no" imported="no">lemon/maps.h</includes>
    <includes id="a00218" name="color.h" local="no" imported="no">lemon/color.h</includes>
    <includes id="a00269" name="error.h" local="no" imported="no">lemon/error.h</includes>
    <class kind="struct">lemon::DefaultGraphToEpsTraits</class>
    <class kind="class">lemon::GraphToEps</class>
    <namespace>lemon</namespace>
    <member kind="function">
      <type>GraphToEps&lt; DefaultGraphToEpsTraits&lt; GR &gt; &gt;</type>
      <name>graphToEps</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>gacdf8d8f513b3e79f89b19c20f7755564</anchor>
      <arglist>(GR &amp;g, std::ostream &amp;os=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; DefaultGraphToEpsTraits&lt; GR &gt; &gt;</type>
      <name>graphToEps</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>ga48002fdee116559a9948d1bf540475f1</anchor>
      <arglist>(GR &amp;g, const char *file_name)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; DefaultGraphToEpsTraits&lt; GR &gt; &gt;</type>
      <name>graphToEps</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>ga919340e78dd663a7b77c7aa9c3658170</anchor>
      <arglist>(GR &amp;g, const std::string &amp;file_name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>greedy_tsp.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00296.html</filename>
    <includes id="a00281" name="full_graph.h" local="no" imported="no">lemon/full_graph.h</includes>
    <includes id="a00428" name="unionfind.h" local="no" imported="no">lemon/unionfind.h</includes>
    <class kind="class">lemon::GreedyTsp</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>grid_graph.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00299.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00254" name="dim2.h" local="no" imported="no">lemon/dim2.h</includes>
    <includes id="a00173" name="assert.h" local="no" imported="no">lemon/assert.h</includes>
    <class kind="class">lemon::GridGraph</class>
    <class kind="class">lemon::GridGraph::IndexMap</class>
    <class kind="class">lemon::GridGraph::ColMap</class>
    <class kind="class">lemon::GridGraph::RowMap</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>grosso_locatelli_pullan_mc.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00302.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00404" name="random.h" local="no" imported="no">lemon/random.h</includes>
    <class kind="class">lemon::GrossoLocatelliPullanMc</class>
    <class kind="class">lemon::GrossoLocatelliPullanMc::CliqueNodeIt</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>hao_orlin.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00305.html</filename>
    <includes id="a00350" name="maps.h" local="no" imported="no">lemon/maps.h</includes>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00425" name="tolerance.h" local="no" imported="no">lemon/tolerance.h</includes>
    <class kind="class">lemon::HaoOrlin</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>hartmann_orlin_mmc.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00308.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00383" name="path.h" local="no" imported="no">lemon/path.h</includes>
    <includes id="a00425" name="tolerance.h" local="no" imported="no">lemon/tolerance.h</includes>
    <includes id="a00224" name="connectivity.h" local="no" imported="no">lemon/connectivity.h</includes>
    <class kind="struct">lemon::HartmannOrlinMmcDefaultTraits</class>
    <class kind="class">lemon::HartmannOrlinMmc</class>
    <class kind="struct">lemon::HartmannOrlinMmc::SetLargeCost</class>
    <class kind="struct">lemon::HartmannOrlinMmc::SetPath</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>howard_mmc.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00311.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00383" name="path.h" local="no" imported="no">lemon/path.h</includes>
    <includes id="a00425" name="tolerance.h" local="no" imported="no">lemon/tolerance.h</includes>
    <includes id="a00224" name="connectivity.h" local="no" imported="no">lemon/connectivity.h</includes>
    <class kind="struct">lemon::HowardMmcDefaultTraits</class>
    <class kind="class">lemon::HowardMmc</class>
    <class kind="struct">lemon::HowardMmc::SetLargeCost</class>
    <class kind="struct">lemon::HowardMmc::SetPath</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>hypercube_graph.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00314.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00173" name="assert.h" local="no" imported="no">lemon/assert.h</includes>
    <class kind="class">lemon::HypercubeGraph</class>
    <class kind="class">lemon::HypercubeGraph::HyperMap</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>insertion_tsp.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00317.html</filename>
    <includes id="a00281" name="full_graph.h" local="no" imported="no">lemon/full_graph.h</includes>
    <includes id="a00350" name="maps.h" local="no" imported="no">lemon/maps.h</includes>
    <includes id="a00404" name="random.h" local="no" imported="no">lemon/random.h</includes>
    <class kind="class">lemon::InsertionTsp</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>karp_mmc.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00320.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00383" name="path.h" local="no" imported="no">lemon/path.h</includes>
    <includes id="a00425" name="tolerance.h" local="no" imported="no">lemon/tolerance.h</includes>
    <includes id="a00224" name="connectivity.h" local="no" imported="no">lemon/connectivity.h</includes>
    <class kind="struct">lemon::KarpMmcDefaultTraits</class>
    <class kind="class">lemon::KarpMmc</class>
    <class kind="struct">lemon::KarpMmc::SetLargeCost</class>
    <class kind="struct">lemon::KarpMmc::SetPath</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>kruskal.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00323.html</filename>
    <includes id="a00428" name="unionfind.h" local="no" imported="no">lemon/unionfind.h</includes>
    <includes id="a00350" name="maps.h" local="no" imported="no">lemon/maps.h</includes>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <namespace>lemon</namespace>
    <member kind="function">
      <type>Value</type>
      <name>kruskal</name>
      <anchorfile>a00525.html</anchorfile>
      <anchor>ga233792b2c44a3581b85a775703e045af</anchor>
      <arglist>(const Graph &amp;g, const In &amp;in, Out &amp;out)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lgf_reader.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00326.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00329" name="lgf_writer.h" local="no" imported="no">lemon/lgf_writer.h</includes>
    <includes id="a00221" name="concept_check.h" local="no" imported="no">lemon/concept_check.h</includes>
    <includes id="a07265" name="maps.h" local="no" imported="no">lemon/concepts/maps.h</includes>
    <class kind="class">lemon::DigraphReader</class>
    <class kind="class">lemon::GraphReader</class>
    <class kind="class">lemon::BpGraphReader</class>
    <class kind="class">lemon::SectionReader</class>
    <class kind="class">lemon::LgfContents</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>lgf_writer.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00329.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00350" name="maps.h" local="no" imported="no">lemon/maps.h</includes>
    <includes id="a00221" name="concept_check.h" local="no" imported="no">lemon/concept_check.h</includes>
    <includes id="a07265" name="maps.h" local="no" imported="no">lemon/concepts/maps.h</includes>
    <class kind="class">lemon::DigraphWriter</class>
    <class kind="class">lemon::GraphWriter</class>
    <class kind="class">lemon::BpGraphWriter</class>
    <class kind="class">lemon::SectionWriter</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>list_graph.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00332.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00269" name="error.h" local="no" imported="no">lemon/error.h</includes>
    <class kind="class">lemon::ListDigraph</class>
    <class kind="class">lemon::ListDigraph::Snapshot</class>
    <class kind="class">lemon::ListGraph</class>
    <class kind="class">lemon::ListGraph::Snapshot</class>
    <class kind="class">lemon::ListBpGraph</class>
    <class kind="class">lemon::ListBpGraph::Snapshot</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>lp.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00335.html</filename>
    <namespace>lemon</namespace>
    <member kind="define">
      <type>#define</type>
      <name>LEMON_DEFAULT_LP</name>
      <anchorfile>a00537.html</anchorfile>
      <anchor>ga459ae538832b3817b7692a81de79d744</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LEMON_DEFAULT_MIP</name>
      <anchorfile>a00537.html</anchorfile>
      <anchor>gae4ce37e43b0032f13b3efa0e0b0af640</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GlpkLp</type>
      <name>Lp</name>
      <anchorfile>a00537.html</anchorfile>
      <anchor>ga8c6461f78849b26ae8be11062410d043</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GlpkMip</type>
      <name>Mip</name>
      <anchorfile>a00537.html</anchorfile>
      <anchor>gad4ee17c56e133b01b9d75eb2cefd4d7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lp_base.cc</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00338.html</filename>
    <includes id="a00341" name="lp_base.h" local="no" imported="no">lemon/lp_base.h</includes>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>lp_base.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00341.html</filename>
    <includes id="a00356" name="math.h" local="no" imported="no">lemon/math.h</includes>
    <includes id="a00269" name="error.h" local="no" imported="no">lemon/error.h</includes>
    <includes id="a00173" name="assert.h" local="no" imported="no">lemon/assert.h</includes>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <class kind="class">lemon::LpBase</class>
    <class kind="class">lemon::LpBase::Col</class>
    <class kind="class">lemon::LpBase::ColIt</class>
    <class kind="class">lemon::LpBase::Row</class>
    <class kind="class">lemon::LpBase::RowIt</class>
    <class kind="class">lemon::LpBase::Expr</class>
    <class kind="class">lemon::LpBase::Expr::CoeffIt</class>
    <class kind="class">lemon::LpBase::Expr::ConstCoeffIt</class>
    <class kind="class">lemon::LpBase::Constr</class>
    <class kind="class">lemon::LpBase::DualExpr</class>
    <class kind="class">lemon::LpBase::DualExpr::CoeffIt</class>
    <class kind="class">lemon::LpBase::DualExpr::ConstCoeffIt</class>
    <class kind="class">lemon::LpBase::UnsupportedFormatError</class>
    <class kind="class">lemon::LpSolver</class>
    <class kind="class">lemon::MipSolver</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>lp_skeleton.cc</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00344.html</filename>
    <includes id="a00347" name="lp_skeleton.h" local="no" imported="no">lemon/lp_skeleton.h</includes>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>lp_skeleton.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00347.html</filename>
    <includes id="a00341" name="lp_base.h" local="no" imported="no">lemon/lp_base.h</includes>
    <class kind="class">lemon::SkeletonSolverBase</class>
    <class kind="class">lemon::LpSkeleton</class>
    <class kind="class">lemon::MipSkeleton</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>maps.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00350.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <class kind="class">lemon::MapBase</class>
    <class kind="class">lemon::NullMap</class>
    <class kind="class">lemon::ConstMap</class>
    <class kind="class">lemon::ConstMap&lt; K, Const&lt; V, v &gt; &gt;</class>
    <class kind="class">lemon::IdentityMap</class>
    <class kind="class">lemon::RangeMap</class>
    <class kind="class">lemon::SparseMap</class>
    <class kind="class">lemon::ComposeMap</class>
    <class kind="class">lemon::CombineMap</class>
    <class kind="class">lemon::FunctorToMap</class>
    <class kind="class">lemon::MapToFunctor</class>
    <class kind="class">lemon::ConvertMap</class>
    <class kind="class">lemon::ForkMap</class>
    <class kind="class">lemon::AddMap</class>
    <class kind="class">lemon::SubMap</class>
    <class kind="class">lemon::MulMap</class>
    <class kind="class">lemon::DivMap</class>
    <class kind="class">lemon::ShiftMap</class>
    <class kind="class">lemon::ShiftWriteMap</class>
    <class kind="class">lemon::ScaleMap</class>
    <class kind="class">lemon::ScaleWriteMap</class>
    <class kind="class">lemon::NegMap</class>
    <class kind="class">lemon::NegWriteMap</class>
    <class kind="class">lemon::AbsMap</class>
    <class kind="class">lemon::TrueMap</class>
    <class kind="class">lemon::FalseMap</class>
    <class kind="class">lemon::AndMap</class>
    <class kind="class">lemon::OrMap</class>
    <class kind="class">lemon::NotMap</class>
    <class kind="class">lemon::NotWriteMap</class>
    <class kind="class">lemon::EqualMap</class>
    <class kind="class">lemon::LessMap</class>
    <class kind="class">lemon::LoggerBoolMap</class>
    <class kind="class">lemon::IdMap</class>
    <class kind="class">lemon::IdMap::InverseMap</class>
    <class kind="class">lemon::CrossRefMap</class>
    <class kind="class">lemon::CrossRefMap::ValueIt</class>
    <class kind="class">lemon::CrossRefMap::InverseMap</class>
    <class kind="class">lemon::RangeIdMap</class>
    <class kind="class">lemon::RangeIdMap::InverseMap</class>
    <class kind="class">lemon::IterableBoolMap</class>
    <class kind="class">lemon::IterableBoolMap::Reference</class>
    <class kind="class">lemon::IterableBoolMap::TrueIt</class>
    <class kind="class">lemon::IterableBoolMap::FalseIt</class>
    <class kind="class">lemon::IterableBoolMap::ItemIt</class>
    <class kind="class">lemon::IterableIntMap</class>
    <class kind="class">lemon::IterableIntMap::Reference</class>
    <class kind="class">lemon::IterableIntMap::ItemIt</class>
    <class kind="class">lemon::IterableValueMap</class>
    <class kind="class">lemon::IterableValueMap::ValueIt</class>
    <class kind="class">lemon::IterableValueMap::ItemIt</class>
    <class kind="class">lemon::SourceMap</class>
    <class kind="class">lemon::TargetMap</class>
    <class kind="class">lemon::ForwardMap</class>
    <class kind="class">lemon::BackwardMap</class>
    <class kind="class">lemon::InDegMap</class>
    <class kind="class">lemon::OutDegMap</class>
    <class kind="class">lemon::PotentialDifferenceMap</class>
    <namespace>lemon</namespace>
    <member kind="function">
      <type>void</type>
      <name>mapCopy</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>gacd3b1378e8d938e2f4f831cda62d7196</anchor>
      <arglist>(const GR &amp;gr, const From &amp;from, To &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mapCompare</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>gad05d27a9d1f23407ab2960b48a9b7582</anchor>
      <arglist>(const GR &amp;gr, const Map1 &amp;map1, const Map2 &amp;map2)</arglist>
    </member>
    <member kind="function">
      <type>Map::Key</type>
      <name>mapMin</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga6119b9344a9c76eb7fca2f57f67732e4</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Map::Key</type>
      <name>mapMin</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga8c1dd57a1af8310ca04d57a70f3f659c</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map, const Comp &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>Map::Key</type>
      <name>mapMax</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga87e0df0934bba2996ec5c9b6907de88d</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Map::Key</type>
      <name>mapMax</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga262a78bd1f36223d520ffde235730cb9</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map, const Comp &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>Map::Value</type>
      <name>mapMinValue</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga3be91b854e7788d89047f161378fce58</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Map::Value</type>
      <name>mapMinValue</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga712ba7c8df94bd02f28d6e08d11176f7</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map, const Comp &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>Map::Value</type>
      <name>mapMaxValue</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga72688c2e41aa36efa56431b5b585a1c1</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Map::Value</type>
      <name>mapMaxValue</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga7b5174f049f1fd63844d2c914832cbcc</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map, const Comp &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>Map::Key</type>
      <name>mapFind</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga8469265a9d93f69c9402756ffe86bcab</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map, const typename Map::Value &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Map::Key</type>
      <name>mapFindIf</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>gad5e8addbccd1e43a3add48108020ffbd</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map, const Pred &amp;pred)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mapCount</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>gafe30fc86a55d33ad6811f3cc835b4cf9</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map, const typename Map::Value &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mapCountIf</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga33891e575e55c0f9ec0dac31923119b8</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map, const Pred &amp;pred)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mapFill</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>gabbcca4c1a7f23a9f39e97e24dc8c54fc</anchor>
      <arglist>(const GR &amp;gr, Map &amp;map, const typename Map::Value &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>maps.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/concepts/</path>
    <filename>a07265.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00221" name="concept_check.h" local="no" imported="no">lemon/concept_check.h</includes>
    <class kind="class">lemon::concepts::ReadMap</class>
    <class kind="class">lemon::concepts::WriteMap</class>
    <class kind="class">lemon::concepts::ReadWriteMap</class>
    <class kind="class">lemon::concepts::ReferenceMap</class>
    <namespace>lemon</namespace>
    <namespace>lemon::concepts</namespace>
  </compound>
  <compound kind="file">
    <name>matching.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00353.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00428" name="unionfind.h" local="no" imported="no">lemon/unionfind.h</includes>
    <includes id="a00185" name="bin_heap.h" local="no" imported="no">lemon/bin_heap.h</includes>
    <includes id="a00350" name="maps.h" local="no" imported="no">lemon/maps.h</includes>
    <includes id="a00278" name="fractional_matching.h" local="no" imported="no">lemon/fractional_matching.h</includes>
    <class kind="class">lemon::MaxMatching</class>
    <class kind="class">lemon::MaxWeightedMatching</class>
    <class kind="class">lemon::MaxWeightedMatching::BlossomIt</class>
    <class kind="class">lemon::MaxWeightedPerfectMatching</class>
    <class kind="class">lemon::MaxWeightedPerfectMatching::BlossomIt</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>math.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00356.html</filename>
    <namespace>lemon</namespace>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga78d99e4135230ce52d67f269ed1d464f</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>round</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gaac8681108dfd2b0deee2dca59dff26bb</anchor>
      <arglist>(double r)</arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>E</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga72bb95cfe3f4109af43a989e478a2d61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>LOG2E</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga9cef1ca3f697ed0afa15e6ce2658b9cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>LOG10E</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga044b3cac2493404bbd6bb04cf61dc38d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>LN2</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga64f768a3649a214be5a8b9d13acc30fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>LN10</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gab62596f975434ae5b1dde456a64c455a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>PI</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gacf20630e5d2a9696928fe77b0726013c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>PI_2</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga8d3eb5ff33b365b02e3d7065f2ecba48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>PI_4</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga5a75e78cd42171bf864e2bad56639318</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>SQRT2</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gac6586fa2865c0cc54dd89b93a0da1d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>SQRT1_2</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga1794f2ffbd3e762771a25847b905918c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>max_cardinality_search.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00359.html</filename>
    <includes id="a00185" name="bin_heap.h" local="no" imported="no">lemon/bin_heap.h</includes>
    <includes id="a00191" name="bucket_heap.h" local="no" imported="no">lemon/bucket_heap.h</includes>
    <includes id="a00269" name="error.h" local="no" imported="no">lemon/error.h</includes>
    <includes id="a00350" name="maps.h" local="no" imported="no">lemon/maps.h</includes>
    <class kind="struct">lemon::MaxCardinalitySearchDefaultTraits</class>
    <class kind="class">lemon::MaxCardinalitySearch</class>
    <class kind="struct">lemon::MaxCardinalitySearch::SetCapacityMap</class>
    <class kind="struct">lemon::MaxCardinalitySearch::SetCardinalityMap</class>
    <class kind="struct">lemon::MaxCardinalitySearch::SetProcessedMap</class>
    <class kind="struct">lemon::MaxCardinalitySearch::SetHeap</class>
    <class kind="struct">lemon::MaxCardinalitySearch::SetStandardHeap</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>min_cost_arborescence.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00362.html</filename>
    <includes id="a00332" name="list_graph.h" local="no" imported="no">lemon/list_graph.h</includes>
    <includes id="a00185" name="bin_heap.h" local="no" imported="no">lemon/bin_heap.h</includes>
    <includes id="a00173" name="assert.h" local="no" imported="no">lemon/assert.h</includes>
    <class kind="struct">lemon::MinCostArborescenceDefaultTraits</class>
    <class kind="class">lemon::MinCostArborescence</class>
    <class kind="struct">lemon::MinCostArborescence::SetArborescenceMap</class>
    <class kind="struct">lemon::MinCostArborescence::SetPredMap</class>
    <class kind="class">lemon::MinCostArborescence::DualIt</class>
    <namespace>lemon</namespace>
    <member kind="function">
      <type>CostMap::Value</type>
      <name>minCostArborescence</name>
      <anchorfile>a00525.html</anchorfile>
      <anchor>ga0faeb92308e21beeb093ee6c967a2cb5</anchor>
      <arglist>(const Digraph &amp;digraph, const CostMap &amp;cost, typename Digraph::Node source, ArborescenceMap &amp;arborescence)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nagamochi_ibaraki.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00365.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00185" name="bin_heap.h" local="no" imported="no">lemon/bin_heap.h</includes>
    <includes id="a00191" name="bucket_heap.h" local="no" imported="no">lemon/bucket_heap.h</includes>
    <includes id="a00350" name="maps.h" local="no" imported="no">lemon/maps.h</includes>
    <includes id="a00398" name="radix_sort.h" local="no" imported="no">lemon/radix_sort.h</includes>
    <includes id="a00428" name="unionfind.h" local="no" imported="no">lemon/unionfind.h</includes>
    <class kind="struct">lemon::NagamochiIbarakiDefaultTraits</class>
    <class kind="class">lemon::NagamochiIbaraki</class>
    <class kind="struct">lemon::NagamochiIbaraki::SetUnitCapacity</class>
    <class kind="struct">lemon::NagamochiIbaraki::SetHeap</class>
    <class kind="struct">lemon::NagamochiIbaraki::SetStandardHeap</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>nauty_reader.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00368.html</filename>
    <namespace>lemon</namespace>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>readNautyGraph</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>gab98a634e56974e5266e04dd0a1a63a83</anchor>
      <arglist>(Graph &amp;graph, std::istream &amp;is=std::cin)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nearest_neighbor_tsp.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00371.html</filename>
    <includes id="a00281" name="full_graph.h" local="no" imported="no">lemon/full_graph.h</includes>
    <includes id="a00350" name="maps.h" local="no" imported="no">lemon/maps.h</includes>
    <class kind="class">lemon::NearestNeighborTsp</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>network_simplex.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00374.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00356" name="math.h" local="no" imported="no">lemon/math.h</includes>
    <class kind="class">lemon::NetworkSimplex</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>opt2_tsp.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00377.html</filename>
    <includes id="a00281" name="full_graph.h" local="no" imported="no">lemon/full_graph.h</includes>
    <class kind="class">lemon::Opt2Tsp</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>pairing_heap.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00380.html</filename>
    <includes id="a00356" name="math.h" local="no" imported="no">lemon/math.h</includes>
    <class kind="class">lemon::PairingHeap</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>path.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00383.html</filename>
    <includes id="a00269" name="error.h" local="no" imported="no">lemon/error.h</includes>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a07268" name="path.h" local="no" imported="no">lemon/concepts/path.h</includes>
    <class kind="class">lemon::Path</class>
    <class kind="class">lemon::Path::ArcIt</class>
    <class kind="class">lemon::SimplePath</class>
    <class kind="class">lemon::SimplePath::ArcIt</class>
    <class kind="class">lemon::ListPath</class>
    <class kind="class">lemon::ListPath::ArcIt</class>
    <class kind="class">lemon::StaticPath</class>
    <class kind="class">lemon::StaticPath::ArcIt</class>
    <class kind="class">lemon::PathNodeIt</class>
    <namespace>lemon</namespace>
    <member kind="function">
      <type>void</type>
      <name>pathCopy</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>ga1c0da351dc554629ec44013576637e7d</anchor>
      <arglist>(const From &amp;from, To &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyPath</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>ga437e79537f340c99bb743bc928cb0a10</anchor>
      <arglist>(To &amp;to, const From &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkPath</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>ga72529b1d8158a18d4a428dc3eab15a69</anchor>
      <arglist>(const Digraph &amp;digraph, const Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>Digraph::Node</type>
      <name>pathSource</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>ga8cd2b147cef7e0a4fa05145908d95c15</anchor>
      <arglist>(const Digraph &amp;digraph, const Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>Digraph::Node</type>
      <name>pathTarget</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>ga885afd9d4ba099bf2d8104e6e0408b66</anchor>
      <arglist>(const Digraph &amp;digraph, const Path &amp;path)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>path.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/concepts/</path>
    <filename>a07268.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00221" name="concept_check.h" local="no" imported="no">lemon/concept_check.h</includes>
    <class kind="class">lemon::concepts::Path</class>
    <class kind="class">lemon::concepts::Path::ArcIt</class>
    <class kind="class">lemon::concepts::PathDumper</class>
    <class kind="class">lemon::concepts::PathDumper::ArcIt</class>
    <class kind="class">lemon::concepts::PathDumper::RevArcIt</class>
    <namespace>lemon</namespace>
    <namespace>lemon::concepts</namespace>
  </compound>
  <compound kind="file">
    <name>planarity.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00386.html</filename>
    <includes id="a00245" name="dfs.h" local="no" imported="no">lemon/dfs.h</includes>
    <includes id="a00182" name="bfs.h" local="no" imported="no">lemon/bfs.h</includes>
    <includes id="a00398" name="radix_sort.h" local="no" imported="no">lemon/radix_sort.h</includes>
    <includes id="a00350" name="maps.h" local="no" imported="no">lemon/maps.h</includes>
    <includes id="a00383" name="path.h" local="no" imported="no">lemon/path.h</includes>
    <includes id="a00191" name="bucket_heap.h" local="no" imported="no">lemon/bucket_heap.h</includes>
    <includes id="a00164" name="adaptors.h" local="no" imported="no">lemon/adaptors.h</includes>
    <includes id="a00260" name="edge_set.h" local="no" imported="no">lemon/edge_set.h</includes>
    <includes id="a00218" name="color.h" local="no" imported="no">lemon/color.h</includes>
    <includes id="a00254" name="dim2.h" local="no" imported="no">lemon/dim2.h</includes>
    <class kind="class">lemon::PlanarEmbedding</class>
    <class kind="class">lemon::PlanarDrawing</class>
    <class kind="class">lemon::PlanarColoring</class>
    <namespace>lemon</namespace>
    <member kind="function">
      <type>bool</type>
      <name>checkPlanarity</name>
      <anchorfile>a00532.html</anchorfile>
      <anchor>ga230242aa2ee36f9b1b5a58f2c53016eb</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>preflow.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00389.html</filename>
    <includes id="a00425" name="tolerance.h" local="no" imported="no">lemon/tolerance.h</includes>
    <includes id="a00266" name="elevator.h" local="no" imported="no">lemon/elevator.h</includes>
    <class kind="struct">lemon::PreflowDefaultTraits</class>
    <class kind="class">lemon::Preflow</class>
    <class kind="struct">lemon::Preflow::SetFlowMap</class>
    <class kind="struct">lemon::Preflow::SetElevator</class>
    <class kind="struct">lemon::Preflow::SetStandardElevator</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>quad_heap.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00392.html</filename>
    <class kind="class">lemon::QuadHeap</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>radix_heap.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00395.html</filename>
    <includes id="a00269" name="error.h" local="no" imported="no">lemon/error.h</includes>
    <class kind="class">lemon::RadixHeap</class>
    <class kind="class">lemon::RadixHeap::PriorityUnderflowError</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>radix_sort.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00398.html</filename>
    <namespace>lemon</namespace>
    <member kind="function">
      <type>void</type>
      <name>radixSort</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>ga9a59ac695f0882ca6c606f4f9091ff97</anchor>
      <arglist>(Iterator first, Iterator last, Functor functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stableRadixSort</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>ga85077aa44152133d90fd5aff65856b47</anchor>
      <arglist>(Iterator first, Iterator last, Functor functor)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>random.cc</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00401.html</filename>
    <includes id="a00404" name="random.h" local="no" imported="no">lemon/random.h</includes>
    <namespace>lemon</namespace>
    <member kind="variable">
      <type>Random</type>
      <name>rnd</name>
      <anchorfile>a00554.html</anchorfile>
      <anchor>af55e529932608e88737901e3404d1d0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>random.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00404.html</filename>
    <includes id="a00356" name="math.h" local="no" imported="no">lemon/math.h</includes>
    <includes id="a00254" name="dim2.h" local="no" imported="no">lemon/dim2.h</includes>
    <class kind="class">lemon::Random</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>smart_graph.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00407.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <includes id="a00269" name="error.h" local="no" imported="no">lemon/error.h</includes>
    <class kind="class">lemon::SmartDigraph</class>
    <class kind="class">lemon::SmartDigraph::Snapshot</class>
    <class kind="class">lemon::SmartGraph</class>
    <class kind="class">lemon::SmartGraph::Snapshot</class>
    <class kind="class">lemon::SmartBpGraph</class>
    <class kind="class">lemon::SmartBpGraph::Snapshot</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>soplex.cc</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00410.html</filename>
    <includes id="a00413" name="soplex.h" local="no" imported="no">lemon/soplex.h</includes>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>soplex.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00413.html</filename>
    <includes id="a00341" name="lp_base.h" local="no" imported="no">lemon/lp_base.h</includes>
    <class kind="class">lemon::SoplexLp</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>static_graph.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00416.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <class kind="class">lemon::StaticDigraph</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>suurballe.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00419.html</filename>
    <includes id="a00185" name="bin_heap.h" local="no" imported="no">lemon/bin_heap.h</includes>
    <includes id="a00383" name="path.h" local="no" imported="no">lemon/path.h</includes>
    <includes id="a00332" name="list_graph.h" local="no" imported="no">lemon/list_graph.h</includes>
    <includes id="a00251" name="dijkstra.h" local="no" imported="no">lemon/dijkstra.h</includes>
    <includes id="a00350" name="maps.h" local="no" imported="no">lemon/maps.h</includes>
    <class kind="struct">lemon::SuurballeDefaultTraits</class>
    <class kind="class">lemon::Suurballe</class>
    <class kind="struct">lemon::Suurballe::SetFlowMap</class>
    <class kind="struct">lemon::Suurballe::SetPotentialMap</class>
    <class kind="struct">lemon::Suurballe::SetPath</class>
    <class kind="struct">lemon::Suurballe::SetHeap</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>time_measure.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00422.html</filename>
    <includes id="a00356" name="math.h" local="no" imported="no">lemon/math.h</includes>
    <class kind="class">lemon::TimeStamp</class>
    <class kind="class">lemon::Timer</class>
    <class kind="class">lemon::TimeReport</class>
    <class kind="class">lemon::NoTimeReport</class>
    <namespace>lemon</namespace>
    <member kind="function">
      <type>TimeStamp</type>
      <name>runningTimeTest</name>
      <anchorfile>a00541.html</anchorfile>
      <anchor>ga5a016a4d710b59abefedf870d8b71bb8</anchor>
      <arglist>(F f, double min_time=10, unsigned int *num=NULL, TimeStamp *full_time=NULL)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tolerance.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00425.html</filename>
    <class kind="class">lemon::Tolerance</class>
    <class kind="class">lemon::Tolerance&lt; float &gt;</class>
    <class kind="class">lemon::Tolerance&lt; double &gt;</class>
    <class kind="class">lemon::Tolerance&lt; long double &gt;</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>unionfind.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/lemon/</path>
    <filename>a00428.html</filename>
    <includes id="a00227" name="core.h" local="no" imported="no">lemon/core.h</includes>
    <class kind="class">lemon::UnionFind</class>
    <class kind="class">lemon::UnionFindEnum</class>
    <class kind="class">lemon::UnionFindEnum::ClassIt</class>
    <class kind="class">lemon::UnionFindEnum::ItemIt</class>
    <class kind="class">lemon::ExtendFindEnum</class>
    <class kind="class">lemon::ExtendFindEnum::ClassIt</class>
    <class kind="class">lemon::ExtendFindEnum::ItemIt</class>
    <class kind="class">lemon::HeapUnionFind</class>
    <class kind="class">lemon::HeapUnionFind::ItemIt</class>
    <class kind="class">lemon::HeapUnionFind::ClassIt</class>
    <namespace>lemon</namespace>
  </compound>
  <compound kind="file">
    <name>test_tools.h</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/test/</path>
    <filename>a00506.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>check</name>
      <anchorfile>a00506.html</anchorfile>
      <anchor>a1acdc408ee02ffd13dfbc7457fa01383</anchor>
      <arglist>(rc, msg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dimacs-solver.cc</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/tools/</path>
    <filename>a00497.html</filename>
    <includes id="a00407" name="smart_graph.h" local="no" imported="no">lemon/smart_graph.h</includes>
    <includes id="a00257" name="dimacs.h" local="no" imported="no">lemon/dimacs.h</includes>
    <includes id="a00329" name="lgf_writer.h" local="no" imported="no">lemon/lgf_writer.h</includes>
    <includes id="a00422" name="time_measure.h" local="no" imported="no">lemon/time_measure.h</includes>
    <includes id="a00170" name="arg_parser.h" local="no" imported="no">lemon/arg_parser.h</includes>
    <includes id="a00269" name="error.h" local="no" imported="no">lemon/error.h</includes>
    <includes id="a00251" name="dijkstra.h" local="no" imported="no">lemon/dijkstra.h</includes>
    <includes id="a00389" name="preflow.h" local="no" imported="no">lemon/preflow.h</includes>
    <includes id="a00353" name="matching.h" local="no" imported="no">lemon/matching.h</includes>
    <includes id="a00374" name="network_simplex.h" local="no" imported="no">lemon/network_simplex.h</includes>
  </compound>
  <compound kind="file">
    <name>dimacs-to-lgf.cc</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/tools/</path>
    <filename>a00500.html</filename>
    <includes id="a00407" name="smart_graph.h" local="no" imported="no">lemon/smart_graph.h</includes>
    <includes id="a00257" name="dimacs.h" local="no" imported="no">lemon/dimacs.h</includes>
    <includes id="a00329" name="lgf_writer.h" local="no" imported="no">lemon/lgf_writer.h</includes>
    <includes id="a00170" name="arg_parser.h" local="no" imported="no">lemon/arg_parser.h</includes>
    <includes id="a00269" name="error.h" local="no" imported="no">lemon/error.h</includes>
  </compound>
  <compound kind="file">
    <name>lgf-gen.cc</name>
    <path>/home/yuanzhou/mcfAuction/LEMON/tools/</path>
    <filename>a00503.html</filename>
    <includes id="a00332" name="list_graph.h" local="no" imported="no">lemon/list_graph.h</includes>
    <includes id="a00404" name="random.h" local="no" imported="no">lemon/random.h</includes>
    <includes id="a00254" name="dim2.h" local="no" imported="no">lemon/dim2.h</includes>
    <includes id="a00182" name="bfs.h" local="no" imported="no">lemon/bfs.h</includes>
    <includes id="a00233" name="counter.h" local="no" imported="no">lemon/counter.h</includes>
    <includes id="a00419" name="suurballe.h" local="no" imported="no">lemon/suurballe.h</includes>
    <includes id="a00293" name="graph_to_eps.h" local="no" imported="no">lemon/graph_to_eps.h</includes>
    <includes id="a00329" name="lgf_writer.h" local="no" imported="no">lemon/lgf_writer.h</includes>
    <includes id="a00170" name="arg_parser.h" local="no" imported="no">lemon/arg_parser.h</includes>
    <includes id="a00272" name="euler.h" local="no" imported="no">lemon/euler.h</includes>
    <includes id="a00356" name="math.h" local="no" imported="no">lemon/math.h</includes>
    <includes id="a00323" name="kruskal.h" local="no" imported="no">lemon/kruskal.h</includes>
    <includes id="a00422" name="time_measure.h" local="no" imported="no">lemon/time_measure.h</includes>
  </compound>
  <compound kind="class">
    <name>lemon::AbsMap</name>
    <filename>a03521.html</filename>
    <templarg></templarg>
    <base>MapBase&lt; M::Key, M::Value &gt;</base>
    <member kind="typedef">
      <type>M::Key</type>
      <name>Key</name>
      <anchorfile>a03521.html</anchorfile>
      <anchor>a8c5e944591efa8f8f0d64cf81950abcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M::Value</type>
      <name>Value</name>
      <anchorfile>a03521.html</anchorfile>
      <anchor>a7054917e50868b3b4c3d0899fc4b422e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbsMap</name>
      <anchorfile>a03521.html</anchorfile>
      <anchor>a878b0bf60ce4b839b2c3f08e1d3f84d0</anchor>
      <arglist>(const M &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03521.html</anchorfile>
      <anchor>a8de1b13f44fab45faa8daa93027f9df2</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>AbsMap&lt; M &gt;</type>
      <name>absMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>gabb163469d214f85023ebb74c2801a0a1</anchor>
      <arglist>(const M &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::BellmanFord::ActiveIt</name>
    <filename>a01685.html</filename>
    <member kind="function">
      <type></type>
      <name>ActiveIt</name>
      <anchorfile>a01685.html</anchorfile>
      <anchor>aa77bdb8f7f227458f6db20ce38b743af</anchor>
      <arglist>(const BellmanFord &amp;algorithm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ActiveIt</name>
      <anchorfile>a01685.html</anchorfile>
      <anchor>ad96db31e04f57f809ce31e01591169e9</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Node</name>
      <anchorfile>a01685.html</anchorfile>
      <anchor>a11d0699af4659b67aae9342df58bf004</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ActiveIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a01685.html</anchorfile>
      <anchor>a20702848d6889fbbc4e2ab2e393164f1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::AddMap</name>
    <filename>a03481.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>MapBase&lt; M1::Key, M1::Value &gt;</base>
    <member kind="typedef">
      <type>M1::Key</type>
      <name>Key</name>
      <anchorfile>a03481.html</anchorfile>
      <anchor>ac16c774bd2b82a45854c3ac66248de01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M1::Value</type>
      <name>Value</name>
      <anchorfile>a03481.html</anchorfile>
      <anchor>a087615b851ee4b1f01463e4589205d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AddMap</name>
      <anchorfile>a03481.html</anchorfile>
      <anchor>a326f279be4e7fccf9d30345b8a868297</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03481.html</anchorfile>
      <anchor>a8de1b13f44fab45faa8daa93027f9df2</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>AddMap&lt; M1, M2 &gt;</type>
      <name>addMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga198bc5656b8dd90ac511504536a9965a</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::AllArcLookUp</name>
    <filename>a02125.html</filename>
    <templarg></templarg>
    <base>lemon::ArcLookUp</base>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AllArcLookUp</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>ada3bb86d0e7763d7fc69c1d179d1d123</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refresh</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>ad03e249e4f6d22977dfae5910314ee4e</anchor>
      <arglist>(Node n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refresh</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a5f2e190b8261a98c97c2ea4e86670d54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>operator()</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a81c76c26a83c0ccdec60e168cb916ed0</anchor>
      <arglist>(Node s, Node t, Arc prev=INVALID) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::AlterableBpGraphComponent</name>
    <filename>a05401.html</filename>
    <templarg></templarg>
    <base>AlterableGraphComponent&lt; BaseBpGraphComponent &gt;</base>
    <member kind="typedef">
      <type>AlterationNotifier&lt; AlterableBpGraphComponent, RedNode &gt;</type>
      <name>RedNodeNotifier</name>
      <anchorfile>a05401.html</anchorfile>
      <anchor>a1ad67c0149ef93694edd6bfec16a51cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlterationNotifier&lt; AlterableBpGraphComponent, BlueNode &gt;</type>
      <name>BlueNodeNotifier</name>
      <anchorfile>a05401.html</anchorfile>
      <anchor>a78cd1aaba93667ea28c83342e8264c6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>RedNodeNotifier &amp;</type>
      <name>notifier</name>
      <anchorfile>a05401.html</anchorfile>
      <anchor>a48024c0db20397d9a5f250dcf4079bb9</anchor>
      <arglist>(RedNode) const</arglist>
    </member>
    <member kind="function">
      <type>BlueNodeNotifier &amp;</type>
      <name>notifier</name>
      <anchorfile>a05401.html</anchorfile>
      <anchor>ab491effcb0cd43afb510be01683d8b20</anchor>
      <arglist>(BlueNode) const</arglist>
    </member>
    <member kind="function">
      <type>EdgeNotifier &amp;</type>
      <name>notifier</name>
      <anchorfile>a05401.html</anchorfile>
      <anchor>a12d3a929b117f34c17d39d1679756a42</anchor>
      <arglist>(Edge) const</arglist>
    </member>
    <member kind="function">
      <type>NodeNotifier &amp;</type>
      <name>notifier</name>
      <anchorfile>a05401.html</anchorfile>
      <anchor>aeccb13719f5eb8dd91dc73d997182d5c</anchor>
      <arglist>(Node) const</arglist>
    </member>
    <member kind="function">
      <type>ArcNotifier &amp;</type>
      <name>notifier</name>
      <anchorfile>a05401.html</anchorfile>
      <anchor>a8e75b1249c28c3354aeba192d43195d1</anchor>
      <arglist>(Arc) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::AlterableDigraphComponent</name>
    <filename>a05385.html</filename>
    <templarg></templarg>
    <base>lemon::concepts::BaseDigraphComponent</base>
    <member kind="typedef">
      <type>AlterationNotifier&lt; AlterableDigraphComponent, Node &gt;</type>
      <name>NodeNotifier</name>
      <anchorfile>a05385.html</anchorfile>
      <anchor>a08fc2a908c6f70feec8d4c38260b26b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlterationNotifier&lt; AlterableDigraphComponent, Arc &gt;</type>
      <name>ArcNotifier</name>
      <anchorfile>a05385.html</anchorfile>
      <anchor>af37d09f18f08f584b74cbe6fa99b4773</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>NodeNotifier &amp;</type>
      <name>notifier</name>
      <anchorfile>a05385.html</anchorfile>
      <anchor>aeccb13719f5eb8dd91dc73d997182d5c</anchor>
      <arglist>(Node) const</arglist>
    </member>
    <member kind="function">
      <type>ArcNotifier &amp;</type>
      <name>notifier</name>
      <anchorfile>a05385.html</anchorfile>
      <anchor>a8e75b1249c28c3354aeba192d43195d1</anchor>
      <arglist>(Arc) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AlterableDigraphComponent&lt; BaseBpGraphComponent &gt;</name>
    <filename>a05385.html</filename>
    <base>lemon::concepts::BaseBpGraphComponent</base>
    <member kind="typedef">
      <type>AlterationNotifier&lt; AlterableDigraphComponent, Node &gt;</type>
      <name>NodeNotifier</name>
      <anchorfile>a05385.html</anchorfile>
      <anchor>a08fc2a908c6f70feec8d4c38260b26b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlterationNotifier&lt; AlterableDigraphComponent, Arc &gt;</type>
      <name>ArcNotifier</name>
      <anchorfile>a05385.html</anchorfile>
      <anchor>af37d09f18f08f584b74cbe6fa99b4773</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>NodeNotifier &amp;</type>
      <name>notifier</name>
      <anchorfile>a05385.html</anchorfile>
      <anchor>aeccb13719f5eb8dd91dc73d997182d5c</anchor>
      <arglist>(Node) const</arglist>
    </member>
    <member kind="function">
      <type>ArcNotifier &amp;</type>
      <name>notifier</name>
      <anchorfile>a05385.html</anchorfile>
      <anchor>a8e75b1249c28c3354aeba192d43195d1</anchor>
      <arglist>(Arc) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AlterableDigraphComponent&lt; BaseGraphComponent &gt;</name>
    <filename>a05385.html</filename>
    <base>lemon::concepts::BaseGraphComponent</base>
    <member kind="typedef">
      <type>AlterationNotifier&lt; AlterableDigraphComponent, Node &gt;</type>
      <name>NodeNotifier</name>
      <anchorfile>a05385.html</anchorfile>
      <anchor>a08fc2a908c6f70feec8d4c38260b26b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlterationNotifier&lt; AlterableDigraphComponent, Arc &gt;</type>
      <name>ArcNotifier</name>
      <anchorfile>a05385.html</anchorfile>
      <anchor>af37d09f18f08f584b74cbe6fa99b4773</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>NodeNotifier &amp;</type>
      <name>notifier</name>
      <anchorfile>a05385.html</anchorfile>
      <anchor>aeccb13719f5eb8dd91dc73d997182d5c</anchor>
      <arglist>(Node) const</arglist>
    </member>
    <member kind="function">
      <type>ArcNotifier &amp;</type>
      <name>notifier</name>
      <anchorfile>a05385.html</anchorfile>
      <anchor>a8e75b1249c28c3354aeba192d43195d1</anchor>
      <arglist>(Arc) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::AlterableGraphComponent</name>
    <filename>a05393.html</filename>
    <templarg></templarg>
    <base>AlterableDigraphComponent&lt; BaseGraphComponent &gt;</base>
    <member kind="typedef">
      <type>AlterationNotifier&lt; AlterableGraphComponent, Edge &gt;</type>
      <name>EdgeNotifier</name>
      <anchorfile>a05393.html</anchorfile>
      <anchor>a8e089f2afb622f7ce8033ec8dde6e885</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EdgeNotifier &amp;</type>
      <name>notifier</name>
      <anchorfile>a05393.html</anchorfile>
      <anchor>a12d3a929b117f34c17d39d1679756a42</anchor>
      <arglist>(Edge) const</arglist>
    </member>
    <member kind="function">
      <type>NodeNotifier &amp;</type>
      <name>notifier</name>
      <anchorfile>a05393.html</anchorfile>
      <anchor>aeccb13719f5eb8dd91dc73d997182d5c</anchor>
      <arglist>(Node) const</arglist>
    </member>
    <member kind="function">
      <type>ArcNotifier &amp;</type>
      <name>notifier</name>
      <anchorfile>a05393.html</anchorfile>
      <anchor>a8e75b1249c28c3354aeba192d43195d1</anchor>
      <arglist>(Arc) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AlterableGraphComponent&lt; BaseBpGraphComponent &gt;</name>
    <filename>a05393.html</filename>
    <base>AlterableDigraphComponent&lt; BaseBpGraphComponent &gt;</base>
    <member kind="typedef">
      <type>AlterationNotifier&lt; AlterableGraphComponent, Edge &gt;</type>
      <name>EdgeNotifier</name>
      <anchorfile>a05393.html</anchorfile>
      <anchor>a8e089f2afb622f7ce8033ec8dde6e885</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EdgeNotifier &amp;</type>
      <name>notifier</name>
      <anchorfile>a05393.html</anchorfile>
      <anchor>a12d3a929b117f34c17d39d1679756a42</anchor>
      <arglist>(Edge) const</arglist>
    </member>
    <member kind="function">
      <type>NodeNotifier &amp;</type>
      <name>notifier</name>
      <anchorfile>a05393.html</anchorfile>
      <anchor>aeccb13719f5eb8dd91dc73d997182d5c</anchor>
      <arglist>(Node) const</arglist>
    </member>
    <member kind="function">
      <type>ArcNotifier &amp;</type>
      <name>notifier</name>
      <anchorfile>a05393.html</anchorfile>
      <anchor>a8e75b1249c28c3354aeba192d43195d1</anchor>
      <arglist>(Arc) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::AndMap</name>
    <filename>a03533.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>MapBase&lt; M1::Key, bool &gt;</base>
    <member kind="typedef">
      <type>M1::Key</type>
      <name>Key</name>
      <anchorfile>a03533.html</anchorfile>
      <anchor>ac16c774bd2b82a45854c3ac66248de01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>Value</name>
      <anchorfile>a03533.html</anchorfile>
      <anchor>aaf2b2f1e7bba19591a125e352c5d7bda</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AndMap</name>
      <anchorfile>a03533.html</anchorfile>
      <anchor>a87163ce7561166f71889a12898e73d6e</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03533.html</anchorfile>
      <anchor>a8de1b13f44fab45faa8daa93027f9df2</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>AndMap&lt; M1, M2 &gt;</type>
      <name>andMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga2e998d08fcf3ef385717fdd4e0d983d8</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::BpGraph::Arc</name>
    <filename>a05141.html</filename>
    <member kind="function">
      <type></type>
      <name>Arc</name>
      <anchorfile>a05141.html</anchorfile>
      <anchor>a9da2daa646ba83cf05f2911e9b711395</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Arc</name>
      <anchorfile>a05141.html</anchorfile>
      <anchor>a5373a1c1375de29fc15d04784ff78c15</anchor>
      <arglist>(const Arc &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Arc</name>
      <anchorfile>a05141.html</anchorfile>
      <anchor>ac8e547177cf6043a0f6801ef10d4a3c3</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a05141.html</anchorfile>
      <anchor>a958bb864c16c7c55bf2b64df2f50b995</anchor>
      <arglist>(Arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a05141.html</anchorfile>
      <anchor>aa2676ebc51f80024df054f1e62b448f8</anchor>
      <arglist>(Arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a05141.html</anchorfile>
      <anchor>a4007c6f95577859823d14f32bfa24602</anchor>
      <arglist>(Arc) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Edge</name>
      <anchorfile>a05141.html</anchorfile>
      <anchor>ad055e5dd2130562d1b5886440bedcb62</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::Graph::Arc</name>
    <filename>a05245.html</filename>
    <member kind="function">
      <type></type>
      <name>Arc</name>
      <anchorfile>a05245.html</anchorfile>
      <anchor>a9da2daa646ba83cf05f2911e9b711395</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Arc</name>
      <anchorfile>a05245.html</anchorfile>
      <anchor>a5373a1c1375de29fc15d04784ff78c15</anchor>
      <arglist>(const Arc &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Arc</name>
      <anchorfile>a05245.html</anchorfile>
      <anchor>ac8e547177cf6043a0f6801ef10d4a3c3</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a05245.html</anchorfile>
      <anchor>a958bb864c16c7c55bf2b64df2f50b995</anchor>
      <arglist>(Arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a05245.html</anchorfile>
      <anchor>aa2676ebc51f80024df054f1e62b448f8</anchor>
      <arglist>(Arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a05245.html</anchorfile>
      <anchor>a4007c6f95577859823d14f32bfa24602</anchor>
      <arglist>(Arc) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Edge</name>
      <anchorfile>a05245.html</anchorfile>
      <anchor>ad055e5dd2130562d1b5886440bedcb62</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::Digraph::Arc</name>
    <filename>a05193.html</filename>
    <member kind="function">
      <type></type>
      <name>Arc</name>
      <anchorfile>a05193.html</anchorfile>
      <anchor>a9da2daa646ba83cf05f2911e9b711395</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Arc</name>
      <anchorfile>a05193.html</anchorfile>
      <anchor>a5373a1c1375de29fc15d04784ff78c15</anchor>
      <arglist>(const Arc &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Arc</name>
      <anchorfile>a05193.html</anchorfile>
      <anchor>ac8e547177cf6043a0f6801ef10d4a3c3</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a05193.html</anchorfile>
      <anchor>a958bb864c16c7c55bf2b64df2f50b995</anchor>
      <arglist>(Arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a05193.html</anchorfile>
      <anchor>aa2676ebc51f80024df054f1e62b448f8</anchor>
      <arglist>(Arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a05193.html</anchorfile>
      <anchor>a4007c6f95577859823d14f32bfa24602</anchor>
      <arglist>(Arc) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::BpGraph::ArcIt</name>
    <filename>a05145.html</filename>
    <base>lemon::concepts::BpGraph::Arc</base>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a05145.html</anchorfile>
      <anchor>a19f73b24f93bc2400778a66262f4fc78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a05145.html</anchorfile>
      <anchor>a362cddf54aed5ce978e49d334776250b</anchor>
      <arglist>(const ArcIt &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a05145.html</anchorfile>
      <anchor>a3bde563f0bba0fc91cc7255fed9b682c</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a05145.html</anchorfile>
      <anchor>a6d9c8076d6b8aacd48dc1a55192a0fc9</anchor>
      <arglist>(const BpGraph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a05145.html</anchorfile>
      <anchor>ac8744fe6d9b853ea9ecf56a89fcf5aee</anchor>
      <arglist>(const BpGraph &amp;, const Arc &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ArcIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a05145.html</anchorfile>
      <anchor>aa8838b5e6d2c1404b0b07dfc23ff9564</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::Digraph::ArcIt</name>
    <filename>a05205.html</filename>
    <base>lemon::concepts::Digraph::Arc</base>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a05205.html</anchorfile>
      <anchor>a19f73b24f93bc2400778a66262f4fc78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a05205.html</anchorfile>
      <anchor>a362cddf54aed5ce978e49d334776250b</anchor>
      <arglist>(const ArcIt &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a05205.html</anchorfile>
      <anchor>a3bde563f0bba0fc91cc7255fed9b682c</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a05205.html</anchorfile>
      <anchor>a9fdb90bbc22caeb9bb716bb8c5d6e35c</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a05205.html</anchorfile>
      <anchor>a8b331a60890a7a9d4ed7254fc44062a0</anchor>
      <arglist>(const Digraph &amp;, const Arc &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ArcIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a05205.html</anchorfile>
      <anchor>aa8838b5e6d2c1404b0b07dfc23ff9564</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::Graph::ArcIt</name>
    <filename>a05249.html</filename>
    <base>lemon::concepts::Graph::Arc</base>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a05249.html</anchorfile>
      <anchor>a19f73b24f93bc2400778a66262f4fc78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a05249.html</anchorfile>
      <anchor>a362cddf54aed5ce978e49d334776250b</anchor>
      <arglist>(const ArcIt &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a05249.html</anchorfile>
      <anchor>a3bde563f0bba0fc91cc7255fed9b682c</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a05249.html</anchorfile>
      <anchor>ac38b8cd9b9df08c67e7bd8bbb02ac09b</anchor>
      <arglist>(const Graph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a05249.html</anchorfile>
      <anchor>a94562cb075a97a6834cbb69fc5066a67</anchor>
      <arglist>(const Graph &amp;, const Arc &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ArcIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a05249.html</anchorfile>
      <anchor>aa8838b5e6d2c1404b0b07dfc23ff9564</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::Path::ArcIt</name>
    <filename>a05577.html</filename>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a05577.html</anchorfile>
      <anchor>a19f73b24f93bc2400778a66262f4fc78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a05577.html</anchorfile>
      <anchor>a3bde563f0bba0fc91cc7255fed9b682c</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a05577.html</anchorfile>
      <anchor>a5cefdc7b7a666e1a0faa5d23de25ef32</anchor>
      <arglist>(const Path &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Arc</name>
      <anchorfile>a05577.html</anchorfile>
      <anchor>a435e7990d5f173e02eda8dcb1be99bf4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a05577.html</anchorfile>
      <anchor>aa8838b5e6d2c1404b0b07dfc23ff9564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a05577.html</anchorfile>
      <anchor>aee3bc0349f420f5651f0d62b77506f68</anchor>
      <arglist>(const ArcIt &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a05577.html</anchorfile>
      <anchor>aaf502c7aaf90b797180bb55ddb3e6e95</anchor>
      <arglist>(const ArcIt &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a05577.html</anchorfile>
      <anchor>ad612724f8a729dcb05c601a683607307</anchor>
      <arglist>(const ArcIt &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::PathDumper::ArcIt</name>
    <filename>a05597.html</filename>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a05597.html</anchorfile>
      <anchor>a19f73b24f93bc2400778a66262f4fc78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a05597.html</anchorfile>
      <anchor>a3bde563f0bba0fc91cc7255fed9b682c</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a05597.html</anchorfile>
      <anchor>a31eaf7cec0be2ee774ad71a30d669b9a</anchor>
      <arglist>(const PathDumper &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Arc</name>
      <anchorfile>a05597.html</anchorfile>
      <anchor>a435e7990d5f173e02eda8dcb1be99bf4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a05597.html</anchorfile>
      <anchor>aa8838b5e6d2c1404b0b07dfc23ff9564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a05597.html</anchorfile>
      <anchor>aee3bc0349f420f5651f0d62b77506f68</anchor>
      <arglist>(const ArcIt &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a05597.html</anchorfile>
      <anchor>aaf502c7aaf90b797180bb55ddb3e6e95</anchor>
      <arglist>(const ArcIt &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a05597.html</anchorfile>
      <anchor>ad612724f8a729dcb05c601a683607307</anchor>
      <arglist>(const ArcIt &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::Path::ArcIt</name>
    <filename>a03937.html</filename>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a03937.html</anchorfile>
      <anchor>a19f73b24f93bc2400778a66262f4fc78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a03937.html</anchorfile>
      <anchor>a3bde563f0bba0fc91cc7255fed9b682c</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a03937.html</anchorfile>
      <anchor>acb2907ea0f330b931889617b60cf7098</anchor>
      <arglist>(const Path &amp;_path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Arc &amp;</name>
      <anchorfile>a03937.html</anchorfile>
      <anchor>a191dc02f56534f0a8a0fd6c2b7d4803e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a03937.html</anchorfile>
      <anchor>aa8838b5e6d2c1404b0b07dfc23ff9564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a03937.html</anchorfile>
      <anchor>a6c945fbc1ad0abff4a7760d11a5dfc2e</anchor>
      <arglist>(const ArcIt &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a03937.html</anchorfile>
      <anchor>ad8667a8fece72c49d11f34a8267aba0c</anchor>
      <arglist>(const ArcIt &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a03937.html</anchorfile>
      <anchor>a8e1e242d59d283026987c615598411e6</anchor>
      <arglist>(const ArcIt &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::SimplePath::ArcIt</name>
    <filename>a03945.html</filename>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a03945.html</anchorfile>
      <anchor>a19f73b24f93bc2400778a66262f4fc78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a03945.html</anchorfile>
      <anchor>a3bde563f0bba0fc91cc7255fed9b682c</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a03945.html</anchorfile>
      <anchor>ad9dcb25456b012d997873a88812f6a4a</anchor>
      <arglist>(const SimplePath &amp;_path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Arc &amp;</name>
      <anchorfile>a03945.html</anchorfile>
      <anchor>a191dc02f56534f0a8a0fd6c2b7d4803e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a03945.html</anchorfile>
      <anchor>aa8838b5e6d2c1404b0b07dfc23ff9564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a03945.html</anchorfile>
      <anchor>a6c945fbc1ad0abff4a7760d11a5dfc2e</anchor>
      <arglist>(const ArcIt &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a03945.html</anchorfile>
      <anchor>ad8667a8fece72c49d11f34a8267aba0c</anchor>
      <arglist>(const ArcIt &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a03945.html</anchorfile>
      <anchor>a8e1e242d59d283026987c615598411e6</anchor>
      <arglist>(const ArcIt &amp;e) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a03945.html</anchorfile>
      <anchor>ad48a60279e86c5c6895cf18ae9e207b7</anchor>
      <arglist>(const SimplePath &amp;_path, int _idx)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ListPath::ArcIt</name>
    <filename>a03957.html</filename>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a03957.html</anchorfile>
      <anchor>a19f73b24f93bc2400778a66262f4fc78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a03957.html</anchorfile>
      <anchor>a3bde563f0bba0fc91cc7255fed9b682c</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a03957.html</anchorfile>
      <anchor>ac74dc943db48800993e5564636657fc7</anchor>
      <arglist>(const ListPath &amp;_path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Arc &amp;</name>
      <anchorfile>a03957.html</anchorfile>
      <anchor>a191dc02f56534f0a8a0fd6c2b7d4803e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a03957.html</anchorfile>
      <anchor>aa8838b5e6d2c1404b0b07dfc23ff9564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a03957.html</anchorfile>
      <anchor>a6c945fbc1ad0abff4a7760d11a5dfc2e</anchor>
      <arglist>(const ArcIt &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a03957.html</anchorfile>
      <anchor>ad8667a8fece72c49d11f34a8267aba0c</anchor>
      <arglist>(const ArcIt &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a03957.html</anchorfile>
      <anchor>a8e1e242d59d283026987c615598411e6</anchor>
      <arglist>(const ArcIt &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::StaticPath::ArcIt</name>
    <filename>a03965.html</filename>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a03965.html</anchorfile>
      <anchor>a19f73b24f93bc2400778a66262f4fc78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a03965.html</anchorfile>
      <anchor>a3bde563f0bba0fc91cc7255fed9b682c</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a03965.html</anchorfile>
      <anchor>aca18f95e8af73633930dd81159a02392</anchor>
      <arglist>(const StaticPath &amp;_path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Arc &amp;</name>
      <anchorfile>a03965.html</anchorfile>
      <anchor>a191dc02f56534f0a8a0fd6c2b7d4803e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ArcIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a03965.html</anchorfile>
      <anchor>aa8838b5e6d2c1404b0b07dfc23ff9564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a03965.html</anchorfile>
      <anchor>a6c945fbc1ad0abff4a7760d11a5dfc2e</anchor>
      <arglist>(const ArcIt &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a03965.html</anchorfile>
      <anchor>ad8667a8fece72c49d11f34a8267aba0c</anchor>
      <arglist>(const ArcIt &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a03965.html</anchorfile>
      <anchor>a8e1e242d59d283026987c615598411e6</anchor>
      <arglist>(const ArcIt &amp;e) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ArcIt</name>
      <anchorfile>a03965.html</anchorfile>
      <anchor>ae8a75a9d6f59688d3819d1575f575269</anchor>
      <arglist>(const StaticPath &amp;_path, int _idx)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ArcLookUp</name>
    <filename>a02117.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a02117.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcLookUp</name>
      <anchorfile>a02117.html</anchorfile>
      <anchor>ac8d5a1b8fa9f0a94a40144de9083bc80</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refresh</name>
      <anchorfile>a02117.html</anchorfile>
      <anchor>ad03e249e4f6d22977dfae5910314ee4e</anchor>
      <arglist>(Node n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refresh</name>
      <anchorfile>a02117.html</anchorfile>
      <anchor>a5f2e190b8261a98c97c2ea4e86670d54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>operator()</name>
      <anchorfile>a02117.html</anchorfile>
      <anchor>afbad9cb1191fff537a09b404a97d68e5</anchor>
      <arglist>(Node s, Node t) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::BpGraph::ArcMap</name>
    <filename>a05169.html</filename>
    <templarg></templarg>
    <base>ReferenceMap&lt; Arc, T, T &amp;, const T &amp; &gt;</base>
    <member kind="function">
      <type></type>
      <name>ArcMap</name>
      <anchorfile>a05169.html</anchorfile>
      <anchor>a155f209d0330302f2afd599a686b49d2</anchor>
      <arglist>(const BpGraph &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcMap</name>
      <anchorfile>a05169.html</anchorfile>
      <anchor>a2687c07615c670cd2e653debea775c50</anchor>
      <arglist>(const BpGraph &amp;, T)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ArcMap</name>
      <anchorfile>a05169.html</anchorfile>
      <anchor>a8b5b7779352631b2f1e496cd8b6a0825</anchor>
      <arglist>(const ArcMap &amp;em)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ArcMap &amp;</type>
      <name>operator=</name>
      <anchorfile>a05169.html</anchorfile>
      <anchor>a2e0bc35c44d63fc2f089191605de4ad0</anchor>
      <arglist>(const CMap &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::Digraph::ArcMap</name>
    <filename>a05213.html</filename>
    <templarg></templarg>
    <base>ReferenceMap&lt; Arc, T, T &amp;, const T &amp; &gt;</base>
    <member kind="function">
      <type></type>
      <name>ArcMap</name>
      <anchorfile>a05213.html</anchorfile>
      <anchor>a52ad4fa4ff6bb5c6078ff647814144fb</anchor>
      <arglist>(const Digraph &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcMap</name>
      <anchorfile>a05213.html</anchorfile>
      <anchor>a2ade9cf15a9db3bc363f27f43204a65d</anchor>
      <arglist>(const Digraph &amp;, T)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ArcMap</name>
      <anchorfile>a05213.html</anchorfile>
      <anchor>a8b5b7779352631b2f1e496cd8b6a0825</anchor>
      <arglist>(const ArcMap &amp;em)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ArcMap &amp;</type>
      <name>operator=</name>
      <anchorfile>a05213.html</anchorfile>
      <anchor>a2e0bc35c44d63fc2f089191605de4ad0</anchor>
      <arglist>(const CMap &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::Graph::ArcMap</name>
    <filename>a05265.html</filename>
    <templarg></templarg>
    <base>ReferenceMap&lt; Arc, T, T &amp;, const T &amp; &gt;</base>
    <member kind="function">
      <type></type>
      <name>ArcMap</name>
      <anchorfile>a05265.html</anchorfile>
      <anchor>a5271b8a8cf0b7a38df385e8f74ef0e86</anchor>
      <arglist>(const Graph &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcMap</name>
      <anchorfile>a05265.html</anchorfile>
      <anchor>ab93b09d11305d46b9b46a2f1aa8a4c86</anchor>
      <arglist>(const Graph &amp;, T)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ArcMap</name>
      <anchorfile>a05265.html</anchorfile>
      <anchor>a8b5b7779352631b2f1e496cd8b6a0825</anchor>
      <arglist>(const ArcMap &amp;em)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ArcMap &amp;</type>
      <name>operator=</name>
      <anchorfile>a05265.html</anchorfile>
      <anchor>a2e0bc35c44d63fc2f089191605de4ad0</anchor>
      <arglist>(const CMap &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::MappableDigraphComponent::ArcMap</name>
    <filename>a05425.html</filename>
    <templarg></templarg>
    <base>GraphMap&lt; MappableDigraphComponent, Arc, V &gt;</base>
    <member kind="function">
      <type></type>
      <name>ArcMap</name>
      <anchorfile>a05425.html</anchorfile>
      <anchor>a475275c7f2626cb2bc41fd5253e629bb</anchor>
      <arglist>(const MappableDigraphComponent &amp;digraph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArcMap</name>
      <anchorfile>a05425.html</anchorfile>
      <anchor>ac80a16d015e7b8ddd5b5ca930e5888a8</anchor>
      <arglist>(const MappableDigraphComponent &amp;digraph, const V &amp;value)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ArcMap</name>
      <anchorfile>a05425.html</anchorfile>
      <anchor>a4ad524297cf426d506ac218711d6010a</anchor>
      <arglist>(const ArcMap &amp;nm)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ArcMap &amp;</type>
      <name>operator=</name>
      <anchorfile>a05425.html</anchorfile>
      <anchor>a2e0bc35c44d63fc2f089191605de4ad0</anchor>
      <arglist>(const CMap &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ArgParser</name>
    <filename>a01617.html</filename>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>intOption</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a85d559c4b20d2f3fce8fd8e75338d9f5</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;help, int value=0, bool obl=false)</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>doubleOption</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a0c5536fa3fbccef684622c7c3f77388f</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;help, double value=0, bool obl=false)</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>boolOption</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>ae4fcf9d73bc7e527ac0db7c9d6a3f4a9</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;help, bool value=false, bool obl=false)</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>stringOption</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a2cb1ffd505413d02cd363cbd7f7e6fed</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;help, std::string value=&quot;&quot;, bool obl=false)</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>other</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>aa8519a140b285cbefa1fa47af0e9a9a6</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;help=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>refOption</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>af72e3b37d1b0d8c06a35ced1e19945da</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;help, int &amp;ref, bool obl=false)</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>refOption</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a9551cb0275da0c50091fef78e1fb5a86</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;help, double &amp;ref, bool obl=false)</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>refOption</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a154ab534f7b4040ab84c261aebfd33a5</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;help, bool &amp;ref, bool obl=false)</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>refOption</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a3e587e44687ddcc3310006f27cbbb0fe</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;help, std::string &amp;ref, bool obl=false)</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>optionGroup</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>aad20f888d2bc5c590777b753b8b63e90</anchor>
      <arglist>(const std::string &amp;group, const std::string &amp;opt)</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>onlyOneGroup</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a1da70c717947a87bcaf0ba40b8cbe411</anchor>
      <arglist>(const std::string &amp;group)</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>mandatoryGroup</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>abac885c55c4c5acefd2726d61c89d832</anchor>
      <arglist>(const std::string &amp;group)</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>synonym</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a84fdd5f9ed184b3ef96a142590d9c7b3</anchor>
      <arglist>(const std::string &amp;syn, const std::string &amp;opt)</arglist>
    </member>
    <class kind="class">lemon::ArgParser::RefType</class>
    <member kind="function">
      <type></type>
      <name>ArgParser</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>ac53646f9d7508088703ae971557756da</anchor>
      <arglist>(int argc, const char *const *argv)</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>parse</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a2b68b45bae933b58b66b151f191720bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>run</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>aff25e191acdc1f1e9bac4af25910bd35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>commandName</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a023ea5975c711988a78ec20d65898253</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>given</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>ae74da01d253a5df1497a604c20abfbd7</anchor>
      <arglist>(std::string op) const</arglist>
    </member>
    <member kind="function">
      <type>RefType</type>
      <name>operator[]</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>ae7077cfdd14fd1fa27105f1ec7ddb012</anchor>
      <arglist>(const std::string &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>files</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a96c961bc89f399c379a477537da06449</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>throwOnProblems</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a4f78fd6d3de2bbcab981ec4df3826842</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>intOption</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a85d559c4b20d2f3fce8fd8e75338d9f5</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;help, int value=0, bool obl=false)</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>doubleOption</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a0c5536fa3fbccef684622c7c3f77388f</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;help, double value=0, bool obl=false)</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>boolOption</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>ae4fcf9d73bc7e527ac0db7c9d6a3f4a9</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;help, bool value=false, bool obl=false)</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>stringOption</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a2cb1ffd505413d02cd363cbd7f7e6fed</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;help, std::string value=&quot;&quot;, bool obl=false)</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>other</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>aa8519a140b285cbefa1fa47af0e9a9a6</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;help=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>refOption</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>af72e3b37d1b0d8c06a35ced1e19945da</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;help, int &amp;ref, bool obl=false)</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>refOption</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a9551cb0275da0c50091fef78e1fb5a86</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;help, double &amp;ref, bool obl=false)</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>refOption</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a154ab534f7b4040ab84c261aebfd33a5</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;help, bool &amp;ref, bool obl=false)</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>refOption</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a3e587e44687ddcc3310006f27cbbb0fe</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;help, std::string &amp;ref, bool obl=false)</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>optionGroup</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>aad20f888d2bc5c590777b753b8b63e90</anchor>
      <arglist>(const std::string &amp;group, const std::string &amp;opt)</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>onlyOneGroup</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a1da70c717947a87bcaf0ba40b8cbe411</anchor>
      <arglist>(const std::string &amp;group)</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>mandatoryGroup</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>abac885c55c4c5acefd2726d61c89d832</anchor>
      <arglist>(const std::string &amp;group)</arglist>
    </member>
    <member kind="function">
      <type>ArgParser &amp;</type>
      <name>synonym</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a84fdd5f9ed184b3ef96a142590d9c7b3</anchor>
      <arglist>(const std::string &amp;syn, const std::string &amp;opt)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ArgParserException</name>
    <filename>a01613.html</filename>
    <base>lemon::Exception</base>
    <member kind="enumeration">
      <type></type>
      <name>Reason</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>af38960e2d1da2c992b2232eb3f285c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HELP</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>af38960e2d1da2c992b2232eb3f285c4ea9f5cb747b2e1f0ea781d2b1f2a5b4824</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_OPT</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>af38960e2d1da2c992b2232eb3f285c4eabfd8812b728977aa16448b7751ef9508</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_OPT</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>af38960e2d1da2c992b2232eb3f285c4ead53c24d6a74a9e0e024703198b877d83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HELP</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>af38960e2d1da2c992b2232eb3f285c4ea9f5cb747b2e1f0ea781d2b1f2a5b4824</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_OPT</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>af38960e2d1da2c992b2232eb3f285c4eabfd8812b728977aa16448b7751ef9508</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_OPT</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>af38960e2d1da2c992b2232eb3f285c4ead53c24d6a74a9e0e024703198b877d83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArgParserException</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a143c5e00789073bb68ef6139fa3de431</anchor>
      <arglist>(Reason r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArgParserException</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a1c939d24b50b26afad675f36ca7ed544</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>ad62489809e3df568e973597b928d6d9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Reason</type>
      <name>reason</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a39225ba3bb4a6e4577080f69ba852cd0</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::BackwardMap</name>
    <filename>a03661.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR::Edge</type>
      <name>Key</name>
      <anchorfile>a03661.html</anchorfile>
      <anchor>a491252d778b36b9c24dbcf1d7223548b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GR::Arc</type>
      <name>Value</name>
      <anchorfile>a03661.html</anchorfile>
      <anchor>a7978efb40d60889c1a35fd580c9d7d67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BackwardMap</name>
      <anchorfile>a03661.html</anchorfile>
      <anchor>a2269f2ca0a7263cdbf0c9f471533212c</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03661.html</anchorfile>
      <anchor>a9ac2d4975d0586c2793b6ff53ab35431</anchor>
      <arglist>(const Key &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>BackwardMap&lt; GR &gt;</type>
      <name>backwardMap</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga76a84fc9fdb56bcd00cf437cd1d31cdb</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::BaseBpGraphComponent</name>
    <filename>a05305.html</filename>
    <base>lemon::concepts::BaseGraphComponent</base>
    <class kind="class">lemon::concepts::BaseBpGraphComponent::BlueNode</class>
    <class kind="class">lemon::concepts::BaseBpGraphComponent::RedNode</class>
    <member kind="function">
      <type>bool</type>
      <name>red</name>
      <anchorfile>a05305.html</anchorfile>
      <anchor>aa3b5ad19f5f5c28cbad0f003618615c9</anchor>
      <arglist>(const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>blue</name>
      <anchorfile>a05305.html</anchorfile>
      <anchor>a396e7845791e247c88aff4a2de131822</anchor>
      <arglist>(const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>RedNode</type>
      <name>redNode</name>
      <anchorfile>a05305.html</anchorfile>
      <anchor>a3f8b2e0317e2d02f97ef291add6798f0</anchor>
      <arglist>(const Edge &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>BlueNode</type>
      <name>blueNode</name>
      <anchorfile>a05305.html</anchorfile>
      <anchor>a32c381facc08531c78265f421b2637b9</anchor>
      <arglist>(const Edge &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>RedNode</type>
      <name>asRedNodeUnsafe</name>
      <anchorfile>a05305.html</anchorfile>
      <anchor>a3058478fec8120a41bd34ce72eb27631</anchor>
      <arglist>(const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>BlueNode</type>
      <name>asBlueNodeUnsafe</name>
      <anchorfile>a05305.html</anchorfile>
      <anchor>a5eae21f9e2376ba7bde7fa9e28183c65</anchor>
      <arglist>(const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>RedNode</type>
      <name>asRedNode</name>
      <anchorfile>a05305.html</anchorfile>
      <anchor>afa6c2206200de5019918999c62882ff6</anchor>
      <arglist>(const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>BlueNode</type>
      <name>asBlueNode</name>
      <anchorfile>a05305.html</anchorfile>
      <anchor>a6933a1952c08e83d8ef3834c575114b5</anchor>
      <arglist>(const Node &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::BaseDigraphComponent</name>
    <filename>a05285.html</filename>
    <member kind="typedef">
      <type>GraphItem&lt; &apos;n&apos;&gt;</type>
      <name>Node</name>
      <anchorfile>a05285.html</anchorfile>
      <anchor>a90c88d4c17b799f8cb75ebf0a35f4b45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GraphItem&lt; &apos;a&apos;&gt;</type>
      <name>Arc</name>
      <anchorfile>a05285.html</anchorfile>
      <anchor>a17b854e59506b0707d2716c7108a0124</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>source</name>
      <anchorfile>a05285.html</anchorfile>
      <anchor>a8b14c342fd0464770256044d5bf18a55</anchor>
      <arglist>(const Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>target</name>
      <anchorfile>a05285.html</anchorfile>
      <anchor>a51a3ac566bb4962bfaf43274d98641b8</anchor>
      <arglist>(const Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>oppositeNode</name>
      <anchorfile>a05285.html</anchorfile>
      <anchor>a2d60b10e6b44602796829ff16993bc8b</anchor>
      <arglist>(const Node &amp;, const Arc &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::BaseGraphComponent</name>
    <filename>a05293.html</filename>
    <base>lemon::concepts::BaseDigraphComponent</base>
    <class kind="class">lemon::concepts::BaseGraphComponent::Edge</class>
    <member kind="function">
      <type>Node</type>
      <name>u</name>
      <anchorfile>a05293.html</anchorfile>
      <anchor>a8250964588e721ec2fcabb15514e9bef</anchor>
      <arglist>(const Edge &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>v</name>
      <anchorfile>a05293.html</anchorfile>
      <anchor>a0714612aecfb9bfbd3fecc1e2b67cc30</anchor>
      <arglist>(const Edge &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>direct</name>
      <anchorfile>a05293.html</anchorfile>
      <anchor>ab3fb380bfe17b358ed7ae8e5c220b7fb</anchor>
      <arglist>(const Edge &amp;, bool) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>direct</name>
      <anchorfile>a05293.html</anchorfile>
      <anchor>a5fe380637a8854ce976da18edc92b0db</anchor>
      <arglist>(const Edge &amp;, const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>direction</name>
      <anchorfile>a05293.html</anchorfile>
      <anchor>a106079f549b54baa79a2ad9f0833d59b</anchor>
      <arglist>(const Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>oppositeArc</name>
      <anchorfile>a05293.html</anchorfile>
      <anchor>a94b89090640e230d1d5200e226217bfc</anchor>
      <arglist>(const Arc &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::BellmanFord</name>
    <filename>a01657.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a1908307057e2129bc3ac13f30beab5ec</anchor>
      <arglist>(const Value value=OperationTraits::infinity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>af16b57c30311aa0ad8595c05149ccd36</anchor>
      <arglist>(Node source, Value dst=OperationTraits::zero())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processNextRound</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>acbe7e43e0e9317a5a7a915be97e2b71a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processNextWeakRound</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a40e71e9190752153cf04bd48835dd50c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkedStart</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a3bc557223ef2af001c022580f9c8e18c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>limitedStart</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ab2a0b7b42728a941e49dde2b22051910</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ae880685084df985ac030788c8d4537ae</anchor>
      <arglist>(Node s, int num)</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dist</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a7c008a8c450fc4f6cefcd9e764abe6fd</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>lemon::Path&lt; Digraph &gt;</type>
      <name>negativeCycle</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a6481981abf537af3297161a6b11abb0b</anchor>
      <arglist>() const</arglist>
    </member>
    <class kind="class">lemon::BellmanFord::ActiveIt</class>
    <class kind="struct">lemon::BellmanFord::SetDistMap</class>
    <class kind="struct">lemon::BellmanFord::SetOperationTraits</class>
    <class kind="struct">lemon::BellmanFord::SetPredMap</class>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LengthMap::Value</type>
      <name>Value</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a6f677ff45d75aa12b23a873c02b37256</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LengthMap</type>
      <name>LengthMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ac1094a242a4e9be216f0623b0a7381c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>adc9638061e7acac70160feb0ea49c29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::DistMap</type>
      <name>DistMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ad6d9c2819f215994ded26fbe42e2fd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PredMapPath&lt; Digraph, PredMap &gt;</type>
      <name>Path</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a4d7ae5a0651af9c9cfadd1462718979d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::OperationTraits</type>
      <name>OperationTraits</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>afda95bfb086e37f03cb0be4ba8725f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR</type>
      <name>Traits</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BellmanFord</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a3c6b227a4a6d76c8c5960ab4d713c1d7</anchor>
      <arglist>(const Digraph &amp;g, const LengthMap &amp;length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BellmanFord</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>aa08834fed4ff14ac7d8a10391f0f82f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BellmanFord &amp;</type>
      <name>lengthMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a01e0b5327109e861429c3c9971b3ba3e</anchor>
      <arglist>(const LengthMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BellmanFord &amp;</type>
      <name>predMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>aa5db6c51d541df4b4b20f43f501ac11b</anchor>
      <arglist>(PredMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BellmanFord &amp;</type>
      <name>distMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a7d28eb0ac8edbafbad854997781038a3</anchor>
      <arglist>(DistMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a1908307057e2129bc3ac13f30beab5ec</anchor>
      <arglist>(const Value value=OperationTraits::infinity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>af16b57c30311aa0ad8595c05149ccd36</anchor>
      <arglist>(Node source, Value dst=OperationTraits::zero())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processNextRound</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>acbe7e43e0e9317a5a7a915be97e2b71a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processNextWeakRound</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a40e71e9190752153cf04bd48835dd50c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkedStart</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a3bc557223ef2af001c022580f9c8e18c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>limitedStart</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ab2a0b7b42728a941e49dde2b22051910</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ae880685084df985ac030788c8d4537ae</anchor>
      <arglist>(Node s, int num)</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dist</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a7c008a8c450fc4f6cefcd9e764abe6fd</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>lemon::Path&lt; Digraph &gt;</type>
      <name>negativeCycle</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a6481981abf537af3297161a6b11abb0b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BellmanFord&lt; Digraph, LengthMap, SetDistMapTraits&lt; T &gt; &gt;</name>
    <filename>a01657.html</filename>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dist</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a7c008a8c450fc4f6cefcd9e764abe6fd</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>lemon::Path&lt; Digraph &gt;</type>
      <name>negativeCycle</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a6481981abf537af3297161a6b11abb0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a1908307057e2129bc3ac13f30beab5ec</anchor>
      <arglist>(const Value value=OperationTraits::infinity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>af16b57c30311aa0ad8595c05149ccd36</anchor>
      <arglist>(Node source, Value dst=OperationTraits::zero())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processNextRound</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>acbe7e43e0e9317a5a7a915be97e2b71a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processNextWeakRound</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a40e71e9190752153cf04bd48835dd50c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkedStart</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a3bc557223ef2af001c022580f9c8e18c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>limitedStart</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ab2a0b7b42728a941e49dde2b22051910</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ae880685084df985ac030788c8d4537ae</anchor>
      <arglist>(Node s, int num)</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LengthMap::Value</type>
      <name>Value</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a6f677ff45d75aa12b23a873c02b37256</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LengthMap</type>
      <name>LengthMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ac1094a242a4e9be216f0623b0a7381c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>adc9638061e7acac70160feb0ea49c29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::DistMap</type>
      <name>DistMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ad6d9c2819f215994ded26fbe42e2fd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PredMapPath&lt; Digraph, PredMap &gt;</type>
      <name>Path</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a4d7ae5a0651af9c9cfadd1462718979d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::OperationTraits</type>
      <name>OperationTraits</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>afda95bfb086e37f03cb0be4ba8725f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetDistMapTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BellmanFord</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a3c6b227a4a6d76c8c5960ab4d713c1d7</anchor>
      <arglist>(const Digraph &amp;g, const LengthMap &amp;length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BellmanFord</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>aa08834fed4ff14ac7d8a10391f0f82f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BellmanFord &amp;</type>
      <name>lengthMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a01e0b5327109e861429c3c9971b3ba3e</anchor>
      <arglist>(const LengthMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BellmanFord &amp;</type>
      <name>predMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>aa5db6c51d541df4b4b20f43f501ac11b</anchor>
      <arglist>(PredMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BellmanFord &amp;</type>
      <name>distMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a7d28eb0ac8edbafbad854997781038a3</anchor>
      <arglist>(DistMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dist</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a7c008a8c450fc4f6cefcd9e764abe6fd</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>lemon::Path&lt; Digraph &gt;</type>
      <name>negativeCycle</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a6481981abf537af3297161a6b11abb0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a1908307057e2129bc3ac13f30beab5ec</anchor>
      <arglist>(const Value value=OperationTraits::infinity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>af16b57c30311aa0ad8595c05149ccd36</anchor>
      <arglist>(Node source, Value dst=OperationTraits::zero())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processNextRound</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>acbe7e43e0e9317a5a7a915be97e2b71a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processNextWeakRound</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a40e71e9190752153cf04bd48835dd50c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkedStart</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a3bc557223ef2af001c022580f9c8e18c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>limitedStart</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ab2a0b7b42728a941e49dde2b22051910</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ae880685084df985ac030788c8d4537ae</anchor>
      <arglist>(Node s, int num)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BellmanFord&lt; Digraph, LengthMap, SetOperationTraitsTraits&lt; T &gt; &gt;</name>
    <filename>a01657.html</filename>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dist</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a7c008a8c450fc4f6cefcd9e764abe6fd</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>lemon::Path&lt; Digraph &gt;</type>
      <name>negativeCycle</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a6481981abf537af3297161a6b11abb0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a1908307057e2129bc3ac13f30beab5ec</anchor>
      <arglist>(const Value value=OperationTraits::infinity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>af16b57c30311aa0ad8595c05149ccd36</anchor>
      <arglist>(Node source, Value dst=OperationTraits::zero())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processNextRound</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>acbe7e43e0e9317a5a7a915be97e2b71a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processNextWeakRound</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a40e71e9190752153cf04bd48835dd50c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkedStart</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a3bc557223ef2af001c022580f9c8e18c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>limitedStart</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ab2a0b7b42728a941e49dde2b22051910</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ae880685084df985ac030788c8d4537ae</anchor>
      <arglist>(Node s, int num)</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LengthMap::Value</type>
      <name>Value</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a6f677ff45d75aa12b23a873c02b37256</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LengthMap</type>
      <name>LengthMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ac1094a242a4e9be216f0623b0a7381c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>adc9638061e7acac70160feb0ea49c29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::DistMap</type>
      <name>DistMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ad6d9c2819f215994ded26fbe42e2fd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PredMapPath&lt; Digraph, PredMap &gt;</type>
      <name>Path</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a4d7ae5a0651af9c9cfadd1462718979d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::OperationTraits</type>
      <name>OperationTraits</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>afda95bfb086e37f03cb0be4ba8725f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetOperationTraitsTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BellmanFord</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a3c6b227a4a6d76c8c5960ab4d713c1d7</anchor>
      <arglist>(const Digraph &amp;g, const LengthMap &amp;length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BellmanFord</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>aa08834fed4ff14ac7d8a10391f0f82f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BellmanFord &amp;</type>
      <name>lengthMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a01e0b5327109e861429c3c9971b3ba3e</anchor>
      <arglist>(const LengthMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BellmanFord &amp;</type>
      <name>predMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>aa5db6c51d541df4b4b20f43f501ac11b</anchor>
      <arglist>(PredMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BellmanFord &amp;</type>
      <name>distMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a7d28eb0ac8edbafbad854997781038a3</anchor>
      <arglist>(DistMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dist</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a7c008a8c450fc4f6cefcd9e764abe6fd</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>lemon::Path&lt; Digraph &gt;</type>
      <name>negativeCycle</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a6481981abf537af3297161a6b11abb0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a1908307057e2129bc3ac13f30beab5ec</anchor>
      <arglist>(const Value value=OperationTraits::infinity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>af16b57c30311aa0ad8595c05149ccd36</anchor>
      <arglist>(Node source, Value dst=OperationTraits::zero())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processNextRound</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>acbe7e43e0e9317a5a7a915be97e2b71a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processNextWeakRound</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a40e71e9190752153cf04bd48835dd50c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkedStart</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a3bc557223ef2af001c022580f9c8e18c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>limitedStart</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ab2a0b7b42728a941e49dde2b22051910</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ae880685084df985ac030788c8d4537ae</anchor>
      <arglist>(Node s, int num)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BellmanFord&lt; Digraph, LengthMap, SetPredMapTraits&lt; T &gt; &gt;</name>
    <filename>a01657.html</filename>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dist</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a7c008a8c450fc4f6cefcd9e764abe6fd</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>lemon::Path&lt; Digraph &gt;</type>
      <name>negativeCycle</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a6481981abf537af3297161a6b11abb0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a1908307057e2129bc3ac13f30beab5ec</anchor>
      <arglist>(const Value value=OperationTraits::infinity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>af16b57c30311aa0ad8595c05149ccd36</anchor>
      <arglist>(Node source, Value dst=OperationTraits::zero())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processNextRound</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>acbe7e43e0e9317a5a7a915be97e2b71a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processNextWeakRound</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a40e71e9190752153cf04bd48835dd50c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkedStart</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a3bc557223ef2af001c022580f9c8e18c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>limitedStart</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ab2a0b7b42728a941e49dde2b22051910</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ae880685084df985ac030788c8d4537ae</anchor>
      <arglist>(Node s, int num)</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LengthMap::Value</type>
      <name>Value</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a6f677ff45d75aa12b23a873c02b37256</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LengthMap</type>
      <name>LengthMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ac1094a242a4e9be216f0623b0a7381c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>adc9638061e7acac70160feb0ea49c29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::DistMap</type>
      <name>DistMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ad6d9c2819f215994ded26fbe42e2fd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PredMapPath&lt; Digraph, PredMap &gt;</type>
      <name>Path</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a4d7ae5a0651af9c9cfadd1462718979d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::OperationTraits</type>
      <name>OperationTraits</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>afda95bfb086e37f03cb0be4ba8725f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetPredMapTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BellmanFord</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a3c6b227a4a6d76c8c5960ab4d713c1d7</anchor>
      <arglist>(const Digraph &amp;g, const LengthMap &amp;length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BellmanFord</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>aa08834fed4ff14ac7d8a10391f0f82f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BellmanFord &amp;</type>
      <name>lengthMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a01e0b5327109e861429c3c9971b3ba3e</anchor>
      <arglist>(const LengthMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BellmanFord &amp;</type>
      <name>predMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>aa5db6c51d541df4b4b20f43f501ac11b</anchor>
      <arglist>(PredMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BellmanFord &amp;</type>
      <name>distMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a7d28eb0ac8edbafbad854997781038a3</anchor>
      <arglist>(DistMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dist</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a7c008a8c450fc4f6cefcd9e764abe6fd</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>lemon::Path&lt; Digraph &gt;</type>
      <name>negativeCycle</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a6481981abf537af3297161a6b11abb0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a1908307057e2129bc3ac13f30beab5ec</anchor>
      <arglist>(const Value value=OperationTraits::infinity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>af16b57c30311aa0ad8595c05149ccd36</anchor>
      <arglist>(Node source, Value dst=OperationTraits::zero())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processNextRound</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>acbe7e43e0e9317a5a7a915be97e2b71a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processNextWeakRound</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a40e71e9190752153cf04bd48835dd50c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkedStart</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a3bc557223ef2af001c022580f9c8e18c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>limitedStart</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ab2a0b7b42728a941e49dde2b22051910</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>ae880685084df985ac030788c8d4537ae</anchor>
      <arglist>(Node s, int num)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::BellmanFordDefaultOperationTraits</name>
    <filename>a01645.html</filename>
    <templarg></templarg>
    <templarg>has_inf</templarg>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a01645.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Value</type>
      <name>zero</name>
      <anchorfile>a01645.html</anchorfile>
      <anchor>af24efe5c6b0edcb586538222fb5b1024</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Value</type>
      <name>infinity</name>
      <anchorfile>a01645.html</anchorfile>
      <anchor>a487765dbdbd563fc3caa194604d15ff3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Value</type>
      <name>plus</name>
      <anchorfile>a01645.html</anchorfile>
      <anchor>acce469a9728bdb4c09c015dc31a3eb3c</anchor>
      <arglist>(const Value &amp;left, const Value &amp;right)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>less</name>
      <anchorfile>a01645.html</anchorfile>
      <anchor>ac142bbf30883f244af50aefbf661bd6a</anchor>
      <arglist>(const Value &amp;left, const Value &amp;right)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::BellmanFordDefaultTraits</name>
    <filename>a01653.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a01653.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LEN</type>
      <name>LengthMap</name>
      <anchorfile>a01653.html</anchorfile>
      <anchor>a7398ca1da160bb30ee090866bbfc12ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LEN::Value</type>
      <name>Value</name>
      <anchorfile>a01653.html</anchorfile>
      <anchor>ac2ac7ac2928b4cfeafdc493dd44f61c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BellmanFordDefaultOperationTraits&lt; Value &gt;</type>
      <name>OperationTraits</name>
      <anchorfile>a01653.html</anchorfile>
      <anchor>a09df2d7b4ed4cfbbc6431921d8f6a88d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GR::template NodeMap&lt; typename GR::Arc &gt;</type>
      <name>PredMap</name>
      <anchorfile>a01653.html</anchorfile>
      <anchor>a8176d7b91f93809e5b43676eecb9d0f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GR::template NodeMap&lt; typename LEN::Value &gt;</type>
      <name>DistMap</name>
      <anchorfile>a01653.html</anchorfile>
      <anchor>a4f599bfd20251ee3839115448bec4f8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PredMap *</type>
      <name>createPredMap</name>
      <anchorfile>a01653.html</anchorfile>
      <anchor>a4cbffce5c2582d9f80a3c53852cc8c1e</anchor>
      <arglist>(const GR &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DistMap *</type>
      <name>createDistMap</name>
      <anchorfile>a01653.html</anchorfile>
      <anchor>af897611d52b68e40c140c4838dc14362</anchor>
      <arglist>(const GR &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::BellmanFordWizard</name>
    <filename>a01697.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BellmanFordWizard</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>abc75367ac6b5ff701f2ae9d71893719a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BellmanFordWizard</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>a1c8b789af80f3b7934889b99238a8989</anchor>
      <arglist>(const Digraph &amp;gr, const LengthMap &amp;len)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BellmanFordWizard</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>ab489713251eaf86202f47b0ece0dc544</anchor>
      <arglist>(const TR &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>BellmanFordWizard&lt; SetPredMapBase&lt; T &gt; &gt;</type>
      <name>predMap</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>a229d34ab5a905141ba90af0034d952fa</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>BellmanFordWizard&lt; SetDistMapBase&lt; T &gt; &gt;</type>
      <name>distMap</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>a3c1017941d8af18faaa186c3224ba43a</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>BellmanFordWizard&lt; SetPathBase&lt; T &gt; &gt;</type>
      <name>path</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>a580048172bf19d73192833e6dc5008b8</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>BellmanFordWizard</type>
      <name>dist</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>a35e5917e19460b86655a904e61980a01</anchor>
      <arglist>(const Value &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::BellmanFordWizardBase</name>
    <filename>a01693.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>lemon::BellmanFordWizardDefaultTraits</base>
    <member kind="function">
      <type></type>
      <name>BellmanFordWizardBase</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a39492ea142c97439267800754c6fbc27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BellmanFordWizardBase</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a88ae24e2d767a1d91bba0d4a48351590</anchor>
      <arglist>(const GR &amp;gr, const LEN &amp;len)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::BellmanFordWizardDefaultTraits</name>
    <filename>a01689.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LEN</type>
      <name>LengthMap</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a7398ca1da160bb30ee090866bbfc12ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LEN::Value</type>
      <name>Value</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>ac2ac7ac2928b4cfeafdc493dd44f61c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BellmanFordDefaultOperationTraits&lt; Value &gt;</type>
      <name>OperationTraits</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a09df2d7b4ed4cfbbc6431921d8f6a88d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GR::template NodeMap&lt; typename GR::Arc &gt;</type>
      <name>PredMap</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a8176d7b91f93809e5b43676eecb9d0f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GR::template NodeMap&lt; Value &gt;</type>
      <name>DistMap</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>af31fa1b50fa8782aafbc4da100c12f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lemon::Path&lt; Digraph &gt;</type>
      <name>Path</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a6989b0a22a99c251a2e7c99cf36605ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PredMap *</type>
      <name>createPredMap</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a4cbffce5c2582d9f80a3c53852cc8c1e</anchor>
      <arglist>(const GR &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DistMap *</type>
      <name>createDistMap</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>af897611d52b68e40c140c4838dc14362</anchor>
      <arglist>(const GR &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::Bfs</name>
    <filename>a01717.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a8f85441d2cf615f40794ac052db5cb18</anchor>
      <arglist>(Node target, bool &amp;reach)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>aaa1f6562157e06f1807253d8e8fa08c2</anchor>
      <arglist>(const NM &amp;nm, Node &amp;rnode)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dist</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>afbc3a17afda5db46b3c0821d0aed3a21</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <class kind="struct">lemon::Bfs::SetDistMap</class>
    <class kind="struct">lemon::Bfs::SetPredMap</class>
    <class kind="struct">lemon::Bfs::SetProcessedMap</class>
    <class kind="struct">lemon::Bfs::SetReachedMap</class>
    <class kind="struct">lemon::Bfs::SetStandardProcessedMap</class>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>adc9638061e7acac70160feb0ea49c29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::DistMap</type>
      <name>DistMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ad6d9c2819f215994ded26fbe42e2fd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ReachedMap</type>
      <name>ReachedMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>af23453a839e62b3dcc311e0a839e31ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a43e332c55acc2c5cb99d35ff40accab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PredMapPath&lt; Digraph, PredMap &gt;</type>
      <name>Path</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a4d7ae5a0651af9c9cfadd1462718979d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR</type>
      <name>Traits</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Bfs</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a55f525c9a3cc7a3ecb17c51873ba1d14</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Bfs</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a067322e85a116d7670a30085cbff7b25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Bfs &amp;</type>
      <name>predMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ac22804dedcadfd64208f659d6bd89545</anchor>
      <arglist>(PredMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Bfs &amp;</type>
      <name>reachedMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ad1dce733ba42cd5b68c9713af742d0a6</anchor>
      <arglist>(ReachedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Bfs &amp;</type>
      <name>processedMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a5d0c6be2ef05e6121193b38146492956</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Bfs &amp;</type>
      <name>distMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a3051385a839729dc0c5418be2fa1f085</anchor>
      <arglist>(DistMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a8f85441d2cf615f40794ac052db5cb18</anchor>
      <arglist>(Node target, bool &amp;reach)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>aaa1f6562157e06f1807253d8e8fa08c2</anchor>
      <arglist>(const NM &amp;nm, Node &amp;rnode)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dist</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>afbc3a17afda5db46b3c0821d0aed3a21</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Bfs&lt; Digraph, SetDistMapTraits&lt; T &gt; &gt;</name>
    <filename>a01717.html</filename>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dist</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>afbc3a17afda5db46b3c0821d0aed3a21</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a8f85441d2cf615f40794ac052db5cb18</anchor>
      <arglist>(Node target, bool &amp;reach)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>aaa1f6562157e06f1807253d8e8fa08c2</anchor>
      <arglist>(const NM &amp;nm, Node &amp;rnode)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>adc9638061e7acac70160feb0ea49c29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::DistMap</type>
      <name>DistMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ad6d9c2819f215994ded26fbe42e2fd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ReachedMap</type>
      <name>ReachedMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>af23453a839e62b3dcc311e0a839e31ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a43e332c55acc2c5cb99d35ff40accab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PredMapPath&lt; Digraph, PredMap &gt;</type>
      <name>Path</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a4d7ae5a0651af9c9cfadd1462718979d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetDistMapTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Bfs</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a55f525c9a3cc7a3ecb17c51873ba1d14</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Bfs</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a067322e85a116d7670a30085cbff7b25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Bfs &amp;</type>
      <name>predMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ac22804dedcadfd64208f659d6bd89545</anchor>
      <arglist>(PredMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Bfs &amp;</type>
      <name>reachedMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ad1dce733ba42cd5b68c9713af742d0a6</anchor>
      <arglist>(ReachedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Bfs &amp;</type>
      <name>processedMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a5d0c6be2ef05e6121193b38146492956</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Bfs &amp;</type>
      <name>distMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a3051385a839729dc0c5418be2fa1f085</anchor>
      <arglist>(DistMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dist</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>afbc3a17afda5db46b3c0821d0aed3a21</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a8f85441d2cf615f40794ac052db5cb18</anchor>
      <arglist>(Node target, bool &amp;reach)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>aaa1f6562157e06f1807253d8e8fa08c2</anchor>
      <arglist>(const NM &amp;nm, Node &amp;rnode)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Bfs&lt; Digraph, SetPredMapTraits&lt; T &gt; &gt;</name>
    <filename>a01717.html</filename>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dist</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>afbc3a17afda5db46b3c0821d0aed3a21</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a8f85441d2cf615f40794ac052db5cb18</anchor>
      <arglist>(Node target, bool &amp;reach)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>aaa1f6562157e06f1807253d8e8fa08c2</anchor>
      <arglist>(const NM &amp;nm, Node &amp;rnode)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>adc9638061e7acac70160feb0ea49c29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::DistMap</type>
      <name>DistMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ad6d9c2819f215994ded26fbe42e2fd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ReachedMap</type>
      <name>ReachedMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>af23453a839e62b3dcc311e0a839e31ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a43e332c55acc2c5cb99d35ff40accab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PredMapPath&lt; Digraph, PredMap &gt;</type>
      <name>Path</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a4d7ae5a0651af9c9cfadd1462718979d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetPredMapTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Bfs</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a55f525c9a3cc7a3ecb17c51873ba1d14</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Bfs</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a067322e85a116d7670a30085cbff7b25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Bfs &amp;</type>
      <name>predMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ac22804dedcadfd64208f659d6bd89545</anchor>
      <arglist>(PredMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Bfs &amp;</type>
      <name>reachedMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ad1dce733ba42cd5b68c9713af742d0a6</anchor>
      <arglist>(ReachedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Bfs &amp;</type>
      <name>processedMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a5d0c6be2ef05e6121193b38146492956</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Bfs &amp;</type>
      <name>distMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a3051385a839729dc0c5418be2fa1f085</anchor>
      <arglist>(DistMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dist</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>afbc3a17afda5db46b3c0821d0aed3a21</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a8f85441d2cf615f40794ac052db5cb18</anchor>
      <arglist>(Node target, bool &amp;reach)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>aaa1f6562157e06f1807253d8e8fa08c2</anchor>
      <arglist>(const NM &amp;nm, Node &amp;rnode)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Bfs&lt; Digraph, SetProcessedMapTraits&lt; T &gt; &gt;</name>
    <filename>a01717.html</filename>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dist</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>afbc3a17afda5db46b3c0821d0aed3a21</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a8f85441d2cf615f40794ac052db5cb18</anchor>
      <arglist>(Node target, bool &amp;reach)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>aaa1f6562157e06f1807253d8e8fa08c2</anchor>
      <arglist>(const NM &amp;nm, Node &amp;rnode)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>adc9638061e7acac70160feb0ea49c29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::DistMap</type>
      <name>DistMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ad6d9c2819f215994ded26fbe42e2fd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ReachedMap</type>
      <name>ReachedMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>af23453a839e62b3dcc311e0a839e31ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a43e332c55acc2c5cb99d35ff40accab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PredMapPath&lt; Digraph, PredMap &gt;</type>
      <name>Path</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a4d7ae5a0651af9c9cfadd1462718979d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetProcessedMapTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Bfs</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a55f525c9a3cc7a3ecb17c51873ba1d14</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Bfs</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a067322e85a116d7670a30085cbff7b25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Bfs &amp;</type>
      <name>predMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ac22804dedcadfd64208f659d6bd89545</anchor>
      <arglist>(PredMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Bfs &amp;</type>
      <name>reachedMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ad1dce733ba42cd5b68c9713af742d0a6</anchor>
      <arglist>(ReachedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Bfs &amp;</type>
      <name>processedMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a5d0c6be2ef05e6121193b38146492956</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Bfs &amp;</type>
      <name>distMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a3051385a839729dc0c5418be2fa1f085</anchor>
      <arglist>(DistMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dist</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>afbc3a17afda5db46b3c0821d0aed3a21</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a8f85441d2cf615f40794ac052db5cb18</anchor>
      <arglist>(Node target, bool &amp;reach)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>aaa1f6562157e06f1807253d8e8fa08c2</anchor>
      <arglist>(const NM &amp;nm, Node &amp;rnode)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Bfs&lt; Digraph, SetReachedMapTraits&lt; T &gt; &gt;</name>
    <filename>a01717.html</filename>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dist</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>afbc3a17afda5db46b3c0821d0aed3a21</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a8f85441d2cf615f40794ac052db5cb18</anchor>
      <arglist>(Node target, bool &amp;reach)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>aaa1f6562157e06f1807253d8e8fa08c2</anchor>
      <arglist>(const NM &amp;nm, Node &amp;rnode)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>adc9638061e7acac70160feb0ea49c29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::DistMap</type>
      <name>DistMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ad6d9c2819f215994ded26fbe42e2fd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ReachedMap</type>
      <name>ReachedMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>af23453a839e62b3dcc311e0a839e31ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a43e332c55acc2c5cb99d35ff40accab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PredMapPath&lt; Digraph, PredMap &gt;</type>
      <name>Path</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a4d7ae5a0651af9c9cfadd1462718979d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetReachedMapTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Bfs</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a55f525c9a3cc7a3ecb17c51873ba1d14</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Bfs</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a067322e85a116d7670a30085cbff7b25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Bfs &amp;</type>
      <name>predMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ac22804dedcadfd64208f659d6bd89545</anchor>
      <arglist>(PredMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Bfs &amp;</type>
      <name>reachedMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ad1dce733ba42cd5b68c9713af742d0a6</anchor>
      <arglist>(ReachedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Bfs &amp;</type>
      <name>processedMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a5d0c6be2ef05e6121193b38146492956</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Bfs &amp;</type>
      <name>distMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a3051385a839729dc0c5418be2fa1f085</anchor>
      <arglist>(DistMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dist</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>afbc3a17afda5db46b3c0821d0aed3a21</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a8f85441d2cf615f40794ac052db5cb18</anchor>
      <arglist>(Node target, bool &amp;reach)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>aaa1f6562157e06f1807253d8e8fa08c2</anchor>
      <arglist>(const NM &amp;nm, Node &amp;rnode)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Bfs&lt; Digraph, SetStandardProcessedMapTraits &gt;</name>
    <filename>a01717.html</filename>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dist</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>afbc3a17afda5db46b3c0821d0aed3a21</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a8f85441d2cf615f40794ac052db5cb18</anchor>
      <arglist>(Node target, bool &amp;reach)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>aaa1f6562157e06f1807253d8e8fa08c2</anchor>
      <arglist>(const NM &amp;nm, Node &amp;rnode)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>adc9638061e7acac70160feb0ea49c29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::DistMap</type>
      <name>DistMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ad6d9c2819f215994ded26fbe42e2fd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ReachedMap</type>
      <name>ReachedMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>af23453a839e62b3dcc311e0a839e31ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a43e332c55acc2c5cb99d35ff40accab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PredMapPath&lt; Digraph, PredMap &gt;</type>
      <name>Path</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a4d7ae5a0651af9c9cfadd1462718979d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetStandardProcessedMapTraits</type>
      <name>Traits</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Bfs</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a55f525c9a3cc7a3ecb17c51873ba1d14</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Bfs</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a067322e85a116d7670a30085cbff7b25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Bfs &amp;</type>
      <name>predMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ac22804dedcadfd64208f659d6bd89545</anchor>
      <arglist>(PredMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Bfs &amp;</type>
      <name>reachedMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ad1dce733ba42cd5b68c9713af742d0a6</anchor>
      <arglist>(ReachedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Bfs &amp;</type>
      <name>processedMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a5d0c6be2ef05e6121193b38146492956</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Bfs &amp;</type>
      <name>distMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a3051385a839729dc0c5418be2fa1f085</anchor>
      <arglist>(DistMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dist</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>afbc3a17afda5db46b3c0821d0aed3a21</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a8f85441d2cf615f40794ac052db5cb18</anchor>
      <arglist>(Node target, bool &amp;reach)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>aaa1f6562157e06f1807253d8e8fa08c2</anchor>
      <arglist>(const NM &amp;nm, Node &amp;rnode)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::BfsDefaultTraits</name>
    <filename>a01713.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a01713.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::template NodeMap&lt; typename Digraph::Arc &gt;</type>
      <name>PredMap</name>
      <anchorfile>a01713.html</anchorfile>
      <anchor>a2f311e3024ce1a50c00ffc291bce8e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NullMap&lt; typename Digraph::Node, bool &gt;</type>
      <name>ProcessedMap</name>
      <anchorfile>a01713.html</anchorfile>
      <anchor>ab4c841b7d3ecb344be7b85370b908920</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::template NodeMap&lt; bool &gt;</type>
      <name>ReachedMap</name>
      <anchorfile>a01713.html</anchorfile>
      <anchor>affb032b5578e24579000f9899512ae60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::template NodeMap&lt; int &gt;</type>
      <name>DistMap</name>
      <anchorfile>a01713.html</anchorfile>
      <anchor>ae1b02f76f4c6728d9c92da415fe15f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PredMap *</type>
      <name>createPredMap</name>
      <anchorfile>a01713.html</anchorfile>
      <anchor>a1d05c10ba44d3b5104c17e8181912d2c</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProcessedMap *</type>
      <name>createProcessedMap</name>
      <anchorfile>a01713.html</anchorfile>
      <anchor>aef8f11ee548ae3b61e7c2a0018455569</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReachedMap *</type>
      <name>createReachedMap</name>
      <anchorfile>a01713.html</anchorfile>
      <anchor>a1c6c24dc0cfde917210decb6f31be54c</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DistMap *</type>
      <name>createDistMap</name>
      <anchorfile>a01713.html</anchorfile>
      <anchor>ac24cfd641a704fa02ebd5d2403125c66</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::BfsVisit</name>
    <filename>a01801.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a8f85441d2cf615f40794ac052db5cb18</anchor>
      <arglist>(Node target, bool &amp;reach)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>aaa1f6562157e06f1807253d8e8fa08c2</anchor>
      <arglist>(const NM &amp;nm, Node &amp;rnode)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a88d45ba85d8c33207fa0654c17ab2006</anchor>
      <arglist>(const NM &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <class kind="struct">lemon::BfsVisit::SetReachedMap</class>
    <member kind="typedef">
      <type>TR</type>
      <name>Traits</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>aa6928feef02be4f2a184775d19dc6373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VS</type>
      <name>Visitor</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a3bece3b7c0b0189b735a408e533f3d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::ReachedMap</type>
      <name>ReachedMap</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a90221be1b9274785db2188548354d2aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BfsVisit</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>ae27c446704010b785a05379a1e02811e</anchor>
      <arglist>(const Digraph &amp;digraph, Visitor &amp;visitor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BfsVisit</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a8bf7b105577e2894778cc63cbec43a24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BfsVisit &amp;</type>
      <name>reachedMap</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a51540af2212fa8760166385adbaa9f34</anchor>
      <arglist>(ReachedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a8f85441d2cf615f40794ac052db5cb18</anchor>
      <arglist>(Node target, bool &amp;reach)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>aaa1f6562157e06f1807253d8e8fa08c2</anchor>
      <arglist>(const NM &amp;nm, Node &amp;rnode)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a88d45ba85d8c33207fa0654c17ab2006</anchor>
      <arglist>(const NM &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BfsVisit&lt; Digraph, Visitor, SetReachedMapTraits&lt; T &gt; &gt;</name>
    <filename>a01801.html</filename>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a8f85441d2cf615f40794ac052db5cb18</anchor>
      <arglist>(Node target, bool &amp;reach)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>aaa1f6562157e06f1807253d8e8fa08c2</anchor>
      <arglist>(const NM &amp;nm, Node &amp;rnode)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a88d45ba85d8c33207fa0654c17ab2006</anchor>
      <arglist>(const NM &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="typedef">
      <type>SetReachedMapTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>aa6928feef02be4f2a184775d19dc6373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Visitor</type>
      <name>Visitor</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a3bece3b7c0b0189b735a408e533f3d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::ReachedMap</type>
      <name>ReachedMap</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a90221be1b9274785db2188548354d2aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BfsVisit</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>ae27c446704010b785a05379a1e02811e</anchor>
      <arglist>(const Digraph &amp;digraph, Visitor &amp;visitor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BfsVisit</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a8bf7b105577e2894778cc63cbec43a24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BfsVisit &amp;</type>
      <name>reachedMap</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a51540af2212fa8760166385adbaa9f34</anchor>
      <arglist>(ReachedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a8f85441d2cf615f40794ac052db5cb18</anchor>
      <arglist>(Node target, bool &amp;reach)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>aaa1f6562157e06f1807253d8e8fa08c2</anchor>
      <arglist>(const NM &amp;nm, Node &amp;rnode)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a88d45ba85d8c33207fa0654c17ab2006</anchor>
      <arglist>(const NM &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::BfsVisitDefaultTraits</name>
    <filename>a01797.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a01797.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::template NodeMap&lt; bool &gt;</type>
      <name>ReachedMap</name>
      <anchorfile>a01797.html</anchorfile>
      <anchor>affb032b5578e24579000f9899512ae60</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReachedMap *</type>
      <name>createReachedMap</name>
      <anchorfile>a01797.html</anchorfile>
      <anchor>a1491e8ada6a6d5fdd321e3fee43844e1</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::BfsVisitor</name>
    <filename>a01793.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>af763d0c0856194421ebd6ccc73b921c3</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reach</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>a4f6dc7007e25f1c20b4fbb8912a83817</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>process</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>aa2d367c34d01e4e014e461f40b2f7203</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>discover</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>abe70d6cbc4419667e6aa533fc0fa262f</anchor>
      <arglist>(const Arc &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>a3656d1f80036aee1dcaa927450b70c2a</anchor>
      <arglist>(const Arc &amp;arc)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BfsVisitor&lt; Digraph &gt;</name>
    <filename>a01793.html</filename>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>af763d0c0856194421ebd6ccc73b921c3</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reach</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>a4f6dc7007e25f1c20b4fbb8912a83817</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>process</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>aa2d367c34d01e4e014e461f40b2f7203</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>discover</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>abe70d6cbc4419667e6aa533fc0fa262f</anchor>
      <arglist>(const Arc &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>a3656d1f80036aee1dcaa927450b70c2a</anchor>
      <arglist>(const Arc &amp;arc)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::BfsWizard</name>
    <filename>a01769.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BfsWizard</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>ae8923bde3788f91e3b2bf9191c73bd39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BfsWizard</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>a59efab63f61b1c5e17b0c5b3b30c0afb</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BfsWizard</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>a759468eb61ca1b166698056c8a36f5fe</anchor>
      <arglist>(const TR &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BfsWizard&lt; SetPredMapBase&lt; T &gt; &gt;</type>
      <name>predMap</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>a12355865a83748eeb2b79906e5e5c885</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>BfsWizard&lt; SetReachedMapBase&lt; T &gt; &gt;</type>
      <name>reachedMap</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>ae0e8a3a6c9e36e78bdf7cdecaf316c69</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>BfsWizard&lt; SetDistMapBase&lt; T &gt; &gt;</type>
      <name>distMap</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>a8865be0ff557952805945f4dfc639c17</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>BfsWizard&lt; SetProcessedMapBase&lt; T &gt; &gt;</type>
      <name>processedMap</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>a0dd01920ffe44efe6ab0fefdf392688d</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>BfsWizard&lt; SetPathBase&lt; T &gt; &gt;</type>
      <name>path</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>a0bdd8c0d423d4048b8574d2e0430cbcc</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>BfsWizard</type>
      <name>dist</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>a1c2895f9c7861ca965fc4ec37c4b36e2</anchor>
      <arglist>(const int &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::BfsWizardBase</name>
    <filename>a01765.html</filename>
    <templarg></templarg>
    <base>lemon::BfsWizardDefaultTraits</base>
    <member kind="function">
      <type></type>
      <name>BfsWizardBase</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>aad43a7eb3f6d54e0d1cb37f29b8eb08b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BfsWizardBase</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>ad2360a2aeec62c51672a4dcd6615e7fb</anchor>
      <arglist>(const GR &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::BfsWizardDefaultTraits</name>
    <filename>a01761.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::template NodeMap&lt; typename Digraph::Arc &gt;</type>
      <name>PredMap</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a2f311e3024ce1a50c00ffc291bce8e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NullMap&lt; typename Digraph::Node, bool &gt;</type>
      <name>ProcessedMap</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ab4c841b7d3ecb344be7b85370b908920</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::template NodeMap&lt; bool &gt;</type>
      <name>ReachedMap</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>affb032b5578e24579000f9899512ae60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::template NodeMap&lt; int &gt;</type>
      <name>DistMap</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ae1b02f76f4c6728d9c92da415fe15f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lemon::Path&lt; Digraph &gt;</type>
      <name>Path</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a6989b0a22a99c251a2e7c99cf36605ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PredMap *</type>
      <name>createPredMap</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a1d05c10ba44d3b5104c17e8181912d2c</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProcessedMap *</type>
      <name>createProcessedMap</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>aef8f11ee548ae3b61e7c2a0018455569</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReachedMap *</type>
      <name>createReachedMap</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a1c6c24dc0cfde917210decb6f31be54c</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DistMap *</type>
      <name>createDistMap</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ac24cfd641a704fa02ebd5d2403125c66</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::BinHeap</name>
    <filename>a01813.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumeration">
      <type></type>
      <name>State</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_HEAP</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a213759402d071be3f66f8cf86641bb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRE_HEAP</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a12f201f9d13d106e81658dad7e7c9c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POST_HEAP</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8acd215e97251c1085a8b299c068e7172d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IM</type>
      <name>ItemIntMap</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ac00a2d6f039b6e8ffc0641530bdf5304</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PR</type>
      <name>Prio</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a644810a55913c9e8b24511758574d6d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ItemIntMap::Key</type>
      <name>Item</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a70025b32b600038ee2981a3deab1a783</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Item, Prio &gt;</type>
      <name>Pair</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a616fe456bc4c8eddf813c4f5665e1180</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CMP</type>
      <name>Compare</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a937d59343e7b08b620805162c2e52ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_HEAP</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a213759402d071be3f66f8cf86641bb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRE_HEAP</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a12f201f9d13d106e81658dad7e7c9c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POST_HEAP</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8acd215e97251c1085a8b299c068e7172d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinHeap</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>acf056081005598d56af81013dc122e3f</anchor>
      <arglist>(ItemIntMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinHeap</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ad37464eb1f70d05e41d8b2f99c3b7b54</anchor>
      <arglist>(ItemIntMap &amp;map, const Compare &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a644718bb2fb240de962dc3c9a1fdf0dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5b654214309b6f25fceeec04e2b1a016</anchor>
      <arglist>(const Pair &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ad34f576dafc84f8969e2fecd67cd3a15</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>top</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a3c68736e00411448ff7acf175015cc1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Prio</type>
      <name>prio</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>aa453ea5d0eb1b666a14a104659ae49dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a312e7f6c761a199c1369fbe651e084f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5fe7eab02681c7735ba173c879de1681</anchor>
      <arglist>(const Item &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>Prio</type>
      <name>operator[]</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ac85c63b4ab780fbfb4b986b60dd87481</anchor>
      <arglist>(const Item &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a35c06441ccfac0ed04762113a102e6b3</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrease</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a301fdc87288afdebf379ae043cf66cd4</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increase</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a958836bae38b188956bcf1345c63eac4</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>state</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a9e18a6f6555eb8d1bc8d37c951a440f6</anchor>
      <arglist>(const Item &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>state</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a7d0ca230d438efaad53833701d9cb262</anchor>
      <arglist>(const Item &amp;i, State st)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>aa3d169f66b376619ebb1825f6c027482</anchor>
      <arglist>(const Item &amp;i, const Item &amp;j)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinHeap&lt; Value, IntArcMap &gt;</name>
    <filename>a01813.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>State</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntArcMap</type>
      <name>ItemIntMap</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ac00a2d6f039b6e8ffc0641530bdf5304</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value</type>
      <name>Prio</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a644810a55913c9e8b24511758574d6d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ItemIntMap::Key</type>
      <name>Item</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a70025b32b600038ee2981a3deab1a783</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Item, Prio &gt;</type>
      <name>Pair</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a616fe456bc4c8eddf813c4f5665e1180</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CMP</type>
      <name>Compare</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a937d59343e7b08b620805162c2e52ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_HEAP</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a213759402d071be3f66f8cf86641bb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRE_HEAP</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a12f201f9d13d106e81658dad7e7c9c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POST_HEAP</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8acd215e97251c1085a8b299c068e7172d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinHeap</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>acf056081005598d56af81013dc122e3f</anchor>
      <arglist>(ItemIntMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinHeap</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ad37464eb1f70d05e41d8b2f99c3b7b54</anchor>
      <arglist>(ItemIntMap &amp;map, const Compare &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a644718bb2fb240de962dc3c9a1fdf0dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5b654214309b6f25fceeec04e2b1a016</anchor>
      <arglist>(const Pair &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ad34f576dafc84f8969e2fecd67cd3a15</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>top</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a3c68736e00411448ff7acf175015cc1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Prio</type>
      <name>prio</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>aa453ea5d0eb1b666a14a104659ae49dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a312e7f6c761a199c1369fbe651e084f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5fe7eab02681c7735ba173c879de1681</anchor>
      <arglist>(const Item &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>Prio</type>
      <name>operator[]</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ac85c63b4ab780fbfb4b986b60dd87481</anchor>
      <arglist>(const Item &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a35c06441ccfac0ed04762113a102e6b3</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrease</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a301fdc87288afdebf379ae043cf66cd4</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increase</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a958836bae38b188956bcf1345c63eac4</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>state</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a9e18a6f6555eb8d1bc8d37c951a440f6</anchor>
      <arglist>(const Item &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>state</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a7d0ca230d438efaad53833701d9cb262</anchor>
      <arglist>(const Item &amp;i, State st)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>aa3d169f66b376619ebb1825f6c027482</anchor>
      <arglist>(const Item &amp;i, const Item &amp;j)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinHeap&lt; Value, IntEdgeMap &gt;</name>
    <filename>a01813.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>State</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntEdgeMap</type>
      <name>ItemIntMap</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ac00a2d6f039b6e8ffc0641530bdf5304</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value</type>
      <name>Prio</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a644810a55913c9e8b24511758574d6d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ItemIntMap::Key</type>
      <name>Item</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a70025b32b600038ee2981a3deab1a783</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Item, Prio &gt;</type>
      <name>Pair</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a616fe456bc4c8eddf813c4f5665e1180</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CMP</type>
      <name>Compare</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a937d59343e7b08b620805162c2e52ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_HEAP</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a213759402d071be3f66f8cf86641bb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRE_HEAP</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a12f201f9d13d106e81658dad7e7c9c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POST_HEAP</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8acd215e97251c1085a8b299c068e7172d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinHeap</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>acf056081005598d56af81013dc122e3f</anchor>
      <arglist>(ItemIntMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinHeap</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ad37464eb1f70d05e41d8b2f99c3b7b54</anchor>
      <arglist>(ItemIntMap &amp;map, const Compare &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a644718bb2fb240de962dc3c9a1fdf0dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5b654214309b6f25fceeec04e2b1a016</anchor>
      <arglist>(const Pair &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ad34f576dafc84f8969e2fecd67cd3a15</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>top</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a3c68736e00411448ff7acf175015cc1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Prio</type>
      <name>prio</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>aa453ea5d0eb1b666a14a104659ae49dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a312e7f6c761a199c1369fbe651e084f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5fe7eab02681c7735ba173c879de1681</anchor>
      <arglist>(const Item &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>Prio</type>
      <name>operator[]</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ac85c63b4ab780fbfb4b986b60dd87481</anchor>
      <arglist>(const Item &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a35c06441ccfac0ed04762113a102e6b3</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrease</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a301fdc87288afdebf379ae043cf66cd4</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increase</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a958836bae38b188956bcf1345c63eac4</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>state</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a9e18a6f6555eb8d1bc8d37c951a440f6</anchor>
      <arglist>(const Item &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>state</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a7d0ca230d438efaad53833701d9cb262</anchor>
      <arglist>(const Item &amp;i, State st)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>aa3d169f66b376619ebb1825f6c027482</anchor>
      <arglist>(const Item &amp;i, const Item &amp;j)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinHeap&lt; Value, IntNodeMap &gt;</name>
    <filename>a01813.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>State</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntNodeMap</type>
      <name>ItemIntMap</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ac00a2d6f039b6e8ffc0641530bdf5304</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value</type>
      <name>Prio</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a644810a55913c9e8b24511758574d6d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ItemIntMap::Key</type>
      <name>Item</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a70025b32b600038ee2981a3deab1a783</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Item, Prio &gt;</type>
      <name>Pair</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a616fe456bc4c8eddf813c4f5665e1180</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CMP</type>
      <name>Compare</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a937d59343e7b08b620805162c2e52ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_HEAP</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a213759402d071be3f66f8cf86641bb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRE_HEAP</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a12f201f9d13d106e81658dad7e7c9c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POST_HEAP</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8acd215e97251c1085a8b299c068e7172d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinHeap</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>acf056081005598d56af81013dc122e3f</anchor>
      <arglist>(ItemIntMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinHeap</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ad37464eb1f70d05e41d8b2f99c3b7b54</anchor>
      <arglist>(ItemIntMap &amp;map, const Compare &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a644718bb2fb240de962dc3c9a1fdf0dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5b654214309b6f25fceeec04e2b1a016</anchor>
      <arglist>(const Pair &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ad34f576dafc84f8969e2fecd67cd3a15</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>top</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a3c68736e00411448ff7acf175015cc1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Prio</type>
      <name>prio</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>aa453ea5d0eb1b666a14a104659ae49dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a312e7f6c761a199c1369fbe651e084f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5fe7eab02681c7735ba173c879de1681</anchor>
      <arglist>(const Item &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>Prio</type>
      <name>operator[]</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ac85c63b4ab780fbfb4b986b60dd87481</anchor>
      <arglist>(const Item &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a35c06441ccfac0ed04762113a102e6b3</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrease</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a301fdc87288afdebf379ae043cf66cd4</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increase</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a958836bae38b188956bcf1345c63eac4</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>state</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a9e18a6f6555eb8d1bc8d37c951a440f6</anchor>
      <arglist>(const Item &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>state</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a7d0ca230d438efaad53833701d9cb262</anchor>
      <arglist>(const Item &amp;i, State st)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>aa3d169f66b376619ebb1825f6c027482</anchor>
      <arglist>(const Item &amp;i, const Item &amp;j)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinHeap&lt; Value, lemon::RangeMap &gt;</name>
    <filename>a01813.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>State</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lemon::RangeMap</type>
      <name>ItemIntMap</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ac00a2d6f039b6e8ffc0641530bdf5304</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value</type>
      <name>Prio</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a644810a55913c9e8b24511758574d6d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ItemIntMap::Key</type>
      <name>Item</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a70025b32b600038ee2981a3deab1a783</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Item, Prio &gt;</type>
      <name>Pair</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a616fe456bc4c8eddf813c4f5665e1180</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CMP</type>
      <name>Compare</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a937d59343e7b08b620805162c2e52ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_HEAP</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a213759402d071be3f66f8cf86641bb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRE_HEAP</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a12f201f9d13d106e81658dad7e7c9c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POST_HEAP</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8acd215e97251c1085a8b299c068e7172d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinHeap</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>acf056081005598d56af81013dc122e3f</anchor>
      <arglist>(ItemIntMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinHeap</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ad37464eb1f70d05e41d8b2f99c3b7b54</anchor>
      <arglist>(ItemIntMap &amp;map, const Compare &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a644718bb2fb240de962dc3c9a1fdf0dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5b654214309b6f25fceeec04e2b1a016</anchor>
      <arglist>(const Pair &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ad34f576dafc84f8969e2fecd67cd3a15</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>top</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a3c68736e00411448ff7acf175015cc1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Prio</type>
      <name>prio</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>aa453ea5d0eb1b666a14a104659ae49dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a312e7f6c761a199c1369fbe651e084f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5fe7eab02681c7735ba173c879de1681</anchor>
      <arglist>(const Item &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>Prio</type>
      <name>operator[]</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ac85c63b4ab780fbfb4b986b60dd87481</anchor>
      <arglist>(const Item &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a35c06441ccfac0ed04762113a102e6b3</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrease</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a301fdc87288afdebf379ae043cf66cd4</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increase</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a958836bae38b188956bcf1345c63eac4</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>state</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a9e18a6f6555eb8d1bc8d37c951a440f6</anchor>
      <arglist>(const Item &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>state</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a7d0ca230d438efaad53833701d9cb262</anchor>
      <arglist>(const Item &amp;i, State st)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>aa3d169f66b376619ebb1825f6c027482</anchor>
      <arglist>(const Item &amp;i, const Item &amp;j)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::BinomialHeap</name>
    <filename>a01817.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumeration">
      <type></type>
      <name>State</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_HEAP</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a213759402d071be3f66f8cf86641bb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRE_HEAP</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a12f201f9d13d106e81658dad7e7c9c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POST_HEAP</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8acd215e97251c1085a8b299c068e7172d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IM</type>
      <name>ItemIntMap</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>ac00a2d6f039b6e8ffc0641530bdf5304</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PR</type>
      <name>Prio</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a644810a55913c9e8b24511758574d6d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ItemIntMap::Key</type>
      <name>Item</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a70025b32b600038ee2981a3deab1a783</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CMP</type>
      <name>Compare</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a937d59343e7b08b620805162c2e52ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_HEAP</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a213759402d071be3f66f8cf86641bb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRE_HEAP</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a12f201f9d13d106e81658dad7e7c9c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POST_HEAP</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8acd215e97251c1085a8b299c068e7172d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinomialHeap</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a6c476fe3ee11480a57545c069b0c912d</anchor>
      <arglist>(ItemIntMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinomialHeap</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a081f9542eed0eb80c980f95e850e4d43</anchor>
      <arglist>(ItemIntMap &amp;map, const Compare &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a644718bb2fb240de962dc3c9a1fdf0dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a2afbafcc371d28f515a05b42d1c76ac2</anchor>
      <arglist>(const Item &amp;item, const Prio &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>ab2a94f4be01dadf3bd9248a3749f1c78</anchor>
      <arglist>(const Item &amp;item, const Prio &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>top</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a3c68736e00411448ff7acf175015cc1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Prio</type>
      <name>prio</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>aa453ea5d0eb1b666a14a104659ae49dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Prio &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a6646115656af82327c2b7e883071771d</anchor>
      <arglist>(const Item &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a312e7f6c761a199c1369fbe651e084f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>ab71f9a526f9dfa9ded1fdd78189c3e37</anchor>
      <arglist>(const Item &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrease</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a86c83bf851da9aa34fa47659abd2820b</anchor>
      <arglist>(Item item, const Prio &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increase</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>ac905557ff91bf880f50d6fff29ac9634</anchor>
      <arglist>(Item item, const Prio &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>state</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>ac849c1efcb5d7c12a1419f97d669f7cb</anchor>
      <arglist>(const Item &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>state</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a7d0ca230d438efaad53833701d9cb262</anchor>
      <arglist>(const Item &amp;i, State st)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::MaxWeightedMatching::BlossomIt</name>
    <filename>a03705.html</filename>
    <member kind="function">
      <type></type>
      <name>BlossomIt</name>
      <anchorfile>a03705.html</anchorfile>
      <anchor>a3dd505f88ec29604988016120d67394f</anchor>
      <arglist>(const MaxWeightedMatching &amp;algorithm, int variable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Node</name>
      <anchorfile>a03705.html</anchorfile>
      <anchor>a11d0699af4659b67aae9342df58bf004</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BlossomIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a03705.html</anchorfile>
      <anchor>aba2eb057ccea67a09607a0f92cdb0895</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a03705.html</anchorfile>
      <anchor>a8d6f49632ab9a9e02a777155052628c3</anchor>
      <arglist>(Invalid) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a03705.html</anchorfile>
      <anchor>a7f49ed3e47c513d4466fe349c188ad1c</anchor>
      <arglist>(Invalid) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::MaxWeightedPerfectMatching::BlossomIt</name>
    <filename>a03725.html</filename>
    <member kind="function">
      <type></type>
      <name>BlossomIt</name>
      <anchorfile>a03725.html</anchorfile>
      <anchor>a49d55c2465fffab373ffc96db71ca616</anchor>
      <arglist>(const MaxWeightedPerfectMatching &amp;algorithm, int variable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Node</name>
      <anchorfile>a03725.html</anchorfile>
      <anchor>a11d0699af4659b67aae9342df58bf004</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BlossomIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a03725.html</anchorfile>
      <anchor>aba2eb057ccea67a09607a0f92cdb0895</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a03725.html</anchorfile>
      <anchor>a8d6f49632ab9a9e02a777155052628c3</anchor>
      <arglist>(Invalid) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a03725.html</anchorfile>
      <anchor>a7f49ed3e47c513d4466fe349c188ad1c</anchor>
      <arglist>(Invalid) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::BpGraph::BlueNode</name>
    <filename>a05113.html</filename>
    <base>lemon::concepts::BpGraph::Node</base>
    <member kind="function">
      <type></type>
      <name>BlueNode</name>
      <anchorfile>a05113.html</anchorfile>
      <anchor>af672e8a1b0a2396e46a676eb62100aee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlueNode</name>
      <anchorfile>a05113.html</anchorfile>
      <anchor>a206d588dfc349b3a561df135a5c82cb2</anchor>
      <arglist>(const BlueNode &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlueNode</name>
      <anchorfile>a05113.html</anchorfile>
      <anchor>a8604bb8c42fcbfc6e9a5ee21fe71b86c</anchor>
      <arglist>(Invalid)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::BaseBpGraphComponent::BlueNode</name>
    <filename>a05313.html</filename>
    <base>lemon::concepts::GraphItem</base>
    <member kind="function">
      <type></type>
      <name>BlueNode</name>
      <anchorfile>a05313.html</anchorfile>
      <anchor>af672e8a1b0a2396e46a676eb62100aee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlueNode</name>
      <anchorfile>a05313.html</anchorfile>
      <anchor>a206d588dfc349b3a561df135a5c82cb2</anchor>
      <arglist>(const BlueNode &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlueNode</name>
      <anchorfile>a05313.html</anchorfile>
      <anchor>a8604bb8c42fcbfc6e9a5ee21fe71b86c</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlueNode</name>
      <anchorfile>a05313.html</anchorfile>
      <anchor>a9754fc4c9da1724899d10d2d250ab5c7</anchor>
      <arglist>(const Node &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::BpGraph::BlueNodeIt</name>
    <filename>a05121.html</filename>
    <base>lemon::concepts::BpGraph::BlueNode</base>
    <member kind="function">
      <type></type>
      <name>BlueNodeIt</name>
      <anchorfile>a05121.html</anchorfile>
      <anchor>abf4be331be35a4c725d3f76b825d9c8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlueNodeIt</name>
      <anchorfile>a05121.html</anchorfile>
      <anchor>a1a59cb77af6eab7fd1ccd00b0b5c59f9</anchor>
      <arglist>(const BlueNodeIt &amp;n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlueNodeIt</name>
      <anchorfile>a05121.html</anchorfile>
      <anchor>a5f21d1f425aadc4000b83c1033be2977</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlueNodeIt</name>
      <anchorfile>a05121.html</anchorfile>
      <anchor>a8b86c7f1a740ff78a0db0651d46964d2</anchor>
      <arglist>(const BpGraph &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlueNodeIt</name>
      <anchorfile>a05121.html</anchorfile>
      <anchor>acf03f37d6a9a1dc0983628984b6db569</anchor>
      <arglist>(const BpGraph &amp;, const BlueNode &amp;)</arglist>
    </member>
    <member kind="function">
      <type>BlueNodeIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a05121.html</anchorfile>
      <anchor>a11a3ed5b1dc579c5971bd7b303ea450b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::BpGraph::BlueNodeMap</name>
    <filename>a05165.html</filename>
    <templarg></templarg>
    <base>ReferenceMap&lt; Node, T, T &amp;, const T &amp; &gt;</base>
    <member kind="function">
      <type></type>
      <name>BlueNodeMap</name>
      <anchorfile>a05165.html</anchorfile>
      <anchor>a32f27170889c4276584833a9db216f6d</anchor>
      <arglist>(const BpGraph &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlueNodeMap</name>
      <anchorfile>a05165.html</anchorfile>
      <anchor>a1a1d7c5d35ba17441456330406b15121</anchor>
      <arglist>(const BpGraph &amp;, T)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BlueNodeMap</name>
      <anchorfile>a05165.html</anchorfile>
      <anchor>a1c24e416b59b94313ae14f24b031f6c7</anchor>
      <arglist>(const BlueNodeMap &amp;nm)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>BlueNodeMap &amp;</type>
      <name>operator=</name>
      <anchorfile>a05165.html</anchorfile>
      <anchor>aed23adc10ef7876bc1ca32618a1a1260</anchor>
      <arglist>(const CMap &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::MappableBpGraphComponent::BlueNodeMap</name>
    <filename>a05461.html</filename>
    <templarg></templarg>
    <base>GraphMap&lt; MappableBpGraphComponent, Node, V &gt;</base>
    <member kind="function">
      <type></type>
      <name>BlueNodeMap</name>
      <anchorfile>a05461.html</anchorfile>
      <anchor>ad19e757779c8e2ab31623b9ec482ae66</anchor>
      <arglist>(const MappableBpGraphComponent &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlueNodeMap</name>
      <anchorfile>a05461.html</anchorfile>
      <anchor>a6949af042ad4f7e439b78a4ae4ffcbb8</anchor>
      <arglist>(const MappableBpGraphComponent &amp;graph, const V &amp;value)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BlueNodeMap</name>
      <anchorfile>a05461.html</anchorfile>
      <anchor>a1c24e416b59b94313ae14f24b031f6c7</anchor>
      <arglist>(const BlueNodeMap &amp;nm)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>BlueNodeMap &amp;</type>
      <name>operator=</name>
      <anchorfile>a05461.html</anchorfile>
      <anchor>aed23adc10ef7876bc1ca32618a1a1260</anchor>
      <arglist>(const CMap &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::dim2::Box</name>
    <filename>a02401.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>adea1928c15ca1eb88b6619bc554911b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a29f3af2cc22fcfbd9974ca460192aca3</anchor>
      <arglist>(Point&lt; T &gt; a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a2cff8d3592817baa693975c17f90f271</anchor>
      <arglist>(Point&lt; T &gt; a, Point&lt; T &gt; b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a7a3358e8b1634d15a1c4cad13900b90c</anchor>
      <arglist>(T l, T b, T r, T t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a644718bb2fb240de962dc3c9a1fdf0dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>bottomLeft</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a4f2b1c5d2b829374843686e7c26ddb73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bottomLeft</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>ae35f29394ae0783f42032fac7f18b2aa</anchor>
      <arglist>(Point&lt; T &gt; p)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>topRight</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>acfed6aaa47929af1905f97714e2f3d9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>topRight</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a05f5ce4ee3e3faa2a62cf5f10316691a</anchor>
      <arglist>(Point&lt; T &gt; p)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>bottomRight</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a8147e2046930597688974a88d7d31668</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bottomRight</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a57339debce32855309ce6298d892a154</anchor>
      <arglist>(Point&lt; T &gt; p)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>topLeft</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>ae0445bb9d0644dc606e3d6fb14ffdb0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>topLeft</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>aa350b1414024d9e005d0dce6450bf83b</anchor>
      <arglist>(Point&lt; T &gt; p)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bottom</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a9dde386b6f4914b678bf6fb600bd4866</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bottom</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a2bf62d47c1595eb5a3f4787cb2fb55ab</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>top</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a73277775edbb2f941d706f6588946114</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>top</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a6a04460707328bc1639fcd9e2ce1a9de</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>left</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>ae7f5e9fa307a16d534bae705e0ea41ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>left</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a5f3b7939831ee6d17e2b881e5db9c741</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>right</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>adc16c2bb7006350409da7d30690bc772</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>right</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a83bf8f14a6687649ee8df9c6a4de2273</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>height</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a0f89bca39848c2dd338bb59a47452dba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a7f4553e88461c9deaf624f0af83b468c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inside</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a1639770ab4eb220856ff6e3627be83ea</anchor>
      <arglist>(const Point&lt; T &gt; &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>Box &amp;</type>
      <name>add</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>ae1b0a6f64ab6d14c3cea52b861daa6e4</anchor>
      <arglist>(const Point&lt; T &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>Box &amp;</type>
      <name>add</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a8ea76f3252630757a9fcd2e2dadbc499</anchor>
      <arglist>(const Box &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>Box</type>
      <name>operator&amp;</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>aab5fa464544672e259dc010f5f453dea</anchor>
      <arglist>(const Box &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>ga19c3bfbad77c6e998e017eadf75c2782</anchor>
      <arglist>(std::istream &amp;is, Box&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>gac52c35829fbea8c6f4f42e15ae3a16c1</anchor>
      <arglist>(std::ostream &amp;os, const Box&lt; T &gt; &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::BpGraph</name>
    <filename>a05101.html</filename>
    <class kind="class">lemon::concepts::BpGraph::Arc</class>
    <class kind="class">lemon::concepts::BpGraph::ArcIt</class>
    <class kind="class">lemon::concepts::BpGraph::ArcMap</class>
    <class kind="class">lemon::concepts::BpGraph::BlueNode</class>
    <class kind="class">lemon::concepts::BpGraph::BlueNodeIt</class>
    <class kind="class">lemon::concepts::BpGraph::BlueNodeMap</class>
    <class kind="class">lemon::concepts::BpGraph::Edge</class>
    <class kind="class">lemon::concepts::BpGraph::EdgeIt</class>
    <class kind="class">lemon::concepts::BpGraph::EdgeMap</class>
    <class kind="class">lemon::concepts::BpGraph::InArcIt</class>
    <class kind="class">lemon::concepts::BpGraph::IncEdgeIt</class>
    <class kind="class">lemon::concepts::BpGraph::Node</class>
    <class kind="class">lemon::concepts::BpGraph::NodeIt</class>
    <class kind="class">lemon::concepts::BpGraph::NodeMap</class>
    <class kind="class">lemon::concepts::BpGraph::OutArcIt</class>
    <class kind="class">lemon::concepts::BpGraph::RedNode</class>
    <class kind="class">lemon::concepts::BpGraph::RedNodeIt</class>
    <class kind="class">lemon::concepts::BpGraph::RedNodeMap</class>
    <member kind="typedef">
      <type>True</type>
      <name>UndirectedTag</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>aede403f4c863f2249a26de6a33fd47ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BpGraph</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a37153818affe207ef444aff491e572cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>red</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>aa3b5ad19f5f5c28cbad0f003618615c9</anchor>
      <arglist>(const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>blue</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a396e7845791e247c88aff4a2de131822</anchor>
      <arglist>(const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>RedNode</type>
      <name>asRedNodeUnsafe</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a3058478fec8120a41bd34ce72eb27631</anchor>
      <arglist>(const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>BlueNode</type>
      <name>asBlueNodeUnsafe</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a5eae21f9e2376ba7bde7fa9e28183c65</anchor>
      <arglist>(const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>RedNode</type>
      <name>asRedNode</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>afa6c2206200de5019918999c62882ff6</anchor>
      <arglist>(const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>BlueNode</type>
      <name>asBlueNode</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a6933a1952c08e83d8ef3834c575114b5</anchor>
      <arglist>(const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>RedNode</type>
      <name>redNode</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a3f8b2e0317e2d02f97ef291add6798f0</anchor>
      <arglist>(const Edge &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>BlueNode</type>
      <name>blueNode</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a32c381facc08531c78265f421b2637b9</anchor>
      <arglist>(const Edge &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>u</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>aaff253595b1ecf3e15fa29157f7614a9</anchor>
      <arglist>(Edge) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>v</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>afb439539201363cbba6b46c5cacc461c</anchor>
      <arglist>(Edge) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>source</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>ac9e85ffa6cef50642d14bc9d7f74118e</anchor>
      <arglist>(Arc) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>target</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>ad9deab53b077f969c9054767d4eee7bc</anchor>
      <arglist>(Arc) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a240c393e310b09179b74109a34832b58</anchor>
      <arglist>(Node) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a22e6585bb43ac2a454a010777f841add</anchor>
      <arglist>(RedNode) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a689d0769a90c9ddd3325ea0b1c1dab1c</anchor>
      <arglist>(BlueNode) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a5f82017f218cd48acafebe266ca31052</anchor>
      <arglist>(Edge) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>acba549328ff17e8e575761a43828713c</anchor>
      <arglist>(Arc) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nodeFromId</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a488cc53bcd9ed8678754bc1428680b92</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>Edge</type>
      <name>edgeFromId</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a67b3d9ab84d7920ff7adabaffb0aa648</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>arcFromId</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a6f1576e59fcda989af46733714ffb1a7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxNodeId</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a0e562aee6515586e90822ad0929d6742</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxRedId</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a7b1fdf426885bb24f64962bacfba4e0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxBlueId</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a1725b6e9d1848f04dc580a127e97b76d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxEdgeId</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a383c35dde7ea8d457fe879145585c550</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxArcId</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a40414a15ee291ba518da15d6996ab61d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>direction</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a3f4da685e191b989cb034a701aa70d19</anchor>
      <arglist>(Arc) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>direct</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a4f66ff9786677f090a66745cdb3cf630</anchor>
      <arglist>(Edge, bool) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>direct</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>aed3fa7ff5afe5270a4da05432bc15463</anchor>
      <arglist>(Edge, Node) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>oppositeArc</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>ac7ff65c85b654367c9e41571ccbb830f</anchor>
      <arglist>(Arc) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>oppositeNode</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a881246d96f8f757f23490c8c30016869</anchor>
      <arglist>(Node, Edge) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>baseNode</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a58e9568fc1817eab27698269ca154dd6</anchor>
      <arglist>(IncEdgeIt) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>runningNode</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a468a4b9f92e3df664344f2e6aa88c29c</anchor>
      <arglist>(IncEdgeIt) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>baseNode</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a6f0f66cde63d5e9d7f0642746d840230</anchor>
      <arglist>(OutArcIt) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>runningNode</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a110eaf7c8fb037e7f9feb93bc44cf7ce</anchor>
      <arglist>(OutArcIt) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>baseNode</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a581bb7d2e756fac2d971849e60e98297</anchor>
      <arglist>(InArcIt) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>runningNode</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>af1b3356047758dcc08d4f7b2d1adae8f</anchor>
      <arglist>(InArcIt) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BpGraph</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a765a0c7562c7105b2cec6a70e41d28e0</anchor>
      <arglist>(const BpGraph &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a05101.html</anchorfile>
      <anchor>a64715b3916b983e5e685e1813ce51309</anchor>
      <arglist>(const BpGraph &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::BpGraphCopy</name>
    <filename>a02069.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BpGraphCopy</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a7675a18a618014ce6cb91608d11683fe</anchor>
      <arglist>(const From &amp;from, To &amp;to)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BpGraphCopy</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a6f8569d75a8424a693de845d3080e9d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BpGraphCopy &amp;</type>
      <name>nodeRef</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a7ecff9dfd8669be40c75a41cc6c80570</anchor>
      <arglist>(NodeRef &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphCopy &amp;</type>
      <name>nodeCrossRef</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a999f8a95ae35248b363b01757362fcf4</anchor>
      <arglist>(NodeCrossRef &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphCopy &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a5efb7c48b3833d0efb216e54a32f39ff</anchor>
      <arglist>(const FromMap &amp;map, ToMap &amp;tmap)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphCopy &amp;</type>
      <name>node</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>ab3a53fd9387c2c31a9f139f9f3256129</anchor>
      <arglist>(const Node &amp;node, TNode &amp;tnode)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphCopy &amp;</type>
      <name>redRef</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a866d638c91fd9c9d018d43ebba0257f9</anchor>
      <arglist>(RedRef &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphCopy &amp;</type>
      <name>redCrossRef</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a04550c1a75c356b1f6ad93486653e3d9</anchor>
      <arglist>(RedCrossRef &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphCopy &amp;</type>
      <name>redNodeMap</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a0e45d838c7d1c738a4bb63df2d1661d3</anchor>
      <arglist>(const FromMap &amp;map, ToMap &amp;tmap)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphCopy &amp;</type>
      <name>redNode</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>ae762129614413707cad02394e7135ee0</anchor>
      <arglist>(const RedNode &amp;node, TRedNode &amp;tnode)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphCopy &amp;</type>
      <name>blueRef</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a4eaa3d83b9a16d10f10e3a812e23d057</anchor>
      <arglist>(BlueRef &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphCopy &amp;</type>
      <name>blueCrossRef</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>aae6354e981510f6fcebc27693830734f</anchor>
      <arglist>(BlueCrossRef &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphCopy &amp;</type>
      <name>blueNodeMap</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a7f9d56093e143814538d08a5eefe0900</anchor>
      <arglist>(const FromMap &amp;map, ToMap &amp;tmap)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphCopy &amp;</type>
      <name>blueNode</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>afacb9248edf9673e5c76cbdcb210c0d7</anchor>
      <arglist>(const BlueNode &amp;node, TBlueNode &amp;tnode)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphCopy &amp;</type>
      <name>arcRef</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>af4d2fe50579a6d2e06601ff85960fa3c</anchor>
      <arglist>(ArcRef &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphCopy &amp;</type>
      <name>arcCrossRef</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a25eb431949624e5115826edae4757819</anchor>
      <arglist>(ArcCrossRef &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphCopy &amp;</type>
      <name>arcMap</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a74217feaad78666e113e655a4037ca92</anchor>
      <arglist>(const FromMap &amp;map, ToMap &amp;tmap)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphCopy &amp;</type>
      <name>arc</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a7343db8a681e962b2f56bda50b005b96</anchor>
      <arglist>(const Arc &amp;arc, TArc &amp;tarc)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphCopy &amp;</type>
      <name>edgeRef</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a6ae05716ebb9f5c1a53368fa4c4b36e0</anchor>
      <arglist>(EdgeRef &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphCopy &amp;</type>
      <name>edgeCrossRef</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a1d4266a66ef0487573930f7b60cdac05</anchor>
      <arglist>(EdgeCrossRef &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphCopy &amp;</type>
      <name>edgeMap</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a804762c1421896cd29ebb2122ad3b898</anchor>
      <arglist>(const FromMap &amp;map, ToMap &amp;tmap)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphCopy &amp;</type>
      <name>edge</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>af3798e2763cb2c7fdd624cc2fba587e6</anchor>
      <arglist>(const Edge &amp;edge, TEdge &amp;tedge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::BpGraphReader</name>
    <filename>a03133.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>ac8b6efcd20b4090d169868042458257d</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>aa2e920f458447f84e720a59f62934db7</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>redNodeMap</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>ab7c7c8e74fe080fb83b2cf4ede194663</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>redNodeMap</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>aba8e3bb72d27935f52337f5174770b6b</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>blueNodeMap</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a8fbad5d4ce89865ea0e0159e4895c202</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>blueNodeMap</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a16706724fd689868db19b5be9695d237</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>edgeMap</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>abf5fa4dd00d952592231c59861fdf7f2</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>edgeMap</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>ad744b551856b197b6ccc02656430c8f5</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>arcMap</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>af48f1a6862ad679d9b99a943aca56cfe</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>arcMap</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a78736e343f3469ba3782aa8c625a6ba0</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>attribute</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a317e273f96de56862e8d4d82b70d35d5</anchor>
      <arglist>(const std::string &amp;caption, Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>attribute</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>ac5a51274b36be8db737138a3c7608e10</anchor>
      <arglist>(const std::string &amp;caption, Value &amp;value, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>node</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a991a52022567ed4721c4d8100b81c241</anchor>
      <arglist>(const std::string &amp;caption, Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>redNode</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a1a0327ebbf1e65a31ed0d813d2b067fc</anchor>
      <arglist>(const std::string &amp;caption, RedNode &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>blueNode</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a0ce7b775895f96195a77b36583e99043</anchor>
      <arglist>(const std::string &amp;caption, BlueNode &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>edge</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a8375c556f9ddcad15fdc6c594482ef29</anchor>
      <arglist>(const std::string &amp;caption, Edge &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>arc</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>af58c7933140c4af65f339798183f9151</anchor>
      <arglist>(const std::string &amp;caption, Arc &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>nodes</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>ac45d9122e97af4cea8ee2fc087c7be35</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>edges</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>ac931051eab846fe73858b72dc9c55b29</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>attributes</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a64a6aec8ff7a6491ea07159b5a64e7dd</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>useNodes</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a967ff6fe896537268eda5001bfa824be</anchor>
      <arglist>(const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>useNodes</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a8e7c71c0db9f74ade1c54a4443b619ca</anchor>
      <arglist>(const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>useEdges</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a7a622802539d93b3a7859ecc342b306e</anchor>
      <arglist>(const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>useEdges</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>ae3bf4e666878b4044077b1c8377bc7d5</anchor>
      <arglist>(const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>skipNodes</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a1af12c3d8c6cc46b6c91b64aa9986ebf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>skipEdges</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a588194147a931ac5b5654ef3562d6e0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BpGraphReader</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a88745f51d8ac816a26371e0f66cea862</anchor>
      <arglist>(BGR &amp;graph, std::istream &amp;is=std::cin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BpGraphReader</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>af783d24ca61f07a4aae11767d72e8bda</anchor>
      <arglist>(BGR &amp;graph, const std::string &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BpGraphReader</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>ad71be94c948a99479a553903209358eb</anchor>
      <arglist>(BGR &amp;graph, const char *fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BpGraphReader</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>aa4883c163e7c2c79c4c86118e4da3d6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>ac8b6efcd20b4090d169868042458257d</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>aa2e920f458447f84e720a59f62934db7</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>redNodeMap</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>ab7c7c8e74fe080fb83b2cf4ede194663</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>redNodeMap</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>aba8e3bb72d27935f52337f5174770b6b</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>blueNodeMap</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a8fbad5d4ce89865ea0e0159e4895c202</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>blueNodeMap</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a16706724fd689868db19b5be9695d237</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>edgeMap</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>abf5fa4dd00d952592231c59861fdf7f2</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>edgeMap</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>ad744b551856b197b6ccc02656430c8f5</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>arcMap</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>af48f1a6862ad679d9b99a943aca56cfe</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>arcMap</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a78736e343f3469ba3782aa8c625a6ba0</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>attribute</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a317e273f96de56862e8d4d82b70d35d5</anchor>
      <arglist>(const std::string &amp;caption, Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>attribute</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>ac5a51274b36be8db737138a3c7608e10</anchor>
      <arglist>(const std::string &amp;caption, Value &amp;value, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>node</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a991a52022567ed4721c4d8100b81c241</anchor>
      <arglist>(const std::string &amp;caption, Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>redNode</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a1a0327ebbf1e65a31ed0d813d2b067fc</anchor>
      <arglist>(const std::string &amp;caption, RedNode &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>blueNode</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a0ce7b775895f96195a77b36583e99043</anchor>
      <arglist>(const std::string &amp;caption, BlueNode &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>edge</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a8375c556f9ddcad15fdc6c594482ef29</anchor>
      <arglist>(const std::string &amp;caption, Edge &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>arc</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>af58c7933140c4af65f339798183f9151</anchor>
      <arglist>(const std::string &amp;caption, Arc &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>nodes</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>ac45d9122e97af4cea8ee2fc087c7be35</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>edges</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>ac931051eab846fe73858b72dc9c55b29</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>attributes</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a64a6aec8ff7a6491ea07159b5a64e7dd</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>useNodes</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a967ff6fe896537268eda5001bfa824be</anchor>
      <arglist>(const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>useNodes</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a8e7c71c0db9f74ade1c54a4443b619ca</anchor>
      <arglist>(const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>useEdges</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a7a622802539d93b3a7859ecc342b306e</anchor>
      <arglist>(const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>useEdges</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>ae3bf4e666878b4044077b1c8377bc7d5</anchor>
      <arglist>(const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>skipNodes</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a1af12c3d8c6cc46b6c91b64aa9986ebf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader &amp;</type>
      <name>skipEdges</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a588194147a931ac5b5654ef3562d6e0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader&lt; TBGR &gt;</type>
      <name>bpGraphReader</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>gac4c1c8a87aed10ee29c691b70267927d</anchor>
      <arglist>(TBGR &amp;graph, std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader&lt; TBGR &gt;</type>
      <name>bpGraphReader</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>aa48627599fd66b358bf4d3e584218cc8</anchor>
      <arglist>(TBGR &amp;graph, const std::string &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader&lt; TBGR &gt;</type>
      <name>bpGraphReader</name>
      <anchorfile>a03133.html</anchorfile>
      <anchor>a10e90a74ce40baac631766fec038462d</anchor>
      <arglist>(TBGR &amp;graph, const char *fn)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::BpGraphWriter</name>
    <filename>a03209.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>af1b97489f216f1c806eb4096575a0500</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a5bbb38ef7863155448912144ce92b77a</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>redNodeMap</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>abddd51f300f16897006fd9e0761e5755</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>redNodeMap</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a94ad1dcdd00bf196970b1a12df69b7e8</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>blueNodeMap</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>ab1ce984489e5347ce767c9ee8beb62c2</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>blueNodeMap</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>ac069048f2e60a1ee2121afda1cf9199e</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>edgeMap</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a02fd7509dcc4f1038515108296030d69</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>edgeMap</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a076b87abf2df1e3b2df1bd268cdfb377</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>arcMap</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>ae5a624bd0bb5dc02f749ed1f6a80aceb</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>arcMap</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a75c9ffced54391ca382a411823e7df4d</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>attribute</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>adf3f89ad459134ea9aee788a06a69214</anchor>
      <arglist>(const std::string &amp;caption, const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>attribute</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>ac92ed83d119e8bd09bc528cfbb163eeb</anchor>
      <arglist>(const std::string &amp;caption, const Value &amp;value, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>node</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>ab0dc7dbf20525cac41f12b7d2b7b1574</anchor>
      <arglist>(const std::string &amp;caption, const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>redNode</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>ae79b56d2a4841e756c020b5de10e1731</anchor>
      <arglist>(const std::string &amp;caption, const RedNode &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>blueNode</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>aadf06ab58aa955969de68c3fe68c85bd</anchor>
      <arglist>(const std::string &amp;caption, const BlueNode &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>edge</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>aa52de308f1e125dbb0e24b8d9f66b090</anchor>
      <arglist>(const std::string &amp;caption, const Edge &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>arc</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a909cbe357276ffd84277fb1346ed8a49</anchor>
      <arglist>(const std::string &amp;caption, const Arc &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>nodes</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>adaf3b737b38de1004d2baa6adc63849f</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>edges</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a165ffc263d449781bbbda0181d655835</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>attributes</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a5ab23294bba5467cf50d8882cfa2d3d1</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>skipNodes</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a5c5a7a83d285d6d885c25699ffb04b45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>skipEdges</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a5995feb7da40100bfe36d8ae892c817c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>ostream</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a0df4c16f48d0e3c9c5c0cd8a55d5b183</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BpGraphWriter</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a82dea74da2ecb88894b83fd8ba401840</anchor>
      <arglist>(const BGR &amp;graph, std::ostream &amp;os=std::cout)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BpGraphWriter</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a9bcb6ded882fda6a0bd45483c3146fef</anchor>
      <arglist>(const BGR &amp;graph, const std::string &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BpGraphWriter</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a0b9168912b6506f044df3dc6b68a0d2c</anchor>
      <arglist>(const BGR &amp;graph, const char *fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BpGraphWriter</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a89f7705d18856862401c708092224016</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>af1b97489f216f1c806eb4096575a0500</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a5bbb38ef7863155448912144ce92b77a</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>redNodeMap</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>abddd51f300f16897006fd9e0761e5755</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>redNodeMap</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a94ad1dcdd00bf196970b1a12df69b7e8</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>blueNodeMap</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>ab1ce984489e5347ce767c9ee8beb62c2</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>blueNodeMap</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>ac069048f2e60a1ee2121afda1cf9199e</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>edgeMap</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a02fd7509dcc4f1038515108296030d69</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>edgeMap</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a076b87abf2df1e3b2df1bd268cdfb377</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>arcMap</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>ae5a624bd0bb5dc02f749ed1f6a80aceb</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>arcMap</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a75c9ffced54391ca382a411823e7df4d</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>attribute</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>adf3f89ad459134ea9aee788a06a69214</anchor>
      <arglist>(const std::string &amp;caption, const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>attribute</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>ac92ed83d119e8bd09bc528cfbb163eeb</anchor>
      <arglist>(const std::string &amp;caption, const Value &amp;value, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>node</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>ab0dc7dbf20525cac41f12b7d2b7b1574</anchor>
      <arglist>(const std::string &amp;caption, const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>redNode</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>ae79b56d2a4841e756c020b5de10e1731</anchor>
      <arglist>(const std::string &amp;caption, const RedNode &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>blueNode</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>aadf06ab58aa955969de68c3fe68c85bd</anchor>
      <arglist>(const std::string &amp;caption, const BlueNode &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>edge</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>aa52de308f1e125dbb0e24b8d9f66b090</anchor>
      <arglist>(const std::string &amp;caption, const Edge &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>arc</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a909cbe357276ffd84277fb1346ed8a49</anchor>
      <arglist>(const std::string &amp;caption, const Arc &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>nodes</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>adaf3b737b38de1004d2baa6adc63849f</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>edges</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a165ffc263d449781bbbda0181d655835</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>attributes</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a5ab23294bba5467cf50d8882cfa2d3d1</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>skipNodes</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a5c5a7a83d285d6d885c25699ffb04b45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter &amp;</type>
      <name>skipEdges</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a5995feb7da40100bfe36d8ae892c817c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>ostream</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a0df4c16f48d0e3c9c5c0cd8a55d5b183</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter&lt; TBGR &gt;</type>
      <name>bpGraphWriter</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>ga501cff32bd7af38690224e42bf85bea8</anchor>
      <arglist>(const TBGR &amp;graph, std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter&lt; TBGR &gt;</type>
      <name>bpGraphWriter</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a9e35f031f911615b2f6fb6d60ba3d992</anchor>
      <arglist>(const TBGR &amp;graph, const std::string &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter&lt; TBGR &gt;</type>
      <name>bpGraphWriter</name>
      <anchorfile>a03209.html</anchorfile>
      <anchor>a39f67270f684dfcadd499b32111caa04</anchor>
      <arglist>(const TBGR &amp;graph, const char *fn)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::BucketHeap</name>
    <filename>a01833.html</filename>
    <templarg></templarg>
    <templarg>MIN</templarg>
    <member kind="enumeration">
      <type></type>
      <name>State</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_HEAP</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a213759402d071be3f66f8cf86641bb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRE_HEAP</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a12f201f9d13d106e81658dad7e7c9c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POST_HEAP</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8acd215e97251c1085a8b299c068e7172d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IM</type>
      <name>ItemIntMap</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>ac00a2d6f039b6e8ffc0641530bdf5304</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Prio</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a828e2232d3e40c141ccc0aa4eb6a960e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ItemIntMap::Key</type>
      <name>Item</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a70025b32b600038ee2981a3deab1a783</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Item, Prio &gt;</type>
      <name>Pair</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a616fe456bc4c8eddf813c4f5665e1180</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_HEAP</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a213759402d071be3f66f8cf86641bb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRE_HEAP</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a12f201f9d13d106e81658dad7e7c9c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POST_HEAP</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8acd215e97251c1085a8b299c068e7172d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BucketHeap</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>abcf7763ddd0d43afde396f855310ca16</anchor>
      <arglist>(ItemIntMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a644718bb2fb240de962dc3c9a1fdf0dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a5b654214309b6f25fceeec04e2b1a016</anchor>
      <arglist>(const Pair &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>ad34f576dafc84f8969e2fecd67cd3a15</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>top</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a3c68736e00411448ff7acf175015cc1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Prio</type>
      <name>prio</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>aa453ea5d0eb1b666a14a104659ae49dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a312e7f6c761a199c1369fbe651e084f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a5fe7eab02681c7735ba173c879de1681</anchor>
      <arglist>(const Item &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>Prio</type>
      <name>operator[]</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>ac85c63b4ab780fbfb4b986b60dd87481</anchor>
      <arglist>(const Item &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a35c06441ccfac0ed04762113a102e6b3</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrease</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a301fdc87288afdebf379ae043cf66cd4</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increase</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a958836bae38b188956bcf1345c63eac4</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>state</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a9e18a6f6555eb8d1bc8d37c951a440f6</anchor>
      <arglist>(const Item &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>state</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a7d0ca230d438efaad53833701d9cb262</anchor>
      <arglist>(const Item &amp;i, State st)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::CapacityScaling</name>
    <filename>a01853.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>lowerMap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a004cab88a9f9b9dfa2329e0342dd5e49</anchor>
      <arglist>(const LowerMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>upperMap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a5f903f6f906e0a48905ebcbbd5f2ed3d</anchor>
      <arglist>(const UpperMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>costMap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>aadad4c18e48999fd43322f88507eaa54</anchor>
      <arglist>(const CostMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>supplyMap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a04ae401d36ae3ca4d5ba730d4f2bb885</anchor>
      <arglist>(const SupplyMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>stSupply</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a412fea5aa104e9826ddeec1fa54d528d</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t, Value k)</arglist>
    </member>
    <member kind="function">
      <type>ProblemType</type>
      <name>run</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a9f51b418026d5480f76426f974567c5d</anchor>
      <arglist>(int factor=4)</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>resetParams</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>ac33087a2f4ddc981c4a977a291f8973a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>reset</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>af24760b2df0ab9357ce068be8a4f47c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Number</type>
      <name>totalCost</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a484c946e8ad38f8c0b419c84637140d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a1a77ac91887d3ea35df58e98b13e6fd4</anchor>
      <arglist>(const Arc &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flowMap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>aa2ea9eb67aee0565ecdbaeb537eb8b46</anchor>
      <arglist>(FlowMap &amp;map) const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>potential</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>ac291424bc8234750625d26b984442150</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>potentialMap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a0c1faa3dd3a44ffe90e51af832ec7804</anchor>
      <arglist>(PotentialMap &amp;map) const</arglist>
    </member>
    <class kind="struct">lemon::CapacityScaling::SetHeap</class>
    <member kind="enumeration">
      <type></type>
      <name>ProblemType</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2884fa43446c0cbc9c7a9b74d41d7483</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2579881e7c83261bc21bafb5a5c92cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBOUNDED</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea6c65123d1b5b01632a477661055b01ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Value</type>
      <name>Value</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>aa2042899ede28a8f6f0fdceb92a7d3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Cost</type>
      <name>Cost</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a9142822eba184f2778b6aac70b0900b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Heap</type>
      <name>Heap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>ab1e3f1c47cd4bffb15e3bbc452585f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR</type>
      <name>Traits</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2884fa43446c0cbc9c7a9b74d41d7483</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2579881e7c83261bc21bafb5a5c92cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBOUNDED</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea6c65123d1b5b01632a477661055b01ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CapacityScaling</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>ac44b4786c702ac531e5c6bb86273c60e</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>lowerMap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a004cab88a9f9b9dfa2329e0342dd5e49</anchor>
      <arglist>(const LowerMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>upperMap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a5f903f6f906e0a48905ebcbbd5f2ed3d</anchor>
      <arglist>(const UpperMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>costMap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>aadad4c18e48999fd43322f88507eaa54</anchor>
      <arglist>(const CostMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>supplyMap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a04ae401d36ae3ca4d5ba730d4f2bb885</anchor>
      <arglist>(const SupplyMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>stSupply</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a412fea5aa104e9826ddeec1fa54d528d</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t, Value k)</arglist>
    </member>
    <member kind="function">
      <type>ProblemType</type>
      <name>run</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a9f51b418026d5480f76426f974567c5d</anchor>
      <arglist>(int factor=4)</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>resetParams</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>ac33087a2f4ddc981c4a977a291f8973a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>reset</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>af24760b2df0ab9357ce068be8a4f47c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Number</type>
      <name>totalCost</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a484c946e8ad38f8c0b419c84637140d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a1a77ac91887d3ea35df58e98b13e6fd4</anchor>
      <arglist>(const Arc &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flowMap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>aa2ea9eb67aee0565ecdbaeb537eb8b46</anchor>
      <arglist>(FlowMap &amp;map) const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>potential</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>ac291424bc8234750625d26b984442150</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>potentialMap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a0c1faa3dd3a44ffe90e51af832ec7804</anchor>
      <arglist>(PotentialMap &amp;map) const</arglist>
    </member>
    <member kind="variable">
      <type>const Value</type>
      <name>INF</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a601ffd79f13610daacadd46f973507c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CapacityScaling&lt; GR, V, C, SetHeapTraits&lt; T &gt; &gt;</name>
    <filename>a01853.html</filename>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>lowerMap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a004cab88a9f9b9dfa2329e0342dd5e49</anchor>
      <arglist>(const LowerMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>upperMap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a5f903f6f906e0a48905ebcbbd5f2ed3d</anchor>
      <arglist>(const UpperMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>costMap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>aadad4c18e48999fd43322f88507eaa54</anchor>
      <arglist>(const CostMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>supplyMap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a04ae401d36ae3ca4d5ba730d4f2bb885</anchor>
      <arglist>(const SupplyMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>stSupply</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a412fea5aa104e9826ddeec1fa54d528d</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t, Value k)</arglist>
    </member>
    <member kind="function">
      <type>ProblemType</type>
      <name>run</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a9f51b418026d5480f76426f974567c5d</anchor>
      <arglist>(int factor=4)</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>resetParams</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>ac33087a2f4ddc981c4a977a291f8973a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>reset</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>af24760b2df0ab9357ce068be8a4f47c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Number</type>
      <name>totalCost</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a484c946e8ad38f8c0b419c84637140d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a1a77ac91887d3ea35df58e98b13e6fd4</anchor>
      <arglist>(const Arc &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flowMap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>aa2ea9eb67aee0565ecdbaeb537eb8b46</anchor>
      <arglist>(FlowMap &amp;map) const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>potential</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>ac291424bc8234750625d26b984442150</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>potentialMap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a0c1faa3dd3a44ffe90e51af832ec7804</anchor>
      <arglist>(PotentialMap &amp;map) const</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ProblemType</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Value</type>
      <name>Value</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>aa2042899ede28a8f6f0fdceb92a7d3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Cost</type>
      <name>Cost</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a9142822eba184f2778b6aac70b0900b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Heap</type>
      <name>Heap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>ab1e3f1c47cd4bffb15e3bbc452585f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetHeapTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2884fa43446c0cbc9c7a9b74d41d7483</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2579881e7c83261bc21bafb5a5c92cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBOUNDED</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea6c65123d1b5b01632a477661055b01ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CapacityScaling</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>ac44b4786c702ac531e5c6bb86273c60e</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>lowerMap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a004cab88a9f9b9dfa2329e0342dd5e49</anchor>
      <arglist>(const LowerMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>upperMap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a5f903f6f906e0a48905ebcbbd5f2ed3d</anchor>
      <arglist>(const UpperMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>costMap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>aadad4c18e48999fd43322f88507eaa54</anchor>
      <arglist>(const CostMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>supplyMap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a04ae401d36ae3ca4d5ba730d4f2bb885</anchor>
      <arglist>(const SupplyMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>stSupply</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a412fea5aa104e9826ddeec1fa54d528d</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t, Value k)</arglist>
    </member>
    <member kind="function">
      <type>ProblemType</type>
      <name>run</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a9f51b418026d5480f76426f974567c5d</anchor>
      <arglist>(int factor=4)</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>resetParams</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>ac33087a2f4ddc981c4a977a291f8973a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CapacityScaling &amp;</type>
      <name>reset</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>af24760b2df0ab9357ce068be8a4f47c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Number</type>
      <name>totalCost</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a484c946e8ad38f8c0b419c84637140d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a1a77ac91887d3ea35df58e98b13e6fd4</anchor>
      <arglist>(const Arc &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flowMap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>aa2ea9eb67aee0565ecdbaeb537eb8b46</anchor>
      <arglist>(FlowMap &amp;map) const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>potential</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>ac291424bc8234750625d26b984442150</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>potentialMap</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a0c1faa3dd3a44ffe90e51af832ec7804</anchor>
      <arglist>(PotentialMap &amp;map) const</arglist>
    </member>
    <member kind="variable">
      <type>const Value</type>
      <name>INF</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a601ffd79f13610daacadd46f973507c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::CapacityScalingDefaultTraits</name>
    <filename>a01849.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>Cost</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>adeb81a88e6bbaf933ca20ea3bbba7a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BinHeap&lt; Cost, RangeMap&lt; int &gt; &gt;</type>
      <name>Heap</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>a5212fa22a215a30621620615986ac5ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::CbcMip</name>
    <filename>a01869.html</filename>
    <base>lemon::MipSolver</base>
    <member kind="function">
      <type></type>
      <name>CbcMip</name>
      <anchorfile>a01869.html</anchorfile>
      <anchor>ab1ff7c7f55a6ae5f87eeebe0d5a1421c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CbcMip</name>
      <anchorfile>a01869.html</anchorfile>
      <anchor>a04420c67edf64119f3df6b79cc7e705d</anchor>
      <arglist>(const CbcMip &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CbcMip</name>
      <anchorfile>a01869.html</anchorfile>
      <anchor>accd7e3de4fc06851977426ea9f34e83b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CbcMip *</type>
      <name>newSolver</name>
      <anchorfile>a01869.html</anchorfile>
      <anchor>a982c34c2181d135e2611d141d3ad6233</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CbcMip *</type>
      <name>cloneSolver</name>
      <anchorfile>a01869.html</anchorfile>
      <anchor>a827db15e4061ec6ca2b47fbb3770e31d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ChristofidesTsp</name>
    <filename>a01873.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>Cost</type>
      <name>run</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>af294138cc991668caa699c9255c8f136</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>tourCost</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a5bd0e49b03ec84f7cecd696886d57140</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Node &gt; &amp;</type>
      <name>tourNodes</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a3a84c614d8b1b1ab72deed6063a92004</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tourNodes</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a91e89199ba4d6cad1ba3a3506c21ef6a</anchor>
      <arglist>(Iterator out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tour</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a6b952e6a8fcc5212f789fafb24314af4</anchor>
      <arglist>(Path &amp;path) const</arglist>
    </member>
    <member kind="typedef">
      <type>CM</type>
      <name>CostMap</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a0e4fe3b3bd126f464294f661c36a61d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CM::Value</type>
      <name>Cost</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a1a1dfba092aeec4656ebceaf99ca8b22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChristofidesTsp</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>af589c2ff4400edf3892b073908b01f19</anchor>
      <arglist>(const FullGraph &amp;gr, const CostMap &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>run</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>af294138cc991668caa699c9255c8f136</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>tourCost</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a5bd0e49b03ec84f7cecd696886d57140</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Node &gt; &amp;</type>
      <name>tourNodes</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a3a84c614d8b1b1ab72deed6063a92004</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tourNodes</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a91e89199ba4d6cad1ba3a3506c21ef6a</anchor>
      <arglist>(Iterator out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tour</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a6b952e6a8fcc5212f789fafb24314af4</anchor>
      <arglist>(Path &amp;path) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::Circulation</name>
    <filename>a01881.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>greedyInit</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a275cfb5a0d9eeb69e56ec2366e0a4f81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aad5997aaaa2d622f0ca57f8b24a51a7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a78a9b58c8fbb38efb1f99ce8009f99ec</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>barrier</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a721a11371b4e487be7c42614481b6ddd</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>barrierMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a067296931f77c1adbaa5920f270164cc</anchor>
      <arglist>(BarrierMap &amp;bar) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkFlow</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>af5b5cd93b7fa9062f867b788c40d79a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkBarrier</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aa234b85b2e004a89a72dd7d1c4bfcfa2</anchor>
      <arglist>() const</arglist>
    </member>
    <class kind="struct">lemon::Circulation::SetElevator</class>
    <class kind="struct">lemon::Circulation::SetFlowMap</class>
    <class kind="struct">lemon::Circulation::SetStandardElevator</class>
    <member kind="typedef">
      <type>TR</type>
      <name>Traits</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aa6928feef02be4f2a184775d19dc6373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Value</type>
      <name>Value</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a1c7478783a00413767196fd8d82ad8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::LowerMap</type>
      <name>LowerMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>abe92e2b425d46397f1add6fdd6db6b7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::UpperMap</type>
      <name>UpperMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a83be4d86b37c7a43dab64a4b1b5ccb79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::SupplyMap</type>
      <name>SupplyMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a040d59dc3d4879cc8f00ac310308772c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::FlowMap</type>
      <name>FlowMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>acbaaf29d0c8168790ab0da45dad92c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Elevator</type>
      <name>Elevator</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a078a395cce67cc7938d85be25aa74718</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Tolerance</type>
      <name>Tolerance</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a926a96c583959d256c1316a2aca3ce22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Circulation</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a766fcc516e43681f77caad90d5e73913</anchor>
      <arglist>(const Digraph &amp;graph, const LowerMap &amp;lower, const UpperMap &amp;upper, const SupplyMap &amp;supply)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Circulation</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a602bddf53e2f8737ac8333233ee6e96d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Circulation &amp;</type>
      <name>lowerMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ab6c73f90f08dc7da19a258c7e05674a5</anchor>
      <arglist>(const LowerMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Circulation &amp;</type>
      <name>upperMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a453a1901f76865172e8f1a677d6fece8</anchor>
      <arglist>(const UpperMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Circulation &amp;</type>
      <name>supplyMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aab294b65a3aa5747c71fd9ead4a71b50</anchor>
      <arglist>(const SupplyMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Circulation &amp;</type>
      <name>flowMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a3dc1b264f452142f2dc77157b86f5155</anchor>
      <arglist>(FlowMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Circulation &amp;</type>
      <name>elevator</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>abc8e9abf45d71ce9d03f3a559e8edf8e</anchor>
      <arglist>(Elevator &amp;elevator)</arglist>
    </member>
    <member kind="function">
      <type>const Elevator &amp;</type>
      <name>elevator</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a960c4f9b0d5af901c6b37bec96f24de3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Circulation &amp;</type>
      <name>tolerance</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a19773192cea016ada50d3b9470bf36cd</anchor>
      <arglist>(const Tolerance &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const Tolerance &amp;</type>
      <name>tolerance</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aec76cbbff18f655dd34a7020418965bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>greedyInit</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a275cfb5a0d9eeb69e56ec2366e0a4f81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aad5997aaaa2d622f0ca57f8b24a51a7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a78a9b58c8fbb38efb1f99ce8009f99ec</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>barrier</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a721a11371b4e487be7c42614481b6ddd</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>barrierMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a067296931f77c1adbaa5920f270164cc</anchor>
      <arglist>(BarrierMap &amp;bar) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkFlow</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>af5b5cd93b7fa9062f867b788c40d79a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkBarrier</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aa234b85b2e004a89a72dd7d1c4bfcfa2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Circulation&lt; Digraph, LowerMap, UpperMap, SupplyMap, SetElevatorTraits&lt; T &gt; &gt;</name>
    <filename>a01881.html</filename>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a78a9b58c8fbb38efb1f99ce8009f99ec</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>barrier</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a721a11371b4e487be7c42614481b6ddd</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>barrierMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a067296931f77c1adbaa5920f270164cc</anchor>
      <arglist>(BarrierMap &amp;bar) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>greedyInit</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a275cfb5a0d9eeb69e56ec2366e0a4f81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aad5997aaaa2d622f0ca57f8b24a51a7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkFlow</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>af5b5cd93b7fa9062f867b788c40d79a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkBarrier</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aa234b85b2e004a89a72dd7d1c4bfcfa2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>SetElevatorTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aa6928feef02be4f2a184775d19dc6373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Value</type>
      <name>Value</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a1c7478783a00413767196fd8d82ad8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::LowerMap</type>
      <name>LowerMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>abe92e2b425d46397f1add6fdd6db6b7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::UpperMap</type>
      <name>UpperMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a83be4d86b37c7a43dab64a4b1b5ccb79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::SupplyMap</type>
      <name>SupplyMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a040d59dc3d4879cc8f00ac310308772c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::FlowMap</type>
      <name>FlowMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>acbaaf29d0c8168790ab0da45dad92c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Elevator</type>
      <name>Elevator</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a078a395cce67cc7938d85be25aa74718</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Tolerance</type>
      <name>Tolerance</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a926a96c583959d256c1316a2aca3ce22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Circulation</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a766fcc516e43681f77caad90d5e73913</anchor>
      <arglist>(const Digraph &amp;graph, const LowerMap &amp;lower, const UpperMap &amp;upper, const SupplyMap &amp;supply)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Circulation</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a602bddf53e2f8737ac8333233ee6e96d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Circulation &amp;</type>
      <name>lowerMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ab6c73f90f08dc7da19a258c7e05674a5</anchor>
      <arglist>(const LowerMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Circulation &amp;</type>
      <name>upperMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a453a1901f76865172e8f1a677d6fece8</anchor>
      <arglist>(const UpperMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Circulation &amp;</type>
      <name>supplyMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aab294b65a3aa5747c71fd9ead4a71b50</anchor>
      <arglist>(const SupplyMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Circulation &amp;</type>
      <name>flowMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a3dc1b264f452142f2dc77157b86f5155</anchor>
      <arglist>(FlowMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Circulation &amp;</type>
      <name>elevator</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>abc8e9abf45d71ce9d03f3a559e8edf8e</anchor>
      <arglist>(Elevator &amp;elevator)</arglist>
    </member>
    <member kind="function">
      <type>const Elevator &amp;</type>
      <name>elevator</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a960c4f9b0d5af901c6b37bec96f24de3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Circulation &amp;</type>
      <name>tolerance</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a19773192cea016ada50d3b9470bf36cd</anchor>
      <arglist>(const Tolerance &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const Tolerance &amp;</type>
      <name>tolerance</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aec76cbbff18f655dd34a7020418965bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a78a9b58c8fbb38efb1f99ce8009f99ec</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>barrier</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a721a11371b4e487be7c42614481b6ddd</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>barrierMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a067296931f77c1adbaa5920f270164cc</anchor>
      <arglist>(BarrierMap &amp;bar) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>greedyInit</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a275cfb5a0d9eeb69e56ec2366e0a4f81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aad5997aaaa2d622f0ca57f8b24a51a7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkFlow</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>af5b5cd93b7fa9062f867b788c40d79a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkBarrier</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aa234b85b2e004a89a72dd7d1c4bfcfa2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Circulation&lt; Digraph, LowerMap, UpperMap, SupplyMap, SetFlowMapTraits&lt; T &gt; &gt;</name>
    <filename>a01881.html</filename>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a78a9b58c8fbb38efb1f99ce8009f99ec</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>barrier</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a721a11371b4e487be7c42614481b6ddd</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>barrierMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a067296931f77c1adbaa5920f270164cc</anchor>
      <arglist>(BarrierMap &amp;bar) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>greedyInit</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a275cfb5a0d9eeb69e56ec2366e0a4f81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aad5997aaaa2d622f0ca57f8b24a51a7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkFlow</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>af5b5cd93b7fa9062f867b788c40d79a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkBarrier</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aa234b85b2e004a89a72dd7d1c4bfcfa2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>SetFlowMapTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aa6928feef02be4f2a184775d19dc6373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Value</type>
      <name>Value</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a1c7478783a00413767196fd8d82ad8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::LowerMap</type>
      <name>LowerMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>abe92e2b425d46397f1add6fdd6db6b7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::UpperMap</type>
      <name>UpperMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a83be4d86b37c7a43dab64a4b1b5ccb79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::SupplyMap</type>
      <name>SupplyMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a040d59dc3d4879cc8f00ac310308772c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::FlowMap</type>
      <name>FlowMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>acbaaf29d0c8168790ab0da45dad92c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Elevator</type>
      <name>Elevator</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a078a395cce67cc7938d85be25aa74718</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Tolerance</type>
      <name>Tolerance</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a926a96c583959d256c1316a2aca3ce22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Circulation</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a766fcc516e43681f77caad90d5e73913</anchor>
      <arglist>(const Digraph &amp;graph, const LowerMap &amp;lower, const UpperMap &amp;upper, const SupplyMap &amp;supply)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Circulation</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a602bddf53e2f8737ac8333233ee6e96d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Circulation &amp;</type>
      <name>lowerMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ab6c73f90f08dc7da19a258c7e05674a5</anchor>
      <arglist>(const LowerMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Circulation &amp;</type>
      <name>upperMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a453a1901f76865172e8f1a677d6fece8</anchor>
      <arglist>(const UpperMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Circulation &amp;</type>
      <name>supplyMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aab294b65a3aa5747c71fd9ead4a71b50</anchor>
      <arglist>(const SupplyMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Circulation &amp;</type>
      <name>flowMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a3dc1b264f452142f2dc77157b86f5155</anchor>
      <arglist>(FlowMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Circulation &amp;</type>
      <name>elevator</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>abc8e9abf45d71ce9d03f3a559e8edf8e</anchor>
      <arglist>(Elevator &amp;elevator)</arglist>
    </member>
    <member kind="function">
      <type>const Elevator &amp;</type>
      <name>elevator</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a960c4f9b0d5af901c6b37bec96f24de3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Circulation &amp;</type>
      <name>tolerance</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a19773192cea016ada50d3b9470bf36cd</anchor>
      <arglist>(const Tolerance &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const Tolerance &amp;</type>
      <name>tolerance</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aec76cbbff18f655dd34a7020418965bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a78a9b58c8fbb38efb1f99ce8009f99ec</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>barrier</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a721a11371b4e487be7c42614481b6ddd</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>barrierMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a067296931f77c1adbaa5920f270164cc</anchor>
      <arglist>(BarrierMap &amp;bar) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>greedyInit</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a275cfb5a0d9eeb69e56ec2366e0a4f81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aad5997aaaa2d622f0ca57f8b24a51a7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkFlow</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>af5b5cd93b7fa9062f867b788c40d79a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkBarrier</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aa234b85b2e004a89a72dd7d1c4bfcfa2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Circulation&lt; Digraph, LowerMap, UpperMap, SupplyMap, SetStandardElevatorTraits&lt; T &gt; &gt;</name>
    <filename>a01881.html</filename>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a78a9b58c8fbb38efb1f99ce8009f99ec</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>barrier</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a721a11371b4e487be7c42614481b6ddd</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>barrierMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a067296931f77c1adbaa5920f270164cc</anchor>
      <arglist>(BarrierMap &amp;bar) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>greedyInit</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a275cfb5a0d9eeb69e56ec2366e0a4f81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aad5997aaaa2d622f0ca57f8b24a51a7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkFlow</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>af5b5cd93b7fa9062f867b788c40d79a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkBarrier</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aa234b85b2e004a89a72dd7d1c4bfcfa2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>SetStandardElevatorTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aa6928feef02be4f2a184775d19dc6373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Value</type>
      <name>Value</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a1c7478783a00413767196fd8d82ad8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::LowerMap</type>
      <name>LowerMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>abe92e2b425d46397f1add6fdd6db6b7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::UpperMap</type>
      <name>UpperMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a83be4d86b37c7a43dab64a4b1b5ccb79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::SupplyMap</type>
      <name>SupplyMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a040d59dc3d4879cc8f00ac310308772c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::FlowMap</type>
      <name>FlowMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>acbaaf29d0c8168790ab0da45dad92c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Elevator</type>
      <name>Elevator</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a078a395cce67cc7938d85be25aa74718</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Tolerance</type>
      <name>Tolerance</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a926a96c583959d256c1316a2aca3ce22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Circulation</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a766fcc516e43681f77caad90d5e73913</anchor>
      <arglist>(const Digraph &amp;graph, const LowerMap &amp;lower, const UpperMap &amp;upper, const SupplyMap &amp;supply)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Circulation</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a602bddf53e2f8737ac8333233ee6e96d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Circulation &amp;</type>
      <name>lowerMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ab6c73f90f08dc7da19a258c7e05674a5</anchor>
      <arglist>(const LowerMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Circulation &amp;</type>
      <name>upperMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a453a1901f76865172e8f1a677d6fece8</anchor>
      <arglist>(const UpperMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Circulation &amp;</type>
      <name>supplyMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aab294b65a3aa5747c71fd9ead4a71b50</anchor>
      <arglist>(const SupplyMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Circulation &amp;</type>
      <name>flowMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a3dc1b264f452142f2dc77157b86f5155</anchor>
      <arglist>(FlowMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Circulation &amp;</type>
      <name>elevator</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>abc8e9abf45d71ce9d03f3a559e8edf8e</anchor>
      <arglist>(Elevator &amp;elevator)</arglist>
    </member>
    <member kind="function">
      <type>const Elevator &amp;</type>
      <name>elevator</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a960c4f9b0d5af901c6b37bec96f24de3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Circulation &amp;</type>
      <name>tolerance</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a19773192cea016ada50d3b9470bf36cd</anchor>
      <arglist>(const Tolerance &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const Tolerance &amp;</type>
      <name>tolerance</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aec76cbbff18f655dd34a7020418965bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a78a9b58c8fbb38efb1f99ce8009f99ec</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>barrier</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a721a11371b4e487be7c42614481b6ddd</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>barrierMap</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a067296931f77c1adbaa5920f270164cc</anchor>
      <arglist>(BarrierMap &amp;bar) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>greedyInit</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a275cfb5a0d9eeb69e56ec2366e0a4f81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aad5997aaaa2d622f0ca57f8b24a51a7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkFlow</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>af5b5cd93b7fa9062f867b788c40d79a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkBarrier</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aa234b85b2e004a89a72dd7d1c4bfcfa2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::CirculationDefaultTraits</name>
    <filename>a01877.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LM</type>
      <name>LowerMap</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>ae46c3221b25227a3b78e9f9a1b3f42ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UM</type>
      <name>UpperMap</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a96f0ba1f755808fb6478bad8c221187d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SM</type>
      <name>SupplyMap</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>abddcbdf598a9a95ef03684914e7e9991</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SupplyMap::Value</type>
      <name>Value</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a87bda177e2c2c008e4662ba93e88a32f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GR::ArcMap&lt; Value &gt;</type>
      <name>FlowMap</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a96d8e23f3aa7e1f5c97c91eae139de3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lemon::Elevator&lt; GR, GR::Node &gt;</type>
      <name>Elevator</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>af3390aa8ccdc072ceee447dcb2f33145</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lemon::Tolerance&lt; Value &gt;</type>
      <name>Tolerance</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>ac8d81c6484d646b8881c72707f2527d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FlowMap *</type>
      <name>createFlowMap</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>afd79e520abbe90ea86b8013071afb57b</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Elevator *</type>
      <name>createElevator</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a899dadca634616cbf6500efbc71610e5</anchor>
      <arglist>(const Digraph &amp;digraph, int max_level)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::UnionFindEnum::ClassIt</name>
    <filename>a04373.html</filename>
    <member kind="function">
      <type></type>
      <name>ClassIt</name>
      <anchorfile>a04373.html</anchorfile>
      <anchor>a9a83e3dd1807f0728359469863a5ae14</anchor>
      <arglist>(const UnionFindEnum &amp;ufe)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClassIt</name>
      <anchorfile>a04373.html</anchorfile>
      <anchor>a73864ec018608788129b8166ccf2635e</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type>ClassIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a04373.html</anchorfile>
      <anchor>a52b7eaf8769c0839d58b44a4fa4b39f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>a04373.html</anchorfile>
      <anchor>a48d27bd92e68c69527589ea65a9af69f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a04373.html</anchorfile>
      <anchor>aefa8e3edb2c7c9d0819b4c9765117d5e</anchor>
      <arglist>(const ClassIt &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a04373.html</anchorfile>
      <anchor>a9d7715efaa0bd2d11de33da881e26698</anchor>
      <arglist>(const ClassIt &amp;i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ExtendFindEnum::ClassIt</name>
    <filename>a04393.html</filename>
    <member kind="function">
      <type></type>
      <name>ClassIt</name>
      <anchorfile>a04393.html</anchorfile>
      <anchor>a6f28b94b741b9597ea12d1a02d5c0d6c</anchor>
      <arglist>(const ExtendFindEnum &amp;ufe)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClassIt</name>
      <anchorfile>a04393.html</anchorfile>
      <anchor>a73864ec018608788129b8166ccf2635e</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type>ClassIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a04393.html</anchorfile>
      <anchor>a52b7eaf8769c0839d58b44a4fa4b39f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>a04393.html</anchorfile>
      <anchor>a48d27bd92e68c69527589ea65a9af69f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a04393.html</anchorfile>
      <anchor>aefa8e3edb2c7c9d0819b4c9765117d5e</anchor>
      <arglist>(const ClassIt &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a04393.html</anchorfile>
      <anchor>a9d7715efaa0bd2d11de33da881e26698</anchor>
      <arglist>(const ClassIt &amp;i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::HeapUnionFind::ClassIt</name>
    <filename>a04417.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a04417.html</anchorfile>
      <anchor>aefa8e3edb2c7c9d0819b4c9765117d5e</anchor>
      <arglist>(const ClassIt &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a04417.html</anchorfile>
      <anchor>a9d7715efaa0bd2d11de33da881e26698</anchor>
      <arglist>(const ClassIt &amp;i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::ClearableBpGraphComponent</name>
    <filename>a05529.html</filename>
    <templarg></templarg>
    <base>ClearableGraphComponent&lt; BaseBpGraphComponent &gt;</base>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::ClearableDigraphComponent</name>
    <filename>a05517.html</filename>
    <templarg></templarg>
    <base>lemon::concepts::BaseDigraphComponent</base>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a05517.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClearableDigraphComponent&lt; BaseBpGraphComponent &gt;</name>
    <filename>a05517.html</filename>
    <base>lemon::concepts::BaseBpGraphComponent</base>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a05517.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClearableDigraphComponent&lt; BaseGraphComponent &gt;</name>
    <filename>a05517.html</filename>
    <base>lemon::concepts::BaseGraphComponent</base>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a05517.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::ClearableGraphComponent</name>
    <filename>a05525.html</filename>
    <templarg></templarg>
    <base>ClearableDigraphComponent&lt; BaseGraphComponent &gt;</base>
  </compound>
  <compound kind="class">
    <name>ClearableGraphComponent&lt; BaseBpGraphComponent &gt;</name>
    <filename>a05525.html</filename>
    <base>ClearableDigraphComponent&lt; BaseBpGraphComponent &gt;</base>
  </compound>
  <compound kind="class">
    <name>lemon::GrossoLocatelliPullanMc::CliqueNodeIt</name>
    <filename>a02845.html</filename>
    <member kind="function">
      <type></type>
      <name>CliqueNodeIt</name>
      <anchorfile>a02845.html</anchorfile>
      <anchor>a6b7bfeed3a46cfebb3ff4468e39e4568</anchor>
      <arglist>(const GrossoLocatelliPullanMc &amp;mc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Node</name>
      <anchorfile>a02845.html</anchorfile>
      <anchor>a11d0699af4659b67aae9342df58bf004</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CliqueNodeIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a02845.html</anchorfile>
      <anchor>aeb4af587bf5088b1a4cef0c5a9884189</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GR::Node</type>
      <name>operator++</name>
      <anchorfile>a02845.html</anchorfile>
      <anchor>ac3fe98923f5eb6ef04f1354340d42eb5</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ClpLp</name>
    <filename>a01909.html</filename>
    <base>lemon::LpSolver</base>
    <member kind="function">
      <type></type>
      <name>ClpLp</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>af9667a2a88853c4be96b0c2e19416ad2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClpLp</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>a89f91b42af43524791c4c73c6f377a79</anchor>
      <arglist>(const ClpLp &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ClpLp</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>aa8060bf28e96f9deb5a0da4d7105230f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ClpLp *</type>
      <name>newSolver</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>a7dc8342387a510babbb7ed5fb133aa46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ClpLp *</type>
      <name>cloneSolver</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>aaa8694657547bc0325609991b0074d46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SolveExitStatus</type>
      <name>solvePrimal</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>a0c104ef72fd5fc98036e0a83305bdcb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SolveExitStatus</type>
      <name>solveDual</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>af9e12f11f876ed7feccba1fbd68a0f5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SolveExitStatus</type>
      <name>solveBarrier</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>a86f7f5085ed05208610310476906a675</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>clpRow</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>ac8fdd2698860337a112bdce3f4b78b9f</anchor>
      <arglist>(Row r) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>clpCol</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>a23d501ffaf0d1d080de1370114b70495</anchor>
      <arglist>(Col c) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::LpBase::Expr::CoeffIt</name>
    <filename>a03365.html</filename>
    <member kind="function">
      <type></type>
      <name>CoeffIt</name>
      <anchorfile>a03365.html</anchorfile>
      <anchor>a86138e097d2ae2c09acd7c2f2e595574</anchor>
      <arglist>(Expr &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Col</name>
      <anchorfile>a03365.html</anchorfile>
      <anchor>a9124a99bc645cdcc2f2fde5db3efaee1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator*</name>
      <anchorfile>a03365.html</anchorfile>
      <anchor>a153207f2745305ea9d834e3ad5ad99ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator*</name>
      <anchorfile>a03365.html</anchorfile>
      <anchor>a94c2cb00389ca25a69e2534d50709feb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CoeffIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a03365.html</anchorfile>
      <anchor>a039a874d8a262be17f9ce7ac3d169081</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a03365.html</anchorfile>
      <anchor>a8d6f49632ab9a9e02a777155052628c3</anchor>
      <arglist>(Invalid) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a03365.html</anchorfile>
      <anchor>a7f49ed3e47c513d4466fe349c188ad1c</anchor>
      <arglist>(Invalid) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::LpBase::DualExpr::CoeffIt</name>
    <filename>a03381.html</filename>
    <member kind="function">
      <type></type>
      <name>CoeffIt</name>
      <anchorfile>a03381.html</anchorfile>
      <anchor>af1d4bd086fbc47d2f405b90977ea211c</anchor>
      <arglist>(DualExpr &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Row</name>
      <anchorfile>a03381.html</anchorfile>
      <anchor>a71a8e249b04b73125594dc599624fb9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator*</name>
      <anchorfile>a03381.html</anchorfile>
      <anchor>a153207f2745305ea9d834e3ad5ad99ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator*</name>
      <anchorfile>a03381.html</anchorfile>
      <anchor>a94c2cb00389ca25a69e2534d50709feb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CoeffIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a03381.html</anchorfile>
      <anchor>a039a874d8a262be17f9ce7ac3d169081</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a03381.html</anchorfile>
      <anchor>a8d6f49632ab9a9e02a777155052628c3</anchor>
      <arglist>(Invalid) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a03381.html</anchorfile>
      <anchor>a7f49ed3e47c513d4466fe349c188ad1c</anchor>
      <arglist>(Invalid) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::LpBase::Col</name>
    <filename>a03345.html</filename>
    <member kind="function">
      <type></type>
      <name>Col</name>
      <anchorfile>a03345.html</anchorfile>
      <anchor>af7991549589751a29539570df31ed273</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Col</name>
      <anchorfile>a03345.html</anchorfile>
      <anchor>a5d790ffa8fab4ba0924ab12b5d5dc0ed</anchor>
      <arglist>(const Invalid &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a03345.html</anchorfile>
      <anchor>afdeefae03707c33a15be11a0912ff7cc</anchor>
      <arglist>(Col c) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a03345.html</anchorfile>
      <anchor>a81bbafdd253eaa8e118e0ade26d283e2</anchor>
      <arglist>(Col c) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a03345.html</anchorfile>
      <anchor>a686205aa17dd782eadbe71b97d861b55</anchor>
      <arglist>(Col c) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::LpBase::ColIt</name>
    <filename>a03349.html</filename>
    <base>lemon::LpBase::Col</base>
    <member kind="function">
      <type></type>
      <name>ColIt</name>
      <anchorfile>a03349.html</anchorfile>
      <anchor>a4ff1d0672e84973c2d1160b1aed6390a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColIt</name>
      <anchorfile>a03349.html</anchorfile>
      <anchor>a71391a941fd206fd2a29dceefaf6a3ca</anchor>
      <arglist>(const LpBase &amp;solver)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColIt</name>
      <anchorfile>a03349.html</anchorfile>
      <anchor>a0ba710f476749e1b36032d4792eb9cb6</anchor>
      <arglist>(const Invalid &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ColIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a03349.html</anchorfile>
      <anchor>a5c5e13776a43ec2dfb4c2996c3af45c1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::GridGraph::ColMap</name>
    <filename>a02821.html</filename>
    <member kind="typedef">
      <type>GridGraph::Node</type>
      <name>Key</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>a89610f8cffa34a4715c0730e05cb8751</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Value</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>a8940a046b717a18878ab9de4ba32a0b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColMap</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>acc4976242d536051e8c575c83d17cf72</anchor>
      <arglist>(const GridGraph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>a6bb5cd098260055648dc5219c8190b4b</anchor>
      <arglist>(Key key) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::Color</name>
    <filename>a01913.html</filename>
    <member kind="function">
      <type></type>
      <name>Color</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a1589b83974b42a2f3315624f14c3c92c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Color</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>ac975f1207e7e7caacde357dfea1369c8</anchor>
      <arglist>(double r, double g, double b)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>red</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a76ca6d975a3988ef9d12b7ea867b38ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>red</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a91da867da5bd2ca7af3281f9018a1f10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>green</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a53e0b92699d4680948e29928fa663897</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>green</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>ab83517875e89189523dbaba91d7d8622</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>blue</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a22038a8dc2199101ab5d3826e23a747b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>blue</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a7917b64b562fe4eb6b00094125ca75a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>aad8a1573c2ef17613aef9a536ba7f51d</anchor>
      <arglist>(double r, double g, double b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::SplitNodes::CombinedArcMap</name>
    <filename>a01609.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Arc</type>
      <name>Key</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a49324d309ab1fbcdfd1e07ecc5f48b39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AM::Value</type>
      <name>Value</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a9451425a7d8c5c2fb3079bd0a3483297</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CombinedArcMap</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a7c4c19566ea6648fab99a6788307c42b</anchor>
      <arglist>(AM &amp;arc_map, NM &amp;node_map)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>ab70e8ad15e551b4a3abbdb81c86db7e7</anchor>
      <arglist>(const Key &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>ae04f0399db80fbb09db6e916e08cb53a</anchor>
      <arglist>(const Key &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a4298356c4811426ffa189423d8165413</anchor>
      <arglist>(const Arc &amp;arc, const Value &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::Undirector::CombinedArcMap</name>
    <filename>a01537.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Parent::Arc</type>
      <name>Key</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>a13e85d8e9431f7a6a51c1e2e15807dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FW::Value</type>
      <name>Value</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>a7f806cb53c6fe517966417f73431ac65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CombinedArcMap</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>afc72a99a501025589a75334d5099653e</anchor>
      <arglist>(FW &amp;forward, BK &amp;backward)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>a8b4f088ec51d022ac424e2ad03345528</anchor>
      <arglist>(const Key &amp;e, const Value &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>ConstReturnValue</type>
      <name>operator[]</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>a879d938a47de4dac7df2e19a06ef0e04</anchor>
      <arglist>(const Key &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>ReturnValue</type>
      <name>operator[]</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>a6c15088cce9ae56b72a0e3e53c206c38</anchor>
      <arglist>(const Key &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::SplitNodes::CombinedNodeMap</name>
    <filename>a01605.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Node</type>
      <name>Key</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ae05d965da541abbbd35cc532b534496d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IN::Value</type>
      <name>Value</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ab01dedd73125983bb1ea31cc9e77b149</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CombinedNodeMap</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a91d4277520d815686fee8fe613eab57c</anchor>
      <arglist>(IN &amp;in_map, OUT &amp;out_map)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a9ac2d4975d0586c2793b6ff53ab35431</anchor>
      <arglist>(const Key &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>afc48ad56cf63a3484c36594a3057a007</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a603dc3052fdde5db5980a0846177e561</anchor>
      <arglist>(const Key &amp;key, const Value &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::CombineMap</name>
    <filename>a03461.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>MapBase&lt; M1::Key, typename F::result_type &gt;</base>
    <member kind="typedef">
      <type>M1::Key</type>
      <name>Key</name>
      <anchorfile>a03461.html</anchorfile>
      <anchor>ac16c774bd2b82a45854c3ac66248de01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a03461.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CombineMap</name>
      <anchorfile>a03461.html</anchorfile>
      <anchor>a051804ca4d865d945af7f8430325d60e</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2, const F &amp;f=F())</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03461.html</anchorfile>
      <anchor>a8de1b13f44fab45faa8daa93027f9df2</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>CombineMap&lt; M1, M2, F, V &gt;</type>
      <name>combineMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>gafa8530beb88cb34532f35a6e121e0007</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2, const F &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ComposeMap</name>
    <filename>a03457.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>MapBase&lt; M2::Key, M1::Value &gt;</base>
    <member kind="typedef">
      <type>M2::Key</type>
      <name>Key</name>
      <anchorfile>a03457.html</anchorfile>
      <anchor>a481aeb3578c6cc4719982a3e64501d19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M1::Value</type>
      <name>Value</name>
      <anchorfile>a03457.html</anchorfile>
      <anchor>a087615b851ee4b1f01463e4589205d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComposeMap</name>
      <anchorfile>a03457.html</anchorfile>
      <anchor>aff637d186f992a6d4e8c16d29b8eb7f2</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>MapTraits&lt; M1 &gt;::ConstReturnValue</type>
      <name>operator[]</name>
      <anchorfile>a03457.html</anchorfile>
      <anchor>ac7491ac073091f687191b3ddc316af2d</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>ComposeMap&lt; M1, M2 &gt;</type>
      <name>composeMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>gac36b354e8e808fba48e18cf15db5100f</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ConArcIt</name>
    <filename>a02089.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ConArcIt</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a77d03dd52dcaad7b393c1efbbab63602</anchor>
      <arglist>(const GR &amp;g, Node u, Node v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConArcIt</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a0a41f45a3e529803047fbd033522a2aa</anchor>
      <arglist>(const GR &amp;g, Arc a)</arglist>
    </member>
    <member kind="function">
      <type>ConArcIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>acd427be549d9ab071d71eed9cd02d6ec</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ConEdgeIt</name>
    <filename>a02101.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ConEdgeIt</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a09282f7895a4ec3cd5211ece130c8762</anchor>
      <arglist>(const GR &amp;g, Node u, Node v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConEdgeIt</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a66878cccb947904847f417dfdc9de3f5</anchor>
      <arglist>(const GR &amp;g, Edge e)</arglist>
    </member>
    <member kind="function">
      <type>ConEdgeIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>adb97684eca2bef5f92d3bb6e3f3b083e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::LpBase::Expr::ConstCoeffIt</name>
    <filename>a03369.html</filename>
    <member kind="function">
      <type></type>
      <name>ConstCoeffIt</name>
      <anchorfile>a03369.html</anchorfile>
      <anchor>ad50df4e747412a8515c4ed98e63d6f95</anchor>
      <arglist>(const Expr &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Col</name>
      <anchorfile>a03369.html</anchorfile>
      <anchor>a9124a99bc645cdcc2f2fde5db3efaee1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator*</name>
      <anchorfile>a03369.html</anchorfile>
      <anchor>a94c2cb00389ca25a69e2534d50709feb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstCoeffIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a03369.html</anchorfile>
      <anchor>a7b10f56647ec34e697101749cae7fa92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a03369.html</anchorfile>
      <anchor>a8d6f49632ab9a9e02a777155052628c3</anchor>
      <arglist>(Invalid) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a03369.html</anchorfile>
      <anchor>a7f49ed3e47c513d4466fe349c188ad1c</anchor>
      <arglist>(Invalid) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::LpBase::DualExpr::ConstCoeffIt</name>
    <filename>a03385.html</filename>
    <member kind="function">
      <type></type>
      <name>ConstCoeffIt</name>
      <anchorfile>a03385.html</anchorfile>
      <anchor>a906f76a122f4e52776d7f108a8bfabed</anchor>
      <arglist>(const DualExpr &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Row</name>
      <anchorfile>a03385.html</anchorfile>
      <anchor>a71a8e249b04b73125594dc599624fb9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator*</name>
      <anchorfile>a03385.html</anchorfile>
      <anchor>a94c2cb00389ca25a69e2534d50709feb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstCoeffIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a03385.html</anchorfile>
      <anchor>a7b10f56647ec34e697101749cae7fa92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a03385.html</anchorfile>
      <anchor>a8d6f49632ab9a9e02a777155052628c3</anchor>
      <arglist>(Invalid) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a03385.html</anchorfile>
      <anchor>a7f49ed3e47c513d4466fe349c188ad1c</anchor>
      <arglist>(Invalid) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ConstMap</name>
    <filename>a03433.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>lemon::MapBase</base>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a9532675f587433570548ee24a2aa440e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>ac27f63c7329551a5b298813c13e1b599</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAll</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a745398d41d98d0e81a74af611430004f</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; K, V &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gae8767f0b0e20d31ee7af27a0e057bee2</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; K, Const&lt; V, v &gt; &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>ga16ec5e6f4258e1da61b9c297f97cebbc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMap&lt; GR::Edge, Const&lt; bool, true &gt; &gt;</name>
    <filename>a03433.html</filename>
    <base>MapBase&lt; GR::Edge, Const&lt; bool, true &gt; &gt;</base>
    <member kind="typedef">
      <type>GR::Edge</type>
      <name>Key</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Const&lt; bool, true &gt;</type>
      <name>Value</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a9532675f587433570548ee24a2aa440e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>ac27f63c7329551a5b298813c13e1b599</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAll</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a745398d41d98d0e81a74af611430004f</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; GR::Edge, Const&lt; bool, true &gt; &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gae8767f0b0e20d31ee7af27a0e057bee2</anchor>
      <arglist>(const Const&lt; bool, true &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; GR::Edge, Const&lt; Const&lt; bool, true &gt;, v &gt; &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>ga16ec5e6f4258e1da61b9c297f97cebbc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ConstMap&lt; K, Const&lt; V, v &gt; &gt;</name>
    <filename>a03441.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>v</templarg>
    <base>lemon::MapBase</base>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a03441.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a03441.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03441.html</anchorfile>
      <anchor>a9532675f587433570548ee24a2aa440e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03441.html</anchorfile>
      <anchor>a2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03441.html</anchorfile>
      <anchor>a46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMap&lt; typename DGR::Node, Const&lt; bool, true &gt; &gt;</name>
    <filename>a03433.html</filename>
    <base>MapBase&lt; typename DGR::Node, Const&lt; bool, true &gt; &gt;</base>
    <member kind="typedef">
      <type>typename DGR::Node</type>
      <name>Key</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Const&lt; bool, true &gt;</type>
      <name>Value</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a9532675f587433570548ee24a2aa440e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>ac27f63c7329551a5b298813c13e1b599</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAll</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a745398d41d98d0e81a74af611430004f</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; typename DGR::Node, Const&lt; bool, true &gt; &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gae8767f0b0e20d31ee7af27a0e057bee2</anchor>
      <arglist>(const Const&lt; bool, true &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; typename DGR::Node, Const&lt; Const&lt; bool, true &gt;, v &gt; &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>ga16ec5e6f4258e1da61b9c297f97cebbc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMap&lt; typename Digraph::Arc, Const&lt; bool, true &gt; &gt;</name>
    <filename>a03433.html</filename>
    <base>MapBase&lt; typename Digraph::Arc, Const&lt; bool, true &gt; &gt;</base>
    <member kind="typedef">
      <type>typename Digraph::Arc</type>
      <name>Key</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Const&lt; bool, true &gt;</type>
      <name>Value</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a9532675f587433570548ee24a2aa440e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>ac27f63c7329551a5b298813c13e1b599</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAll</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a745398d41d98d0e81a74af611430004f</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; typename Digraph::Arc, Const&lt; bool, true &gt; &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gae8767f0b0e20d31ee7af27a0e057bee2</anchor>
      <arglist>(const Const&lt; bool, true &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; typename Digraph::Arc, Const&lt; Const&lt; bool, true &gt;, v &gt; &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>ga16ec5e6f4258e1da61b9c297f97cebbc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMap&lt; typename GR::Edge, Const&lt; bool, true &gt; &gt;</name>
    <filename>a03433.html</filename>
    <base>MapBase&lt; typename GR::Edge, Const&lt; bool, true &gt; &gt;</base>
    <member kind="typedef">
      <type>typename GR::Edge</type>
      <name>Key</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Const&lt; bool, true &gt;</type>
      <name>Value</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a9532675f587433570548ee24a2aa440e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>ac27f63c7329551a5b298813c13e1b599</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAll</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a745398d41d98d0e81a74af611430004f</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; typename GR::Edge, Const&lt; bool, true &gt; &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gae8767f0b0e20d31ee7af27a0e057bee2</anchor>
      <arglist>(const Const&lt; bool, true &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; typename GR::Edge, Const&lt; Const&lt; bool, true &gt;, v &gt; &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>ga16ec5e6f4258e1da61b9c297f97cebbc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMap&lt; typename GR::Node, Const&lt; bool, true &gt; &gt;</name>
    <filename>a03433.html</filename>
    <base>MapBase&lt; typename GR::Node, Const&lt; bool, true &gt; &gt;</base>
    <member kind="typedef">
      <type>typename GR::Node</type>
      <name>Key</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Const&lt; bool, true &gt;</type>
      <name>Value</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a9532675f587433570548ee24a2aa440e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>ac27f63c7329551a5b298813c13e1b599</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAll</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a745398d41d98d0e81a74af611430004f</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; typename GR::Node, Const&lt; bool, true &gt; &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gae8767f0b0e20d31ee7af27a0e057bee2</anchor>
      <arglist>(const Const&lt; bool, true &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; typename GR::Node, Const&lt; Const&lt; bool, true &gt;, v &gt; &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>ga16ec5e6f4258e1da61b9c297f97cebbc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMap&lt; typename Graph::Arc, double &gt;</name>
    <filename>a03433.html</filename>
    <base>MapBase&lt; typename Graph::Arc, double &gt;</base>
    <member kind="typedef">
      <type>typename Graph::Arc</type>
      <name>Key</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Value</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a9532675f587433570548ee24a2aa440e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>ac27f63c7329551a5b298813c13e1b599</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAll</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a745398d41d98d0e81a74af611430004f</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; typename Graph::Arc, double &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gae8767f0b0e20d31ee7af27a0e057bee2</anchor>
      <arglist>(const double &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; typename Graph::Arc, Const&lt; double, v &gt; &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>ga16ec5e6f4258e1da61b9c297f97cebbc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMap&lt; typename Graph::Arc, lemon::Color &gt;</name>
    <filename>a03433.html</filename>
    <base>MapBase&lt; typename Graph::Arc, lemon::Color &gt;</base>
    <member kind="typedef">
      <type>typename Graph::Arc</type>
      <name>Key</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lemon::Color</type>
      <name>Value</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a9532675f587433570548ee24a2aa440e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>ac27f63c7329551a5b298813c13e1b599</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAll</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a745398d41d98d0e81a74af611430004f</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; typename Graph::Arc, lemon::Color &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gae8767f0b0e20d31ee7af27a0e057bee2</anchor>
      <arglist>(const lemon::Color &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; typename Graph::Arc, Const&lt; lemon::Color, v &gt; &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>ga16ec5e6f4258e1da61b9c297f97cebbc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMap&lt; typename Graph::Node, bool &gt;</name>
    <filename>a03433.html</filename>
    <base>MapBase&lt; typename Graph::Node, bool &gt;</base>
    <member kind="typedef">
      <type>typename Graph::Node</type>
      <name>Key</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>Value</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a9532675f587433570548ee24a2aa440e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>ac27f63c7329551a5b298813c13e1b599</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAll</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a745398d41d98d0e81a74af611430004f</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; typename Graph::Node, bool &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gae8767f0b0e20d31ee7af27a0e057bee2</anchor>
      <arglist>(const bool &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; typename Graph::Node, Const&lt; bool, v &gt; &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>ga16ec5e6f4258e1da61b9c297f97cebbc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMap&lt; typename Graph::Node, dim2::Point&lt; double &gt; &gt;</name>
    <filename>a03433.html</filename>
    <base>MapBase&lt; typename Graph::Node, dim2::Point&lt; double &gt; &gt;</base>
    <member kind="typedef">
      <type>typename Graph::Node</type>
      <name>Key</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dim2::Point&lt; double &gt;</type>
      <name>Value</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a9532675f587433570548ee24a2aa440e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>ac27f63c7329551a5b298813c13e1b599</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAll</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a745398d41d98d0e81a74af611430004f</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; typename Graph::Node, dim2::Point&lt; double &gt; &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gae8767f0b0e20d31ee7af27a0e057bee2</anchor>
      <arglist>(const dim2::Point&lt; double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; typename Graph::Node, Const&lt; dim2::Point&lt; double &gt;, v &gt; &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>ga16ec5e6f4258e1da61b9c297f97cebbc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMap&lt; typename Graph::Node, double &gt;</name>
    <filename>a03433.html</filename>
    <base>MapBase&lt; typename Graph::Node, double &gt;</base>
    <member kind="typedef">
      <type>typename Graph::Node</type>
      <name>Key</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Value</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a9532675f587433570548ee24a2aa440e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>ac27f63c7329551a5b298813c13e1b599</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAll</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a745398d41d98d0e81a74af611430004f</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; typename Graph::Node, double &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gae8767f0b0e20d31ee7af27a0e057bee2</anchor>
      <arglist>(const double &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; typename Graph::Node, Const&lt; double, v &gt; &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>ga16ec5e6f4258e1da61b9c297f97cebbc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMap&lt; typename Graph::Node, int &gt;</name>
    <filename>a03433.html</filename>
    <base>MapBase&lt; typename Graph::Node, int &gt;</base>
    <member kind="typedef">
      <type>typename Graph::Node</type>
      <name>Key</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Value</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a9532675f587433570548ee24a2aa440e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>ac27f63c7329551a5b298813c13e1b599</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAll</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a745398d41d98d0e81a74af611430004f</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; typename Graph::Node, int &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gae8767f0b0e20d31ee7af27a0e057bee2</anchor>
      <arglist>(const int &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; typename Graph::Node, Const&lt; int, v &gt; &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>ga16ec5e6f4258e1da61b9c297f97cebbc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMap&lt; typename Graph::Node, lemon::Color &gt;</name>
    <filename>a03433.html</filename>
    <base>MapBase&lt; typename Graph::Node, lemon::Color &gt;</base>
    <member kind="typedef">
      <type>typename Graph::Node</type>
      <name>Key</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lemon::Color</type>
      <name>Value</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a9532675f587433570548ee24a2aa440e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMap</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>ac27f63c7329551a5b298813c13e1b599</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAll</name>
      <anchorfile>a03433.html</anchorfile>
      <anchor>a745398d41d98d0e81a74af611430004f</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; typename Graph::Node, lemon::Color &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gae8767f0b0e20d31ee7af27a0e057bee2</anchor>
      <arglist>(const lemon::Color &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; typename Graph::Node, Const&lt; lemon::Color, v &gt; &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>ga16ec5e6f4258e1da61b9c297f97cebbc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::LpBase::Constr</name>
    <filename>a03373.html</filename>
    <member kind="function">
      <type></type>
      <name>Constr</name>
      <anchorfile>a03373.html</anchorfile>
      <anchor>a576a596598827f586a2ab82ae3e07d31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Constr</name>
      <anchorfile>a03373.html</anchorfile>
      <anchor>a623d3a439f88505872161d283b760eee</anchor>
      <arglist>(Value lb, const Expr &amp;e, Value ub)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a03373.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Expr &amp;</type>
      <name>expr</name>
      <anchorfile>a03373.html</anchorfile>
      <anchor>ae58c18a4a08116d6ae44604605066507</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Expr &amp;</type>
      <name>expr</name>
      <anchorfile>a03373.html</anchorfile>
      <anchor>a286c59c480843dca8a5e6c44bee4d6dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>lowerBound</name>
      <anchorfile>a03373.html</anchorfile>
      <anchor>acd1259eac31191e948eeb2c7d988107f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>lowerBound</name>
      <anchorfile>a03373.html</anchorfile>
      <anchor>abdf699869e5f74bfa4479bdbd75f101f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>upperBound</name>
      <anchorfile>a03373.html</anchorfile>
      <anchor>af89ee4ef9d1857a45cb0189a98550b7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>upperBound</name>
      <anchorfile>a03373.html</anchorfile>
      <anchor>a492568d1666cba3b2bdb9581c88d4e3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lowerBounded</name>
      <anchorfile>a03373.html</anchorfile>
      <anchor>ac3af82fc2c97843e974e1ee79baace94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>upperBounded</name>
      <anchorfile>a03373.html</anchorfile>
      <anchor>a0a81d0be9a1be5959b8c00dd67ca9c7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LpBase::Constr</type>
      <name>operator&lt;=</name>
      <anchorfile>a03373.html</anchorfile>
      <anchor>aba05c19e3728edb9820af4891bd9e514</anchor>
      <arglist>(const LpBase::Expr &amp;e, const LpBase::Expr &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>LpBase::Constr</type>
      <name>operator&lt;=</name>
      <anchorfile>a03373.html</anchorfile>
      <anchor>a3a6d494d96bd77cd35d2aefbf0d817d6</anchor>
      <arglist>(const LpBase::Value &amp;e, const LpBase::Expr &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>LpBase::Constr</type>
      <name>operator&lt;=</name>
      <anchorfile>a03373.html</anchorfile>
      <anchor>acb01b31e7969cba02f0bdb9e510630c1</anchor>
      <arglist>(const LpBase::Expr &amp;e, const LpBase::Value &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>LpBase::Constr</type>
      <name>operator&gt;=</name>
      <anchorfile>a03373.html</anchorfile>
      <anchor>a78444c6379b70fe3160f65a7df0b0db8</anchor>
      <arglist>(const LpBase::Expr &amp;e, const LpBase::Expr &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>LpBase::Constr</type>
      <name>operator&gt;=</name>
      <anchorfile>a03373.html</anchorfile>
      <anchor>ad1a4be06877b77f023219ea329646f70</anchor>
      <arglist>(const LpBase::Value &amp;e, const LpBase::Expr &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>LpBase::Constr</type>
      <name>operator&gt;=</name>
      <anchorfile>a03373.html</anchorfile>
      <anchor>a5c753591c58902ddfffac5926b3312f2</anchor>
      <arglist>(const LpBase::Expr &amp;e, const LpBase::Value &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>LpBase::Constr</type>
      <name>operator==</name>
      <anchorfile>a03373.html</anchorfile>
      <anchor>a33cd989df3b6f11babefd0aa1f0e116a</anchor>
      <arglist>(const LpBase::Expr &amp;e, const LpBase::Value &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>LpBase::Constr</type>
      <name>operator==</name>
      <anchorfile>a03373.html</anchorfile>
      <anchor>abb6f822ab9e2703ee89d33560c4a31e8</anchor>
      <arglist>(const LpBase::Expr &amp;e, const LpBase::Expr &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>LpBase::Constr</type>
      <name>operator&lt;=</name>
      <anchorfile>a03373.html</anchorfile>
      <anchor>af2a4b8210c5e3ffaea64c34723c25ad2</anchor>
      <arglist>(const LpBase::Value &amp;n, const LpBase::Constr &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>LpBase::Constr</type>
      <name>operator&lt;=</name>
      <anchorfile>a03373.html</anchorfile>
      <anchor>a9632e192a5e7ea45bf320dfdb41a6a46</anchor>
      <arglist>(const LpBase::Constr &amp;c, const LpBase::Value &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>LpBase::Constr</type>
      <name>operator&gt;=</name>
      <anchorfile>a03373.html</anchorfile>
      <anchor>abcef5c1c71de61abbdfd7948a38dae9e</anchor>
      <arglist>(const LpBase::Value &amp;n, const LpBase::Constr &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>LpBase::Constr</type>
      <name>operator&gt;=</name>
      <anchorfile>a03373.html</anchorfile>
      <anchor>a1c2da2fff256f10cdeec8cd0967433c1</anchor>
      <arglist>(const LpBase::Constr &amp;c, const LpBase::Value &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::dim2::ConstXMap</name>
    <filename>a02409.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ConstXMap</name>
      <anchorfile>a02409.html</anchorfile>
      <anchor>aad7bf966e445ba324e3cdab5a2fb4389</anchor>
      <arglist>(const M &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>ConstXMap&lt; M &gt;</type>
      <name>xMap</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>ga089526b0c8613c8167ee758056c79672</anchor>
      <arglist>(const M &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::dim2::ConstYMap</name>
    <filename>a02417.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ConstYMap</name>
      <anchorfile>a02417.html</anchorfile>
      <anchor>a2119ed51dd7d2b9b643ea062b545342f</anchor>
      <arglist>(const M &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>ConstYMap&lt; M &gt;</type>
      <name>yMap</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>gacd6c062290503f0e72b7ff1e3ac82bcd</anchor>
      <arglist>(const M &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ConvertMap</name>
    <filename>a03473.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>MapBase&lt; M::Key, V &gt;</base>
    <member kind="typedef">
      <type>M::Key</type>
      <name>Key</name>
      <anchorfile>a03473.html</anchorfile>
      <anchor>a8c5e944591efa8f8f0d64cf81950abcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a03473.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvertMap</name>
      <anchorfile>a03473.html</anchorfile>
      <anchor>a79f8b6b95303fb618dae9c43330b5ee4</anchor>
      <arglist>(const M &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03473.html</anchorfile>
      <anchor>a8de1b13f44fab45faa8daa93027f9df2</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>ConvertMap&lt; M, V &gt;</type>
      <name>convertMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga4abd9551cd490eec5bec69576d4a6dbb</anchor>
      <arglist>(const M &amp;map)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::CostScaling</name>
    <filename>a02137.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>lowerMap</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a73716786403308acf826049db4fcae5a</anchor>
      <arglist>(const LowerMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>upperMap</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a2ba20715de6a3fe3a93086f59bd41b1f</anchor>
      <arglist>(const UpperMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>costMap</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a3289d8da25c7c41bf2019e219a207c57</anchor>
      <arglist>(const CostMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>supplyMap</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>aaed44b74b82792e31be304ec0b84dfad</anchor>
      <arglist>(const SupplyMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>stSupply</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a606e5cc8a41acd2f6f0998c096e79a0d</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t, Value k)</arglist>
    </member>
    <member kind="function">
      <type>ProblemType</type>
      <name>run</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a1f864136a21e6ad70a82f14d6560ee7e</anchor>
      <arglist>(Method method=PARTIAL_AUGMENT, int factor=16)</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>resetParams</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a3da4b33bee24846e97c4fad32696d7b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>reset</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>aec24c3696fc3c1818effd0523dffa452</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Number</type>
      <name>totalCost</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a484c946e8ad38f8c0b419c84637140d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a1a77ac91887d3ea35df58e98b13e6fd4</anchor>
      <arglist>(const Arc &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flowMap</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>aa2ea9eb67aee0565ecdbaeb537eb8b46</anchor>
      <arglist>(FlowMap &amp;map) const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>potential</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>ac291424bc8234750625d26b984442150</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>potentialMap</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a0c1faa3dd3a44ffe90e51af832ec7804</anchor>
      <arglist>(PotentialMap &amp;map) const</arglist>
    </member>
    <class kind="struct">lemon::CostScaling::SetLargeCost</class>
    <member kind="enumeration">
      <type></type>
      <name>ProblemType</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2884fa43446c0cbc9c7a9b74d41d7483</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2579881e7c83261bc21bafb5a5c92cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBOUNDED</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea6c65123d1b5b01632a477661055b01ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Method</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a2a3c0067e44c5ef3210a256d06c16b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PUSH</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a2a3c0067e44c5ef3210a256d06c16b0fad263caec619c4d99e4684ba0fabd9493</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AUGMENT</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a2a3c0067e44c5ef3210a256d06c16b0facd2e1aa2398886ced14024f626167b10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARTIAL_AUGMENT</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a2a3c0067e44c5ef3210a256d06c16b0fad4476e3f57a85ac799fa83de6730c665</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Value</type>
      <name>Value</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>aa2042899ede28a8f6f0fdceb92a7d3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Cost</type>
      <name>Cost</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a9142822eba184f2778b6aac70b0900b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LargeCost</type>
      <name>LargeCost</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a7f34159326618acfb683317c3df26662</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR</type>
      <name>Traits</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2884fa43446c0cbc9c7a9b74d41d7483</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2579881e7c83261bc21bafb5a5c92cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBOUNDED</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea6c65123d1b5b01632a477661055b01ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PUSH</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a2a3c0067e44c5ef3210a256d06c16b0fad263caec619c4d99e4684ba0fabd9493</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AUGMENT</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a2a3c0067e44c5ef3210a256d06c16b0facd2e1aa2398886ced14024f626167b10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARTIAL_AUGMENT</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a2a3c0067e44c5ef3210a256d06c16b0fad4476e3f57a85ac799fa83de6730c665</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CostScaling</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>aef36da2d5f6a91d3c945078c91a00f29</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>lowerMap</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a73716786403308acf826049db4fcae5a</anchor>
      <arglist>(const LowerMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>upperMap</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a2ba20715de6a3fe3a93086f59bd41b1f</anchor>
      <arglist>(const UpperMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>costMap</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a3289d8da25c7c41bf2019e219a207c57</anchor>
      <arglist>(const CostMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>supplyMap</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>aaed44b74b82792e31be304ec0b84dfad</anchor>
      <arglist>(const SupplyMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>stSupply</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a606e5cc8a41acd2f6f0998c096e79a0d</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t, Value k)</arglist>
    </member>
    <member kind="function">
      <type>ProblemType</type>
      <name>run</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a1f864136a21e6ad70a82f14d6560ee7e</anchor>
      <arglist>(Method method=PARTIAL_AUGMENT, int factor=16)</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>resetParams</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a3da4b33bee24846e97c4fad32696d7b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>reset</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>aec24c3696fc3c1818effd0523dffa452</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Number</type>
      <name>totalCost</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a484c946e8ad38f8c0b419c84637140d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a1a77ac91887d3ea35df58e98b13e6fd4</anchor>
      <arglist>(const Arc &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flowMap</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>aa2ea9eb67aee0565ecdbaeb537eb8b46</anchor>
      <arglist>(FlowMap &amp;map) const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>potential</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>ac291424bc8234750625d26b984442150</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>potentialMap</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a0c1faa3dd3a44ffe90e51af832ec7804</anchor>
      <arglist>(PotentialMap &amp;map) const</arglist>
    </member>
    <member kind="variable">
      <type>const Value</type>
      <name>INF</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a601ffd79f13610daacadd46f973507c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>startAugment</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a5f0ba940293922c1175f599af9b5490e</anchor>
      <arglist>(int max_length)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>startPush</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a0d8a4c20a6226e471b185f33b68eadb1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CostScaling&lt; GR, V, C, SetLargeCostTraits&lt; T &gt; &gt;</name>
    <filename>a02137.html</filename>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>lowerMap</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a73716786403308acf826049db4fcae5a</anchor>
      <arglist>(const LowerMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>upperMap</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a2ba20715de6a3fe3a93086f59bd41b1f</anchor>
      <arglist>(const UpperMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>costMap</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a3289d8da25c7c41bf2019e219a207c57</anchor>
      <arglist>(const CostMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>supplyMap</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>aaed44b74b82792e31be304ec0b84dfad</anchor>
      <arglist>(const SupplyMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>stSupply</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a606e5cc8a41acd2f6f0998c096e79a0d</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t, Value k)</arglist>
    </member>
    <member kind="function">
      <type>ProblemType</type>
      <name>run</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a1f864136a21e6ad70a82f14d6560ee7e</anchor>
      <arglist>(Method method=PARTIAL_AUGMENT, int factor=16)</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>resetParams</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a3da4b33bee24846e97c4fad32696d7b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>reset</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>aec24c3696fc3c1818effd0523dffa452</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Number</type>
      <name>totalCost</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a484c946e8ad38f8c0b419c84637140d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a1a77ac91887d3ea35df58e98b13e6fd4</anchor>
      <arglist>(const Arc &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flowMap</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>aa2ea9eb67aee0565ecdbaeb537eb8b46</anchor>
      <arglist>(FlowMap &amp;map) const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>potential</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>ac291424bc8234750625d26b984442150</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>potentialMap</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a0c1faa3dd3a44ffe90e51af832ec7804</anchor>
      <arglist>(PotentialMap &amp;map) const</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ProblemType</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Method</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a2a3c0067e44c5ef3210a256d06c16b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Value</type>
      <name>Value</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>aa2042899ede28a8f6f0fdceb92a7d3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Cost</type>
      <name>Cost</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a9142822eba184f2778b6aac70b0900b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LargeCost</type>
      <name>LargeCost</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a7f34159326618acfb683317c3df26662</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetLargeCostTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2884fa43446c0cbc9c7a9b74d41d7483</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2579881e7c83261bc21bafb5a5c92cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBOUNDED</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea6c65123d1b5b01632a477661055b01ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PUSH</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a2a3c0067e44c5ef3210a256d06c16b0fad263caec619c4d99e4684ba0fabd9493</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AUGMENT</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a2a3c0067e44c5ef3210a256d06c16b0facd2e1aa2398886ced14024f626167b10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARTIAL_AUGMENT</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a2a3c0067e44c5ef3210a256d06c16b0fad4476e3f57a85ac799fa83de6730c665</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CostScaling</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>aef36da2d5f6a91d3c945078c91a00f29</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>lowerMap</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a73716786403308acf826049db4fcae5a</anchor>
      <arglist>(const LowerMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>upperMap</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a2ba20715de6a3fe3a93086f59bd41b1f</anchor>
      <arglist>(const UpperMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>costMap</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a3289d8da25c7c41bf2019e219a207c57</anchor>
      <arglist>(const CostMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>supplyMap</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>aaed44b74b82792e31be304ec0b84dfad</anchor>
      <arglist>(const SupplyMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>stSupply</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a606e5cc8a41acd2f6f0998c096e79a0d</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t, Value k)</arglist>
    </member>
    <member kind="function">
      <type>ProblemType</type>
      <name>run</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a1f864136a21e6ad70a82f14d6560ee7e</anchor>
      <arglist>(Method method=PARTIAL_AUGMENT, int factor=16)</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>resetParams</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a3da4b33bee24846e97c4fad32696d7b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CostScaling &amp;</type>
      <name>reset</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>aec24c3696fc3c1818effd0523dffa452</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Number</type>
      <name>totalCost</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a484c946e8ad38f8c0b419c84637140d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a1a77ac91887d3ea35df58e98b13e6fd4</anchor>
      <arglist>(const Arc &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flowMap</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>aa2ea9eb67aee0565ecdbaeb537eb8b46</anchor>
      <arglist>(FlowMap &amp;map) const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>potential</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>ac291424bc8234750625d26b984442150</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>potentialMap</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a0c1faa3dd3a44ffe90e51af832ec7804</anchor>
      <arglist>(PotentialMap &amp;map) const</arglist>
    </member>
    <member kind="variable">
      <type>const Value</type>
      <name>INF</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a601ffd79f13610daacadd46f973507c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>startAugment</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a5f0ba940293922c1175f599af9b5490e</anchor>
      <arglist>(int max_length)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>startPush</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a0d8a4c20a6226e471b185f33b68eadb1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::CostScalingDefaultTraits</name>
    <filename>a02129.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>Cost</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>adeb81a88e6bbaf933ca20ea3bbba7a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>LargeCost</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>abb5b2df15a07785723c3202702c06a65</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::Counter</name>
    <filename>a02161.html</filename>
    <member kind="typedef">
      <type>_SubCounter&lt; Counter &gt;</type>
      <name>SubCounter</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a85506a22a53d73d9d211f6a97912b6f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_NoSubCounter&lt; Counter &gt;</type>
      <name>NoSubCounter</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a1a0261ef4a0c51f79191ad4597e2cd81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Counter</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>ae1666ee5f8d8cf588500c65a9935c4fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Counter</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a837a4f6c542af203bc3b5d49d0288220</anchor>
      <arglist>(std::string title, std::ostream &amp;os=std::cerr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Counter</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>ab3194596a4d3b2fa5630e036feff4897</anchor>
      <arglist>(const char *title, std::ostream &amp;os=std::cerr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Counter</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>ad5261fa114af1e8c70c21862d857eaec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Counter &amp;</type>
      <name>operator++</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>ab1598a2acb1c3be3b168855648235e73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator++</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a5526c2c4b0fa541a50ffcaaf25e149a6</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Counter &amp;</type>
      <name>operator--</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>ae495b9da2d2ad8a4b3b6c6479a5a61b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator--</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a5496187b3dcf6064c5c0b158ab6b7264</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Counter &amp;</type>
      <name>operator+=</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>af8fc68a7c8df80c8abec43da22138159</anchor>
      <arglist>(int c)</arglist>
    </member>
    <member kind="function">
      <type>Counter &amp;</type>
      <name>operator-=</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>ac48a256851ae1729e19b1b3c409fc9ce</anchor>
      <arglist>(int c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a2cd75ed371f4cdabb3cff3d4b77bee84</anchor>
      <arglist>(int c=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a4f4ea421e40bda08a2deca657f640fea</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::CplexBase</name>
    <filename>a02177.html</filename>
    <base virtualness="virtual">lemon::LpBase</base>
    <member kind="function">
      <type>const CplexEnv &amp;</type>
      <name>env</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a36700986c4b1d46696a40a5be9f1fd91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const cpxenv *</type>
      <name>cplexEnv</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a907d65380f8bd8500ddec5d75b0d29be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cpxenv *</type>
      <name>cplexEnv</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a6898c265c956dea4cd1c62850b4940da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cpxlp *</type>
      <name>cplexLp</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>ae1d851f69016621c992d1f01c98b9a4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const cpxlp *</type>
      <name>cplexLp</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>abf54086543148d298c2980c1afc4c311</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a01fb09b584b86088a044612f90401291</anchor>
      <arglist>(std::string file, std::string format=&quot;MPS&quot;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::CplexEnv</name>
    <filename>a02169.html</filename>
    <class kind="class">lemon::CplexEnv::LicenseError</class>
    <member kind="function">
      <type></type>
      <name>CplexEnv</name>
      <anchorfile>a02169.html</anchorfile>
      <anchor>a02bd581bb5b04ed7f68844e497d8c5f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CplexEnv</name>
      <anchorfile>a02169.html</anchorfile>
      <anchor>a55676c8bcdd5d6168efe436cc8cdc47e</anchor>
      <arglist>(const CplexEnv &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CplexEnv &amp;</type>
      <name>operator=</name>
      <anchorfile>a02169.html</anchorfile>
      <anchor>a7523f60d35e342e9a1f70daf83e0ac5c</anchor>
      <arglist>(const CplexEnv &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CplexEnv</name>
      <anchorfile>a02169.html</anchorfile>
      <anchor>a3c964016341dd3a4fce8ed1e22f84b4c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::CplexLp</name>
    <filename>a02181.html</filename>
    <base>lemon::LpSolver</base>
    <base>lemon::CplexBase</base>
    <member kind="function">
      <type></type>
      <name>CplexLp</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>af8d078878fc450c02ac2149b2a0f13f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CplexLp</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>afedf81e8d97a554db5a53f0a3eef3f17</anchor>
      <arglist>(const CplexEnv &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CplexLp</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a69ef0bf0bdc30a3e48cc64a05e13d08a</anchor>
      <arglist>(const CplexLp &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CplexLp</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a5dbdb17742d0a0ffe65d037888f8f684</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CplexLp *</type>
      <name>cloneSolver</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a8ba274ae502aef2945f5964128523c4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CplexLp *</type>
      <name>newSolver</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a46cdaf8cfb974f981c631f8fba6123d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SolveExitStatus</type>
      <name>solvePrimal</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a3316441c156eb3cc78bcb835f3e86c3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SolveExitStatus</type>
      <name>solveDual</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a76f2afae9c0dcb0df8d677346129bdfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SolveExitStatus</type>
      <name>solveBarrier</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a1e69e9be293c6f7a5433e93d70065a89</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::CplexMip</name>
    <filename>a02185.html</filename>
    <base>lemon::MipSolver</base>
    <base>lemon::CplexBase</base>
    <member kind="function">
      <type></type>
      <name>CplexMip</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a6e68387a4541321452be5b423f00cf4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CplexMip</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>ac5a31290f5306ad26aaabc99ca88e254</anchor>
      <arglist>(const CplexEnv &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CplexMip</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>aeb31411f879211d796d5d9dc8a5d8f26</anchor>
      <arglist>(const CplexMip &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CplexMip</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a766aee9d3de7a22a549dd43b4b974224</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CplexMip *</type>
      <name>cloneSolver</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>ae3c6634a04ffc4d83c1c6e7226199b3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CplexMip *</type>
      <name>newSolver</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a9713ef8fd716de755e05c609ca0c1e42</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::CrossRefMap</name>
    <filename>a03577.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">lemon::CrossRefMap::InverseMap</class>
    <class kind="class">lemon::CrossRefMap::ValueIt</class>
    <member kind="typedef">
      <type>GR</type>
      <name>Graph</name>
      <anchorfile>a03577.html</anchorfile>
      <anchor>a2a51ae337b207f01f1c904f5eb2aa98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>Item</name>
      <anchorfile>a03577.html</anchorfile>
      <anchor>ac4edd56c103a7549d76b3a6b5c7bdf6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a03577.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a03577.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueIt</type>
      <name>ValueIterator</name>
      <anchorfile>a03577.html</anchorfile>
      <anchor>a75941520d3e611fdd2ffefec1f7f5775</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CrossRefMap</name>
      <anchorfile>a03577.html</anchorfile>
      <anchor>a62edc095423badf36c020aa9c2cf3f1d</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>ValueIt</type>
      <name>beginValue</name>
      <anchorfile>a03577.html</anchorfile>
      <anchor>aacb353dcd725e2cdcf4929aaabe25b67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ValueIt</type>
      <name>endValue</name>
      <anchorfile>a03577.html</anchorfile>
      <anchor>a8a0b9f15500e38df5188aeb1803a5a70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03577.html</anchorfile>
      <anchor>a886b9abb160f57c5857d573bbd323b93</anchor>
      <arglist>(const Key &amp;key, const Value &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>MapTraits&lt; Map &gt;::ConstReturnValue</type>
      <name>operator[]</name>
      <anchorfile>a03577.html</anchorfile>
      <anchor>a1f05e08a04a2587acbcf097cb308aa86</anchor>
      <arglist>(const Key &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>operator()</name>
      <anchorfile>a03577.html</anchorfile>
      <anchor>a376f9f74253040bc6a2e6bfb5ed2611f</anchor>
      <arglist>(const Value &amp;val) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count</name>
      <anchorfile>a03577.html</anchorfile>
      <anchor>a02cdde8195c149c6279e34f5d5131ab3</anchor>
      <arglist>(const Value &amp;val) const</arglist>
    </member>
    <member kind="function">
      <type>InverseMap</type>
      <name>inverse</name>
      <anchorfile>a03577.html</anchorfile>
      <anchor>a6f81d969a965dfe7eaa89a72ef11d7aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>erase</name>
      <anchorfile>a03577.html</anchorfile>
      <anchor>ac1c16351f196b9ac3a755a4974eaf304</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>erase</name>
      <anchorfile>a03577.html</anchorfile>
      <anchor>a3ad67ed0febc0f7c2ac4f9efc368c51b</anchor>
      <arglist>(const std::vector&lt; Key &gt; &amp;keys)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>a03577.html</anchorfile>
      <anchor>aae048282c7011eedc2e0492f6421ea73</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::CycleCanceling</name>
    <filename>a02189.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>CycleCanceling &amp;</type>
      <name>lowerMap</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a980391a01f804f1cd14ac58f365a07af</anchor>
      <arglist>(const LowerMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CycleCanceling &amp;</type>
      <name>upperMap</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a0ab69fe04cb7b7ad1bd77acec2c94d46</anchor>
      <arglist>(const UpperMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CycleCanceling &amp;</type>
      <name>costMap</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>ac890c26d5ecc26854000d2c1e61b8f9b</anchor>
      <arglist>(const CostMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CycleCanceling &amp;</type>
      <name>supplyMap</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a29931e78b92a8e36cf376da50c3d8abb</anchor>
      <arglist>(const SupplyMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CycleCanceling &amp;</type>
      <name>stSupply</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>ad267c7b64da13dfafef5efb8cf9e1671</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t, Value k)</arglist>
    </member>
    <member kind="function">
      <type>ProblemType</type>
      <name>run</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>ad63980373b4e743a2827d0a6a0316205</anchor>
      <arglist>(Method method=CANCEL_AND_TIGHTEN)</arglist>
    </member>
    <member kind="function">
      <type>CycleCanceling &amp;</type>
      <name>resetParams</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a1b5551dde2821381f3828bfd342cede8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CycleCanceling &amp;</type>
      <name>reset</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a9a9b71f0934567a8887a6e8c213e759b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Number</type>
      <name>totalCost</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a484c946e8ad38f8c0b419c84637140d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a1a77ac91887d3ea35df58e98b13e6fd4</anchor>
      <arglist>(const Arc &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flowMap</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>aa2ea9eb67aee0565ecdbaeb537eb8b46</anchor>
      <arglist>(FlowMap &amp;map) const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>potential</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>ac291424bc8234750625d26b984442150</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>potentialMap</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a0c1faa3dd3a44ffe90e51af832ec7804</anchor>
      <arglist>(PotentialMap &amp;map) const</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ProblemType</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2884fa43446c0cbc9c7a9b74d41d7483</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2579881e7c83261bc21bafb5a5c92cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBOUNDED</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea6c65123d1b5b01632a477661055b01ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Method</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a2a3c0067e44c5ef3210a256d06c16b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIMPLE_CYCLE_CANCELING</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a2a3c0067e44c5ef3210a256d06c16b0fa0ebf9c5c0bd3e01f5a9060478d2a7baa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MINIMUM_MEAN_CYCLE_CANCELING</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a2a3c0067e44c5ef3210a256d06c16b0fad8e15d52edef3c0ff3d27acefd621818</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CANCEL_AND_TIGHTEN</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a2a3c0067e44c5ef3210a256d06c16b0fae5674d98ba6203a143cc02984415c242</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>Cost</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>adeb81a88e6bbaf933ca20ea3bbba7a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2884fa43446c0cbc9c7a9b74d41d7483</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2579881e7c83261bc21bafb5a5c92cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBOUNDED</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea6c65123d1b5b01632a477661055b01ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIMPLE_CYCLE_CANCELING</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a2a3c0067e44c5ef3210a256d06c16b0fa0ebf9c5c0bd3e01f5a9060478d2a7baa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MINIMUM_MEAN_CYCLE_CANCELING</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a2a3c0067e44c5ef3210a256d06c16b0fad8e15d52edef3c0ff3d27acefd621818</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CANCEL_AND_TIGHTEN</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a2a3c0067e44c5ef3210a256d06c16b0fae5674d98ba6203a143cc02984415c242</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CycleCanceling</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a9781d9ac0d763defc63815da06b4b2b2</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>CycleCanceling &amp;</type>
      <name>lowerMap</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a980391a01f804f1cd14ac58f365a07af</anchor>
      <arglist>(const LowerMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CycleCanceling &amp;</type>
      <name>upperMap</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a0ab69fe04cb7b7ad1bd77acec2c94d46</anchor>
      <arglist>(const UpperMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CycleCanceling &amp;</type>
      <name>costMap</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>ac890c26d5ecc26854000d2c1e61b8f9b</anchor>
      <arglist>(const CostMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CycleCanceling &amp;</type>
      <name>supplyMap</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a29931e78b92a8e36cf376da50c3d8abb</anchor>
      <arglist>(const SupplyMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>CycleCanceling &amp;</type>
      <name>stSupply</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>ad267c7b64da13dfafef5efb8cf9e1671</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t, Value k)</arglist>
    </member>
    <member kind="function">
      <type>ProblemType</type>
      <name>run</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>ad63980373b4e743a2827d0a6a0316205</anchor>
      <arglist>(Method method=CANCEL_AND_TIGHTEN)</arglist>
    </member>
    <member kind="function">
      <type>CycleCanceling &amp;</type>
      <name>resetParams</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a1b5551dde2821381f3828bfd342cede8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CycleCanceling &amp;</type>
      <name>reset</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a9a9b71f0934567a8887a6e8c213e759b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Number</type>
      <name>totalCost</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a484c946e8ad38f8c0b419c84637140d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a1a77ac91887d3ea35df58e98b13e6fd4</anchor>
      <arglist>(const Arc &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flowMap</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>aa2ea9eb67aee0565ecdbaeb537eb8b46</anchor>
      <arglist>(FlowMap &amp;map) const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>potential</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>ac291424bc8234750625d26b984442150</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>potentialMap</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a0c1faa3dd3a44ffe90e51af832ec7804</anchor>
      <arglist>(PotentialMap &amp;map) const</arglist>
    </member>
    <member kind="variable">
      <type>const Value</type>
      <name>INF</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a601ffd79f13610daacadd46f973507c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::DefaultGraphToEpsTraits</name>
    <filename>a02741.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DefaultGraphToEpsTraits</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a5120c56fa09e7484ecd90f9d237ddebd</anchor>
      <arglist>(const GR &amp;gr, std::ostream &amp;ost=std::cout, bool pros=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::Dfs</name>
    <filename>a02201.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>processNextArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a773a0c2fc82672c4dd7af546908b8a5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OutArcIt</type>
      <name>nextArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aa3026fc409af73928e0911a6bcce9456</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aee7c286bcbfe5a9ed8c5c2a6eb73673a</anchor>
      <arglist>(const ArcBoolMap &amp;am)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dist</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>afbc3a17afda5db46b3c0821d0aed3a21</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <class kind="struct">lemon::Dfs::SetDistMap</class>
    <class kind="struct">lemon::Dfs::SetPredMap</class>
    <class kind="struct">lemon::Dfs::SetProcessedMap</class>
    <class kind="struct">lemon::Dfs::SetReachedMap</class>
    <class kind="struct">lemon::Dfs::SetStandardProcessedMap</class>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>adc9638061e7acac70160feb0ea49c29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::DistMap</type>
      <name>DistMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ad6d9c2819f215994ded26fbe42e2fd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ReachedMap</type>
      <name>ReachedMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>af23453a839e62b3dcc311e0a839e31ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a43e332c55acc2c5cb99d35ff40accab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PredMapPath&lt; Digraph, PredMap &gt;</type>
      <name>Path</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a4d7ae5a0651af9c9cfadd1462718979d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR</type>
      <name>Traits</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dfs</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a77e8d05a88fdbd6eadbc7b562e642c22</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Dfs</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a0853bb5f644e1434ff68eac70b1dd63c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Dfs &amp;</type>
      <name>predMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a0ed6678f822688fc2d17e625400819b0</anchor>
      <arglist>(PredMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dfs &amp;</type>
      <name>reachedMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a48fac08b556d545572afe15b39af820c</anchor>
      <arglist>(ReachedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dfs &amp;</type>
      <name>processedMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a3e278058f34be77a47e2a7ba4f9c12dc</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dfs &amp;</type>
      <name>distMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a67d147d1e125d3a56e49ddd920c1bc98</anchor>
      <arglist>(DistMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>processNextArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a773a0c2fc82672c4dd7af546908b8a5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OutArcIt</type>
      <name>nextArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aa3026fc409af73928e0911a6bcce9456</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aee7c286bcbfe5a9ed8c5c2a6eb73673a</anchor>
      <arglist>(const ArcBoolMap &amp;am)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dist</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>afbc3a17afda5db46b3c0821d0aed3a21</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dfs&lt; Digraph, SetDistMapTraits&lt; T &gt; &gt;</name>
    <filename>a02201.html</filename>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dist</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>afbc3a17afda5db46b3c0821d0aed3a21</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>processNextArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a773a0c2fc82672c4dd7af546908b8a5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OutArcIt</type>
      <name>nextArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aa3026fc409af73928e0911a6bcce9456</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aee7c286bcbfe5a9ed8c5c2a6eb73673a</anchor>
      <arglist>(const ArcBoolMap &amp;am)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>adc9638061e7acac70160feb0ea49c29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::DistMap</type>
      <name>DistMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ad6d9c2819f215994ded26fbe42e2fd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ReachedMap</type>
      <name>ReachedMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>af23453a839e62b3dcc311e0a839e31ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a43e332c55acc2c5cb99d35ff40accab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PredMapPath&lt; Digraph, PredMap &gt;</type>
      <name>Path</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a4d7ae5a0651af9c9cfadd1462718979d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetDistMapTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dfs</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a77e8d05a88fdbd6eadbc7b562e642c22</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Dfs</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a0853bb5f644e1434ff68eac70b1dd63c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Dfs &amp;</type>
      <name>predMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a0ed6678f822688fc2d17e625400819b0</anchor>
      <arglist>(PredMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dfs &amp;</type>
      <name>reachedMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a48fac08b556d545572afe15b39af820c</anchor>
      <arglist>(ReachedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dfs &amp;</type>
      <name>processedMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a3e278058f34be77a47e2a7ba4f9c12dc</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dfs &amp;</type>
      <name>distMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a67d147d1e125d3a56e49ddd920c1bc98</anchor>
      <arglist>(DistMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dist</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>afbc3a17afda5db46b3c0821d0aed3a21</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>processNextArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a773a0c2fc82672c4dd7af546908b8a5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OutArcIt</type>
      <name>nextArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aa3026fc409af73928e0911a6bcce9456</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aee7c286bcbfe5a9ed8c5c2a6eb73673a</anchor>
      <arglist>(const ArcBoolMap &amp;am)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dfs&lt; Digraph, SetPredMapTraits&lt; T &gt; &gt;</name>
    <filename>a02201.html</filename>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dist</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>afbc3a17afda5db46b3c0821d0aed3a21</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>processNextArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a773a0c2fc82672c4dd7af546908b8a5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OutArcIt</type>
      <name>nextArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aa3026fc409af73928e0911a6bcce9456</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aee7c286bcbfe5a9ed8c5c2a6eb73673a</anchor>
      <arglist>(const ArcBoolMap &amp;am)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>adc9638061e7acac70160feb0ea49c29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::DistMap</type>
      <name>DistMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ad6d9c2819f215994ded26fbe42e2fd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ReachedMap</type>
      <name>ReachedMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>af23453a839e62b3dcc311e0a839e31ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a43e332c55acc2c5cb99d35ff40accab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PredMapPath&lt; Digraph, PredMap &gt;</type>
      <name>Path</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a4d7ae5a0651af9c9cfadd1462718979d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetPredMapTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dfs</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a77e8d05a88fdbd6eadbc7b562e642c22</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Dfs</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a0853bb5f644e1434ff68eac70b1dd63c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Dfs &amp;</type>
      <name>predMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a0ed6678f822688fc2d17e625400819b0</anchor>
      <arglist>(PredMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dfs &amp;</type>
      <name>reachedMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a48fac08b556d545572afe15b39af820c</anchor>
      <arglist>(ReachedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dfs &amp;</type>
      <name>processedMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a3e278058f34be77a47e2a7ba4f9c12dc</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dfs &amp;</type>
      <name>distMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a67d147d1e125d3a56e49ddd920c1bc98</anchor>
      <arglist>(DistMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dist</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>afbc3a17afda5db46b3c0821d0aed3a21</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>processNextArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a773a0c2fc82672c4dd7af546908b8a5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OutArcIt</type>
      <name>nextArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aa3026fc409af73928e0911a6bcce9456</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aee7c286bcbfe5a9ed8c5c2a6eb73673a</anchor>
      <arglist>(const ArcBoolMap &amp;am)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dfs&lt; Digraph, SetProcessedMapTraits&lt; T &gt; &gt;</name>
    <filename>a02201.html</filename>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dist</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>afbc3a17afda5db46b3c0821d0aed3a21</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>processNextArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a773a0c2fc82672c4dd7af546908b8a5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OutArcIt</type>
      <name>nextArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aa3026fc409af73928e0911a6bcce9456</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aee7c286bcbfe5a9ed8c5c2a6eb73673a</anchor>
      <arglist>(const ArcBoolMap &amp;am)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>adc9638061e7acac70160feb0ea49c29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::DistMap</type>
      <name>DistMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ad6d9c2819f215994ded26fbe42e2fd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ReachedMap</type>
      <name>ReachedMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>af23453a839e62b3dcc311e0a839e31ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a43e332c55acc2c5cb99d35ff40accab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PredMapPath&lt; Digraph, PredMap &gt;</type>
      <name>Path</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a4d7ae5a0651af9c9cfadd1462718979d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetProcessedMapTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dfs</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a77e8d05a88fdbd6eadbc7b562e642c22</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Dfs</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a0853bb5f644e1434ff68eac70b1dd63c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Dfs &amp;</type>
      <name>predMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a0ed6678f822688fc2d17e625400819b0</anchor>
      <arglist>(PredMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dfs &amp;</type>
      <name>reachedMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a48fac08b556d545572afe15b39af820c</anchor>
      <arglist>(ReachedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dfs &amp;</type>
      <name>processedMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a3e278058f34be77a47e2a7ba4f9c12dc</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dfs &amp;</type>
      <name>distMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a67d147d1e125d3a56e49ddd920c1bc98</anchor>
      <arglist>(DistMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dist</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>afbc3a17afda5db46b3c0821d0aed3a21</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>processNextArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a773a0c2fc82672c4dd7af546908b8a5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OutArcIt</type>
      <name>nextArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aa3026fc409af73928e0911a6bcce9456</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aee7c286bcbfe5a9ed8c5c2a6eb73673a</anchor>
      <arglist>(const ArcBoolMap &amp;am)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dfs&lt; Digraph, SetReachedMapTraits&lt; T &gt; &gt;</name>
    <filename>a02201.html</filename>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dist</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>afbc3a17afda5db46b3c0821d0aed3a21</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>processNextArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a773a0c2fc82672c4dd7af546908b8a5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OutArcIt</type>
      <name>nextArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aa3026fc409af73928e0911a6bcce9456</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aee7c286bcbfe5a9ed8c5c2a6eb73673a</anchor>
      <arglist>(const ArcBoolMap &amp;am)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>adc9638061e7acac70160feb0ea49c29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::DistMap</type>
      <name>DistMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ad6d9c2819f215994ded26fbe42e2fd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ReachedMap</type>
      <name>ReachedMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>af23453a839e62b3dcc311e0a839e31ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a43e332c55acc2c5cb99d35ff40accab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PredMapPath&lt; Digraph, PredMap &gt;</type>
      <name>Path</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a4d7ae5a0651af9c9cfadd1462718979d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetReachedMapTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dfs</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a77e8d05a88fdbd6eadbc7b562e642c22</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Dfs</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a0853bb5f644e1434ff68eac70b1dd63c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Dfs &amp;</type>
      <name>predMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a0ed6678f822688fc2d17e625400819b0</anchor>
      <arglist>(PredMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dfs &amp;</type>
      <name>reachedMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a48fac08b556d545572afe15b39af820c</anchor>
      <arglist>(ReachedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dfs &amp;</type>
      <name>processedMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a3e278058f34be77a47e2a7ba4f9c12dc</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dfs &amp;</type>
      <name>distMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a67d147d1e125d3a56e49ddd920c1bc98</anchor>
      <arglist>(DistMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dist</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>afbc3a17afda5db46b3c0821d0aed3a21</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>processNextArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a773a0c2fc82672c4dd7af546908b8a5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OutArcIt</type>
      <name>nextArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aa3026fc409af73928e0911a6bcce9456</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aee7c286bcbfe5a9ed8c5c2a6eb73673a</anchor>
      <arglist>(const ArcBoolMap &amp;am)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dfs&lt; Digraph, SetStandardProcessedMapTraits &gt;</name>
    <filename>a02201.html</filename>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dist</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>afbc3a17afda5db46b3c0821d0aed3a21</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>processNextArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a773a0c2fc82672c4dd7af546908b8a5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OutArcIt</type>
      <name>nextArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aa3026fc409af73928e0911a6bcce9456</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aee7c286bcbfe5a9ed8c5c2a6eb73673a</anchor>
      <arglist>(const ArcBoolMap &amp;am)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>adc9638061e7acac70160feb0ea49c29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::DistMap</type>
      <name>DistMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ad6d9c2819f215994ded26fbe42e2fd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ReachedMap</type>
      <name>ReachedMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>af23453a839e62b3dcc311e0a839e31ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a43e332c55acc2c5cb99d35ff40accab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PredMapPath&lt; Digraph, PredMap &gt;</type>
      <name>Path</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a4d7ae5a0651af9c9cfadd1462718979d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetStandardProcessedMapTraits</type>
      <name>Traits</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dfs</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a77e8d05a88fdbd6eadbc7b562e642c22</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Dfs</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a0853bb5f644e1434ff68eac70b1dd63c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Dfs &amp;</type>
      <name>predMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a0ed6678f822688fc2d17e625400819b0</anchor>
      <arglist>(PredMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dfs &amp;</type>
      <name>reachedMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a48fac08b556d545572afe15b39af820c</anchor>
      <arglist>(ReachedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dfs &amp;</type>
      <name>processedMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a3e278058f34be77a47e2a7ba4f9c12dc</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dfs &amp;</type>
      <name>distMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a67d147d1e125d3a56e49ddd920c1bc98</anchor>
      <arglist>(DistMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dist</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>afbc3a17afda5db46b3c0821d0aed3a21</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>processNextArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a773a0c2fc82672c4dd7af546908b8a5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OutArcIt</type>
      <name>nextArc</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aa3026fc409af73928e0911a6bcce9456</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>start</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aee7c286bcbfe5a9ed8c5c2a6eb73673a</anchor>
      <arglist>(const ArcBoolMap &amp;am)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::DfsDefaultTraits</name>
    <filename>a02197.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::template NodeMap&lt; typename Digraph::Arc &gt;</type>
      <name>PredMap</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>a2f311e3024ce1a50c00ffc291bce8e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NullMap&lt; typename Digraph::Node, bool &gt;</type>
      <name>ProcessedMap</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>ab4c841b7d3ecb344be7b85370b908920</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::template NodeMap&lt; bool &gt;</type>
      <name>ReachedMap</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>affb032b5578e24579000f9899512ae60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::template NodeMap&lt; int &gt;</type>
      <name>DistMap</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>ae1b02f76f4c6728d9c92da415fe15f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PredMap *</type>
      <name>createPredMap</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>a1d05c10ba44d3b5104c17e8181912d2c</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProcessedMap *</type>
      <name>createProcessedMap</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>aef8f11ee548ae3b61e7c2a0018455569</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReachedMap *</type>
      <name>createReachedMap</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>a1c6c24dc0cfde917210decb6f31be54c</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DistMap *</type>
      <name>createDistMap</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>ac24cfd641a704fa02ebd5d2403125c66</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::DfsVisit</name>
    <filename>a02285.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>processNextArc</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a773a0c2fc82672c4dd7af546908b8a5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>nextArc</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a4c14f137d1f191702501fd04461aa05e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>start</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a0306ffe17dfaf127245ad33dbd9c7c63</anchor>
      <arglist>(const AM &amp;am)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <class kind="struct">lemon::DfsVisit::SetReachedMap</class>
    <member kind="typedef">
      <type>TR</type>
      <name>Traits</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>aa6928feef02be4f2a184775d19dc6373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VS</type>
      <name>Visitor</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a3bece3b7c0b0189b735a408e533f3d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::ReachedMap</type>
      <name>ReachedMap</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a90221be1b9274785db2188548354d2aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DfsVisit</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>ab2606d461569b07df9a904f66aadfa82</anchor>
      <arglist>(const Digraph &amp;digraph, Visitor &amp;visitor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DfsVisit</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a1b3719df6ef9a6c93579c6b48309fb9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DfsVisit &amp;</type>
      <name>reachedMap</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a534f6847b03afac5b47af994d4f6666b</anchor>
      <arglist>(ReachedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>processNextArc</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a773a0c2fc82672c4dd7af546908b8a5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>nextArc</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a4c14f137d1f191702501fd04461aa05e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>start</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a0306ffe17dfaf127245ad33dbd9c7c63</anchor>
      <arglist>(const AM &amp;am)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DfsVisit&lt; Digraph, Visitor, SetReachedMapTraits&lt; T &gt; &gt;</name>
    <filename>a02285.html</filename>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>processNextArc</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a773a0c2fc82672c4dd7af546908b8a5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>nextArc</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a4c14f137d1f191702501fd04461aa05e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>start</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a0306ffe17dfaf127245ad33dbd9c7c63</anchor>
      <arglist>(const AM &amp;am)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="typedef">
      <type>SetReachedMapTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>aa6928feef02be4f2a184775d19dc6373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Visitor</type>
      <name>Visitor</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a3bece3b7c0b0189b735a408e533f3d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::ReachedMap</type>
      <name>ReachedMap</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a90221be1b9274785db2188548354d2aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DfsVisit</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>ab2606d461569b07df9a904f66aadfa82</anchor>
      <arglist>(const Digraph &amp;digraph, Visitor &amp;visitor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DfsVisit</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a1b3719df6ef9a6c93579c6b48309fb9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DfsVisit &amp;</type>
      <name>reachedMap</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a534f6847b03afac5b47af994d4f6666b</anchor>
      <arglist>(ReachedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>ac785b6504b67a963b4c20bae90441a77</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>processNextArc</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a773a0c2fc82672c4dd7af546908b8a5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>nextArc</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a4c14f137d1f191702501fd04461aa05e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>start</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a0306ffe17dfaf127245ad33dbd9c7c63</anchor>
      <arglist>(const AM &amp;am)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::DfsVisitDefaultTraits</name>
    <filename>a02281.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::template NodeMap&lt; bool &gt;</type>
      <name>ReachedMap</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>affb032b5578e24579000f9899512ae60</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReachedMap *</type>
      <name>createReachedMap</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a1491e8ada6a6d5fdd321e3fee43844e1</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::DfsVisitor</name>
    <filename>a02277.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>af763d0c0856194421ebd6ccc73b921c3</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a61325cf6c47c78fe2f978694f9e7bda6</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reach</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a4f6dc7007e25f1c20b4fbb8912a83817</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>discover</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>abe70d6cbc4419667e6aa533fc0fa262f</anchor>
      <arglist>(const Arc &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a3656d1f80036aee1dcaa927450b70c2a</anchor>
      <arglist>(const Arc &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leave</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a37622f5403978798170fd218cdb55647</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>backtrack</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a05430d1c630288c497a019594350e94e</anchor>
      <arglist>(const Arc &amp;arc)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DfsVisitor&lt; Digraph &gt;</name>
    <filename>a02277.html</filename>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>af763d0c0856194421ebd6ccc73b921c3</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a61325cf6c47c78fe2f978694f9e7bda6</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reach</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a4f6dc7007e25f1c20b4fbb8912a83817</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>discover</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>abe70d6cbc4419667e6aa533fc0fa262f</anchor>
      <arglist>(const Arc &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a3656d1f80036aee1dcaa927450b70c2a</anchor>
      <arglist>(const Arc &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leave</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a37622f5403978798170fd218cdb55647</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>backtrack</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a05430d1c630288c497a019594350e94e</anchor>
      <arglist>(const Arc &amp;arc)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DfsVisitor&lt; Graph &gt;</name>
    <filename>a02277.html</filename>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>af763d0c0856194421ebd6ccc73b921c3</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a61325cf6c47c78fe2f978694f9e7bda6</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reach</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a4f6dc7007e25f1c20b4fbb8912a83817</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>discover</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>abe70d6cbc4419667e6aa533fc0fa262f</anchor>
      <arglist>(const Arc &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a3656d1f80036aee1dcaa927450b70c2a</anchor>
      <arglist>(const Arc &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leave</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a37622f5403978798170fd218cdb55647</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>backtrack</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a05430d1c630288c497a019594350e94e</anchor>
      <arglist>(const Arc &amp;arc)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::DfsWizard</name>
    <filename>a02253.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DfsWizard</name>
      <anchorfile>a02253.html</anchorfile>
      <anchor>a8496841a286bdc5e6b7804a1c8b7bed9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DfsWizard</name>
      <anchorfile>a02253.html</anchorfile>
      <anchor>af2e4b792dede58b8d7f827878dee9a10</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DfsWizard</name>
      <anchorfile>a02253.html</anchorfile>
      <anchor>a2bf35f5b0270f76877c701f3b87a4fba</anchor>
      <arglist>(const TR &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02253.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02253.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02253.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DfsWizard&lt; SetPredMapBase&lt; T &gt; &gt;</type>
      <name>predMap</name>
      <anchorfile>a02253.html</anchorfile>
      <anchor>a2a45596a8e8a9b1f621e94a2de460b6c</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>DfsWizard&lt; SetReachedMapBase&lt; T &gt; &gt;</type>
      <name>reachedMap</name>
      <anchorfile>a02253.html</anchorfile>
      <anchor>ada4bf9b21f16cd70b9416ddacda0925a</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>DfsWizard&lt; SetDistMapBase&lt; T &gt; &gt;</type>
      <name>distMap</name>
      <anchorfile>a02253.html</anchorfile>
      <anchor>a51afc7f3283f1fd014ddbc97ab878ea4</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>DfsWizard&lt; SetProcessedMapBase&lt; T &gt; &gt;</type>
      <name>processedMap</name>
      <anchorfile>a02253.html</anchorfile>
      <anchor>a83e5765bb819f3070d1d5f84844ef775</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>DfsWizard&lt; SetPathBase&lt; T &gt; &gt;</type>
      <name>path</name>
      <anchorfile>a02253.html</anchorfile>
      <anchor>a1be4db5f62b3025c31c981faf74bc3bc</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>DfsWizard</type>
      <name>dist</name>
      <anchorfile>a02253.html</anchorfile>
      <anchor>aef118068d087c63cd0111751ccffa56e</anchor>
      <arglist>(const int &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::DfsWizardBase</name>
    <filename>a02249.html</filename>
    <templarg></templarg>
    <base>lemon::DfsWizardDefaultTraits</base>
    <member kind="function">
      <type></type>
      <name>DfsWizardBase</name>
      <anchorfile>a02249.html</anchorfile>
      <anchor>ac6751e3747d9999ff22806a701b0f48b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DfsWizardBase</name>
      <anchorfile>a02249.html</anchorfile>
      <anchor>ab58600d263349752f489d95593ca3bc4</anchor>
      <arglist>(const GR &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::DfsWizardDefaultTraits</name>
    <filename>a02245.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::template NodeMap&lt; typename Digraph::Arc &gt;</type>
      <name>PredMap</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a2f311e3024ce1a50c00ffc291bce8e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NullMap&lt; typename Digraph::Node, bool &gt;</type>
      <name>ProcessedMap</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>ab4c841b7d3ecb344be7b85370b908920</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::template NodeMap&lt; bool &gt;</type>
      <name>ReachedMap</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>affb032b5578e24579000f9899512ae60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::template NodeMap&lt; int &gt;</type>
      <name>DistMap</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>ae1b02f76f4c6728d9c92da415fe15f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lemon::Path&lt; Digraph &gt;</type>
      <name>Path</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a6989b0a22a99c251a2e7c99cf36605ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PredMap *</type>
      <name>createPredMap</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a1d05c10ba44d3b5104c17e8181912d2c</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProcessedMap *</type>
      <name>createProcessedMap</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>aef8f11ee548ae3b61e7c2a0018455569</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReachedMap *</type>
      <name>createReachedMap</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a1c6c24dc0cfde917210decb6f31be54c</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DistMap *</type>
      <name>createDistMap</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>ac24cfd641a704fa02ebd5d2403125c66</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::DHeap</name>
    <filename>a02297.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>D</templarg>
    <templarg></templarg>
    <member kind="enumeration">
      <type></type>
      <name>State</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_HEAP</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a213759402d071be3f66f8cf86641bb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRE_HEAP</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a12f201f9d13d106e81658dad7e7c9c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POST_HEAP</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8acd215e97251c1085a8b299c068e7172d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IM</type>
      <name>ItemIntMap</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ac00a2d6f039b6e8ffc0641530bdf5304</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PR</type>
      <name>Prio</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a644810a55913c9e8b24511758574d6d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ItemIntMap::Key</type>
      <name>Item</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a70025b32b600038ee2981a3deab1a783</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Item, Prio &gt;</type>
      <name>Pair</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a616fe456bc4c8eddf813c4f5665e1180</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CMP</type>
      <name>Compare</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a937d59343e7b08b620805162c2e52ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_HEAP</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a213759402d071be3f66f8cf86641bb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRE_HEAP</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a12f201f9d13d106e81658dad7e7c9c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POST_HEAP</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8acd215e97251c1085a8b299c068e7172d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DHeap</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>abbb33a0ea233dc441aedd789fb1efd6e</anchor>
      <arglist>(ItemIntMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DHeap</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a6618ea81351d87286749d5c00ecba04a</anchor>
      <arglist>(ItemIntMap &amp;map, const Compare &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a644718bb2fb240de962dc3c9a1fdf0dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a5b654214309b6f25fceeec04e2b1a016</anchor>
      <arglist>(const Pair &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ad34f576dafc84f8969e2fecd67cd3a15</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>top</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a3c68736e00411448ff7acf175015cc1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Prio</type>
      <name>prio</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>aa453ea5d0eb1b666a14a104659ae49dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a312e7f6c761a199c1369fbe651e084f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a5fe7eab02681c7735ba173c879de1681</anchor>
      <arglist>(const Item &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>Prio</type>
      <name>operator[]</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ac85c63b4ab780fbfb4b986b60dd87481</anchor>
      <arglist>(const Item &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a35c06441ccfac0ed04762113a102e6b3</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrease</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a301fdc87288afdebf379ae043cf66cd4</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increase</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a958836bae38b188956bcf1345c63eac4</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>state</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a9e18a6f6555eb8d1bc8d37c951a440f6</anchor>
      <arglist>(const Item &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>state</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a7d0ca230d438efaad53833701d9cb262</anchor>
      <arglist>(const Item &amp;i, State st)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>aa3d169f66b376619ebb1825f6c027482</anchor>
      <arglist>(const Item &amp;i, const Item &amp;j)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::DiEulerIt</name>
    <filename>a02585.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DiEulerIt</name>
      <anchorfile>a02585.html</anchorfile>
      <anchor>a10a5924de31338bf99468ca7b1ea9156</anchor>
      <arglist>(const GR &amp;gr, typename GR::Node start=INVALID)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Arc</name>
      <anchorfile>a02585.html</anchorfile>
      <anchor>a9d50d429980c0c2b97fd33e526652023</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02585.html</anchorfile>
      <anchor>afbd1dc99d3bb91299bdeac8966b4fbc1</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02585.html</anchorfile>
      <anchor>aa20cdc6e6b325e231a505a4eb85e3989</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type>DiEulerIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a02585.html</anchorfile>
      <anchor>aa0177ba9ae3d9d831ac7bef57c3e5ed8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>operator++</name>
      <anchorfile>a02585.html</anchorfile>
      <anchor>a5bdbff064cd6005e3b154c18d3b21df7</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::Digraph</name>
    <filename>a05181.html</filename>
    <class kind="class">lemon::concepts::Digraph::Arc</class>
    <class kind="class">lemon::concepts::Digraph::ArcIt</class>
    <class kind="class">lemon::concepts::Digraph::ArcMap</class>
    <class kind="class">lemon::concepts::Digraph::InArcIt</class>
    <class kind="class">lemon::concepts::Digraph::Node</class>
    <class kind="class">lemon::concepts::Digraph::NodeIt</class>
    <class kind="class">lemon::concepts::Digraph::NodeMap</class>
    <class kind="class">lemon::concepts::Digraph::OutArcIt</class>
    <member kind="function">
      <type></type>
      <name>Digraph</name>
      <anchorfile>a05181.html</anchorfile>
      <anchor>afe9cc0c764291ff93356bb374e237128</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>source</name>
      <anchorfile>a05181.html</anchorfile>
      <anchor>ac9e85ffa6cef50642d14bc9d7f74118e</anchor>
      <arglist>(Arc) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>target</name>
      <anchorfile>a05181.html</anchorfile>
      <anchor>ad9deab53b077f969c9054767d4eee7bc</anchor>
      <arglist>(Arc) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a05181.html</anchorfile>
      <anchor>a240c393e310b09179b74109a34832b58</anchor>
      <arglist>(Node) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a05181.html</anchorfile>
      <anchor>acba549328ff17e8e575761a43828713c</anchor>
      <arglist>(Arc) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nodeFromId</name>
      <anchorfile>a05181.html</anchorfile>
      <anchor>a488cc53bcd9ed8678754bc1428680b92</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>arcFromId</name>
      <anchorfile>a05181.html</anchorfile>
      <anchor>a6f1576e59fcda989af46733714ffb1a7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxNodeId</name>
      <anchorfile>a05181.html</anchorfile>
      <anchor>a0e562aee6515586e90822ad0929d6742</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxArcId</name>
      <anchorfile>a05181.html</anchorfile>
      <anchor>a40414a15ee291ba518da15d6996ab61d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>oppositeNode</name>
      <anchorfile>a05181.html</anchorfile>
      <anchor>a146d6f0a22cdcef424ffcc4d90ad6921</anchor>
      <arglist>(Node, Arc) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>baseNode</name>
      <anchorfile>a05181.html</anchorfile>
      <anchor>a6f0f66cde63d5e9d7f0642746d840230</anchor>
      <arglist>(OutArcIt) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>runningNode</name>
      <anchorfile>a05181.html</anchorfile>
      <anchor>a110eaf7c8fb037e7f9feb93bc44cf7ce</anchor>
      <arglist>(OutArcIt) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>baseNode</name>
      <anchorfile>a05181.html</anchorfile>
      <anchor>a581bb7d2e756fac2d971849e60e98297</anchor>
      <arglist>(InArcIt) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>runningNode</name>
      <anchorfile>a05181.html</anchorfile>
      <anchor>af1b3356047758dcc08d4f7b2d1adae8f</anchor>
      <arglist>(InArcIt) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Digraph</name>
      <anchorfile>a05181.html</anchorfile>
      <anchor>ae18fda3a8b7402d1b913eb3d0eb64b98</anchor>
      <arglist>(const Digraph &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a05181.html</anchorfile>
      <anchor>a86ceef2fe8f8ba68f9a9eec1c99cdad2</anchor>
      <arglist>(const Digraph &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::DigraphCopy</name>
    <filename>a02057.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DigraphCopy</name>
      <anchorfile>a02057.html</anchorfile>
      <anchor>a446ab15561f3b8ed021eb010e9e53ef6</anchor>
      <arglist>(const From &amp;from, To &amp;to)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DigraphCopy</name>
      <anchorfile>a02057.html</anchorfile>
      <anchor>afb01541dd7332dde976064680adb7d27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DigraphCopy &amp;</type>
      <name>nodeRef</name>
      <anchorfile>a02057.html</anchorfile>
      <anchor>ac310fd2b496f0a0dff30fc7433bbeecf</anchor>
      <arglist>(NodeRef &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>DigraphCopy &amp;</type>
      <name>nodeCrossRef</name>
      <anchorfile>a02057.html</anchorfile>
      <anchor>a180cf189d2c60ee602bc5e78b4ff5a7f</anchor>
      <arglist>(NodeCrossRef &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>DigraphCopy &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a02057.html</anchorfile>
      <anchor>a814bb136928b01aa717e3b87eca3336d</anchor>
      <arglist>(const FromMap &amp;map, ToMap &amp;tmap)</arglist>
    </member>
    <member kind="function">
      <type>DigraphCopy &amp;</type>
      <name>node</name>
      <anchorfile>a02057.html</anchorfile>
      <anchor>af0223e0ec4c277528508092be91e6a17</anchor>
      <arglist>(const Node &amp;node, TNode &amp;tnode)</arglist>
    </member>
    <member kind="function">
      <type>DigraphCopy &amp;</type>
      <name>arcRef</name>
      <anchorfile>a02057.html</anchorfile>
      <anchor>a93c7d718dccd021f664d08facec74d3c</anchor>
      <arglist>(ArcRef &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>DigraphCopy &amp;</type>
      <name>arcCrossRef</name>
      <anchorfile>a02057.html</anchorfile>
      <anchor>a03c799c69b86387ccc5e358ad8964b48</anchor>
      <arglist>(ArcCrossRef &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>DigraphCopy &amp;</type>
      <name>arcMap</name>
      <anchorfile>a02057.html</anchorfile>
      <anchor>acc7f8abcb20c6997c9ac8ee22ded8d9a</anchor>
      <arglist>(const FromMap &amp;map, ToMap &amp;tmap)</arglist>
    </member>
    <member kind="function">
      <type>DigraphCopy &amp;</type>
      <name>arc</name>
      <anchorfile>a02057.html</anchorfile>
      <anchor>a7ad45d42947a22cc7c47b2c530a6f654</anchor>
      <arglist>(const Arc &amp;arc, TArc &amp;tarc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02057.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::DigraphReader</name>
    <filename>a03125.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a6a0b6a80a9f5bd2a976762d3463e9cad</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a91589f7d20cfdc9bfc69e8726de0a962</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>arcMap</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>af6ab23304f9807e851f2d07f0c7d9203</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>arcMap</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a276a22804e7ebc619a227f69d6f6e119</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>attribute</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a4b9275dfecf669021ae6a989c76b47fa</anchor>
      <arglist>(const std::string &amp;caption, Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>attribute</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a25e0aebad2077e56971e41799bf860b5</anchor>
      <arglist>(const std::string &amp;caption, Value &amp;value, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>node</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a985b127665d31db2820cbd9fde869a7a</anchor>
      <arglist>(const std::string &amp;caption, Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>arc</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>aaf97021ab62753411ca5bdd11c8b6891</anchor>
      <arglist>(const std::string &amp;caption, Arc &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>nodes</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a4c23dbc9b67a31251da30029d32d3a3d</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>arcs</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a62c9846f3883712c703c58389a8c24f7</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>attributes</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>af774f0641b0e24afa95f176c518ceb78</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>useNodes</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a13ac753d5243bef695cdeca82baeb582</anchor>
      <arglist>(const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>useNodes</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a39a6f84d9c1aa69f03f2de116dd00dd8</anchor>
      <arglist>(const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>useArcs</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a1d828d2e6e4d76887da0a3904a100519</anchor>
      <arglist>(const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>useArcs</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a0067eb498e5ab91f25cd292929a999f5</anchor>
      <arglist>(const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>skipNodes</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a2c1a0a6fc8364af63b4f446f66e3c675</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>skipArcs</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>adb2dec97e14950c802945264144bf7b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigraphReader</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>aa4f1971218572095cd881516767c8cf3</anchor>
      <arglist>(DGR &amp;digraph, std::istream &amp;is=std::cin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigraphReader</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>ae8b85afb216acee67f9648314e5bb8ed</anchor>
      <arglist>(DGR &amp;digraph, const std::string &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigraphReader</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>ab60d1946d7d28dc4bf847726c6b68b1a</anchor>
      <arglist>(DGR &amp;digraph, const char *fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DigraphReader</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a5d63771eeca810885446a254547d2864</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a6a0b6a80a9f5bd2a976762d3463e9cad</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a91589f7d20cfdc9bfc69e8726de0a962</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>arcMap</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>af6ab23304f9807e851f2d07f0c7d9203</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>arcMap</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a276a22804e7ebc619a227f69d6f6e119</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>attribute</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a4b9275dfecf669021ae6a989c76b47fa</anchor>
      <arglist>(const std::string &amp;caption, Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>attribute</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a25e0aebad2077e56971e41799bf860b5</anchor>
      <arglist>(const std::string &amp;caption, Value &amp;value, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>node</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a985b127665d31db2820cbd9fde869a7a</anchor>
      <arglist>(const std::string &amp;caption, Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>arc</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>aaf97021ab62753411ca5bdd11c8b6891</anchor>
      <arglist>(const std::string &amp;caption, Arc &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>nodes</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a4c23dbc9b67a31251da30029d32d3a3d</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>arcs</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a62c9846f3883712c703c58389a8c24f7</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>attributes</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>af774f0641b0e24afa95f176c518ceb78</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>useNodes</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a13ac753d5243bef695cdeca82baeb582</anchor>
      <arglist>(const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>useNodes</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a39a6f84d9c1aa69f03f2de116dd00dd8</anchor>
      <arglist>(const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>useArcs</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a1d828d2e6e4d76887da0a3904a100519</anchor>
      <arglist>(const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>useArcs</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a0067eb498e5ab91f25cd292929a999f5</anchor>
      <arglist>(const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>skipNodes</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a2c1a0a6fc8364af63b4f446f66e3c675</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader &amp;</type>
      <name>skipArcs</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>adb2dec97e14950c802945264144bf7b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader&lt; TDGR &gt;</type>
      <name>digraphReader</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>ga48193af2c3b59a015d51b20f071a1514</anchor>
      <arglist>(TDGR &amp;digraph, std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader&lt; TDGR &gt;</type>
      <name>digraphReader</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>ab8831c8cea0389934dc66d41f27bd734</anchor>
      <arglist>(TDGR &amp;digraph, const std::string &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type>DigraphReader&lt; TDGR &gt;</type>
      <name>digraphReader</name>
      <anchorfile>a03125.html</anchorfile>
      <anchor>a4b31ee93558806ecdd13525b05047859</anchor>
      <arglist>(TDGR &amp;digraph, const char *fn)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::DigraphWriter</name>
    <filename>a03201.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a9ca0acd70b65c8c2df07c3194c758a04</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a0bb989bfb3ed851fb7c8448d13883e61</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>arcMap</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a1b1215b1368d57c7315b065c2ff7f8f8</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>arcMap</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a93f4485d66ccf09df7aa2a7a12222ef3</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>attribute</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a019585d8f993ce64033f1566c26020a1</anchor>
      <arglist>(const std::string &amp;caption, const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>attribute</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>af71c16576177fbbac037b918c4bd22ac</anchor>
      <arglist>(const std::string &amp;caption, const Value &amp;value, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>node</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a9994c9b8fa00a16560ab6c24c299c93f</anchor>
      <arglist>(const std::string &amp;caption, const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>arc</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a90fc30773d46a50471993f554e21a4bc</anchor>
      <arglist>(const std::string &amp;caption, const Arc &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>nodes</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>ad45ae417635ab38e9f11926e033ce84d</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>arcs</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a30c9c7bebf1120893029cf8016625d5d</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>attributes</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>ae7f4dfd9c6254bdb19963abf87676d33</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>skipNodes</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>abaa48d206e2c370290d6de539400f885</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>skipArcs</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a96343892ef6a0d31a1398b739db13ed5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>ostream</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a0df4c16f48d0e3c9c5c0cd8a55d5b183</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigraphWriter</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a74ad76e5a2254925c5adabd4088819b6</anchor>
      <arglist>(const DGR &amp;digraph, std::ostream &amp;os=std::cout)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigraphWriter</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a3ee5445ac5f1f877cc947ae7acc609fb</anchor>
      <arglist>(const DGR &amp;digraph, const std::string &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigraphWriter</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a1e5c1f2228d2fc8940d99e9cd6d1e582</anchor>
      <arglist>(const DGR &amp;digraph, const char *fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DigraphWriter</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a2135241b28f87dccd8933a761ea27c6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a9ca0acd70b65c8c2df07c3194c758a04</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a0bb989bfb3ed851fb7c8448d13883e61</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>arcMap</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a1b1215b1368d57c7315b065c2ff7f8f8</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>arcMap</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a93f4485d66ccf09df7aa2a7a12222ef3</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>attribute</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a019585d8f993ce64033f1566c26020a1</anchor>
      <arglist>(const std::string &amp;caption, const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>attribute</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>af71c16576177fbbac037b918c4bd22ac</anchor>
      <arglist>(const std::string &amp;caption, const Value &amp;value, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>node</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a9994c9b8fa00a16560ab6c24c299c93f</anchor>
      <arglist>(const std::string &amp;caption, const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>arc</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a90fc30773d46a50471993f554e21a4bc</anchor>
      <arglist>(const std::string &amp;caption, const Arc &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>nodes</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>ad45ae417635ab38e9f11926e033ce84d</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>arcs</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a30c9c7bebf1120893029cf8016625d5d</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>attributes</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>ae7f4dfd9c6254bdb19963abf87676d33</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>skipNodes</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>abaa48d206e2c370290d6de539400f885</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter &amp;</type>
      <name>skipArcs</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a96343892ef6a0d31a1398b739db13ed5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>ostream</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a0df4c16f48d0e3c9c5c0cd8a55d5b183</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter&lt; TDGR &gt;</type>
      <name>digraphWriter</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>ga69cc9c420f57bb132a8d2fc079b83494</anchor>
      <arglist>(const TDGR &amp;digraph, std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter&lt; TDGR &gt;</type>
      <name>digraphWriter</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>a988760df01bdd20ca0e4635d830fd3af</anchor>
      <arglist>(const TDGR &amp;digraph, const std::string &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter&lt; TDGR &gt;</type>
      <name>digraphWriter</name>
      <anchorfile>a03201.html</anchorfile>
      <anchor>aa0d23c1be57ca609a422add4096ef5b9</anchor>
      <arglist>(const TDGR &amp;digraph, const char *fn)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::Dijkstra</name>
    <filename>a02309.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf3cbe74733e4534c1cebb8383974bae</anchor>
      <arglist>(Node s, Value dst=OperationTraits::zero())</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a7c008a8c450fc4f6cefcd9e764abe6fd</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a798293b165f9bb022962b88c79d380e6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentDist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42b01a332ede55176f2438e67f755dc6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <class kind="struct">lemon::Dijkstra::SetDistMap</class>
    <class kind="struct">lemon::Dijkstra::SetHeap</class>
    <class kind="struct">lemon::Dijkstra::SetOperationTraits</class>
    <class kind="struct">lemon::Dijkstra::SetPredMap</class>
    <class kind="struct">lemon::Dijkstra::SetProcessedMap</class>
    <class kind="struct">lemon::Dijkstra::SetStandardHeap</class>
    <class kind="struct">lemon::Dijkstra::SetStandardProcessedMap</class>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Value</type>
      <name>Value</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>aa2042899ede28a8f6f0fdceb92a7d3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LengthMap</type>
      <name>LengthMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ac1094a242a4e9be216f0623b0a7381c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adc9638061e7acac70160feb0ea49c29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::DistMap</type>
      <name>DistMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad6d9c2819f215994ded26fbe42e2fd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a43e332c55acc2c5cb99d35ff40accab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PredMapPath&lt; Digraph, PredMap &gt;</type>
      <name>Path</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a4d7ae5a0651af9c9cfadd1462718979d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::HeapCrossRef</type>
      <name>HeapCrossRef</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a0dc498f33875179555a71ba9441c400a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Heap</type>
      <name>Heap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ab1e3f1c47cd4bffb15e3bbc452585f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::OperationTraits</type>
      <name>OperationTraits</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>afda95bfb086e37f03cb0be4ba8725f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR</type>
      <name>Traits</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dijkstra</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a58fc0895a271a1aa712f66aaf3425b12</anchor>
      <arglist>(const Digraph &amp;g, const LengthMap &amp;length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Dijkstra</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a9f2cad16e6cb57cad22fe766c9e809ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>lengthMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acca1fc5a2484f8284b37ac8b98a6de89</anchor>
      <arglist>(const LengthMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>predMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a553990801b3f933961ad14abfee00c0e</anchor>
      <arglist>(PredMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>processedMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6f543d7d3c4b2ab9ecdef5d14f90269d</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>distMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a344715cda707dac050bf32c85923f651</anchor>
      <arglist>(DistMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>heap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a7a0403be9c030237c46a9ab320f5bfbe</anchor>
      <arglist>(Heap &amp;hp, HeapCrossRef &amp;cr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf3cbe74733e4534c1cebb8383974bae</anchor>
      <arglist>(Node s, Value dst=OperationTraits::zero())</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a7c008a8c450fc4f6cefcd9e764abe6fd</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a798293b165f9bb022962b88c79d380e6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentDist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42b01a332ede55176f2438e67f755dc6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dijkstra&lt; Digraph, LengthMap, SetDistMapTraits&lt; T &gt; &gt;</name>
    <filename>a02309.html</filename>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a7c008a8c450fc4f6cefcd9e764abe6fd</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a798293b165f9bb022962b88c79d380e6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentDist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42b01a332ede55176f2438e67f755dc6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf3cbe74733e4534c1cebb8383974bae</anchor>
      <arglist>(Node s, Value dst=OperationTraits::zero())</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Value</type>
      <name>Value</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>aa2042899ede28a8f6f0fdceb92a7d3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LengthMap</type>
      <name>LengthMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ac1094a242a4e9be216f0623b0a7381c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adc9638061e7acac70160feb0ea49c29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::DistMap</type>
      <name>DistMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad6d9c2819f215994ded26fbe42e2fd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a43e332c55acc2c5cb99d35ff40accab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PredMapPath&lt; Digraph, PredMap &gt;</type>
      <name>Path</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a4d7ae5a0651af9c9cfadd1462718979d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::HeapCrossRef</type>
      <name>HeapCrossRef</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a0dc498f33875179555a71ba9441c400a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Heap</type>
      <name>Heap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ab1e3f1c47cd4bffb15e3bbc452585f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::OperationTraits</type>
      <name>OperationTraits</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>afda95bfb086e37f03cb0be4ba8725f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetDistMapTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dijkstra</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a58fc0895a271a1aa712f66aaf3425b12</anchor>
      <arglist>(const Digraph &amp;g, const LengthMap &amp;length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Dijkstra</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a9f2cad16e6cb57cad22fe766c9e809ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>lengthMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acca1fc5a2484f8284b37ac8b98a6de89</anchor>
      <arglist>(const LengthMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>predMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a553990801b3f933961ad14abfee00c0e</anchor>
      <arglist>(PredMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>processedMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6f543d7d3c4b2ab9ecdef5d14f90269d</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>distMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a344715cda707dac050bf32c85923f651</anchor>
      <arglist>(DistMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>heap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a7a0403be9c030237c46a9ab320f5bfbe</anchor>
      <arglist>(Heap &amp;hp, HeapCrossRef &amp;cr)</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a7c008a8c450fc4f6cefcd9e764abe6fd</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a798293b165f9bb022962b88c79d380e6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentDist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42b01a332ede55176f2438e67f755dc6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf3cbe74733e4534c1cebb8383974bae</anchor>
      <arglist>(Node s, Value dst=OperationTraits::zero())</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dijkstra&lt; Digraph, LengthMap, SetHeapTraits&lt; H, typename Digraph::template NodeMap&lt; int &gt; &gt; &gt;</name>
    <filename>a02309.html</filename>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a7c008a8c450fc4f6cefcd9e764abe6fd</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a798293b165f9bb022962b88c79d380e6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentDist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42b01a332ede55176f2438e67f755dc6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf3cbe74733e4534c1cebb8383974bae</anchor>
      <arglist>(Node s, Value dst=OperationTraits::zero())</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Value</type>
      <name>Value</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>aa2042899ede28a8f6f0fdceb92a7d3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LengthMap</type>
      <name>LengthMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ac1094a242a4e9be216f0623b0a7381c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adc9638061e7acac70160feb0ea49c29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::DistMap</type>
      <name>DistMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad6d9c2819f215994ded26fbe42e2fd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a43e332c55acc2c5cb99d35ff40accab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PredMapPath&lt; Digraph, PredMap &gt;</type>
      <name>Path</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a4d7ae5a0651af9c9cfadd1462718979d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::HeapCrossRef</type>
      <name>HeapCrossRef</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a0dc498f33875179555a71ba9441c400a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Heap</type>
      <name>Heap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ab1e3f1c47cd4bffb15e3bbc452585f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::OperationTraits</type>
      <name>OperationTraits</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>afda95bfb086e37f03cb0be4ba8725f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetHeapTraits&lt; H, typename Digraph::template NodeMap&lt; int &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dijkstra</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a58fc0895a271a1aa712f66aaf3425b12</anchor>
      <arglist>(const Digraph &amp;g, const LengthMap &amp;length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Dijkstra</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a9f2cad16e6cb57cad22fe766c9e809ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>lengthMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acca1fc5a2484f8284b37ac8b98a6de89</anchor>
      <arglist>(const LengthMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>predMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a553990801b3f933961ad14abfee00c0e</anchor>
      <arglist>(PredMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>processedMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6f543d7d3c4b2ab9ecdef5d14f90269d</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>distMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a344715cda707dac050bf32c85923f651</anchor>
      <arglist>(DistMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>heap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a7a0403be9c030237c46a9ab320f5bfbe</anchor>
      <arglist>(Heap &amp;hp, HeapCrossRef &amp;cr)</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a7c008a8c450fc4f6cefcd9e764abe6fd</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a798293b165f9bb022962b88c79d380e6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentDist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42b01a332ede55176f2438e67f755dc6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf3cbe74733e4534c1cebb8383974bae</anchor>
      <arglist>(Node s, Value dst=OperationTraits::zero())</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dijkstra&lt; Digraph, LengthMap, SetOperationTraitsTraits&lt; T &gt; &gt;</name>
    <filename>a02309.html</filename>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a7c008a8c450fc4f6cefcd9e764abe6fd</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a798293b165f9bb022962b88c79d380e6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentDist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42b01a332ede55176f2438e67f755dc6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf3cbe74733e4534c1cebb8383974bae</anchor>
      <arglist>(Node s, Value dst=OperationTraits::zero())</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Value</type>
      <name>Value</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>aa2042899ede28a8f6f0fdceb92a7d3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LengthMap</type>
      <name>LengthMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ac1094a242a4e9be216f0623b0a7381c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adc9638061e7acac70160feb0ea49c29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::DistMap</type>
      <name>DistMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad6d9c2819f215994ded26fbe42e2fd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a43e332c55acc2c5cb99d35ff40accab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PredMapPath&lt; Digraph, PredMap &gt;</type>
      <name>Path</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a4d7ae5a0651af9c9cfadd1462718979d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::HeapCrossRef</type>
      <name>HeapCrossRef</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a0dc498f33875179555a71ba9441c400a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Heap</type>
      <name>Heap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ab1e3f1c47cd4bffb15e3bbc452585f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::OperationTraits</type>
      <name>OperationTraits</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>afda95bfb086e37f03cb0be4ba8725f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetOperationTraitsTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dijkstra</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a58fc0895a271a1aa712f66aaf3425b12</anchor>
      <arglist>(const Digraph &amp;g, const LengthMap &amp;length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Dijkstra</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a9f2cad16e6cb57cad22fe766c9e809ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>lengthMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acca1fc5a2484f8284b37ac8b98a6de89</anchor>
      <arglist>(const LengthMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>predMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a553990801b3f933961ad14abfee00c0e</anchor>
      <arglist>(PredMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>processedMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6f543d7d3c4b2ab9ecdef5d14f90269d</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>distMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a344715cda707dac050bf32c85923f651</anchor>
      <arglist>(DistMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>heap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a7a0403be9c030237c46a9ab320f5bfbe</anchor>
      <arglist>(Heap &amp;hp, HeapCrossRef &amp;cr)</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a7c008a8c450fc4f6cefcd9e764abe6fd</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a798293b165f9bb022962b88c79d380e6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentDist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42b01a332ede55176f2438e67f755dc6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf3cbe74733e4534c1cebb8383974bae</anchor>
      <arglist>(Node s, Value dst=OperationTraits::zero())</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dijkstra&lt; Digraph, LengthMap, SetPredMapTraits&lt; T &gt; &gt;</name>
    <filename>a02309.html</filename>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a7c008a8c450fc4f6cefcd9e764abe6fd</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a798293b165f9bb022962b88c79d380e6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentDist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42b01a332ede55176f2438e67f755dc6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf3cbe74733e4534c1cebb8383974bae</anchor>
      <arglist>(Node s, Value dst=OperationTraits::zero())</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Value</type>
      <name>Value</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>aa2042899ede28a8f6f0fdceb92a7d3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LengthMap</type>
      <name>LengthMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ac1094a242a4e9be216f0623b0a7381c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adc9638061e7acac70160feb0ea49c29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::DistMap</type>
      <name>DistMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad6d9c2819f215994ded26fbe42e2fd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a43e332c55acc2c5cb99d35ff40accab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PredMapPath&lt; Digraph, PredMap &gt;</type>
      <name>Path</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a4d7ae5a0651af9c9cfadd1462718979d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::HeapCrossRef</type>
      <name>HeapCrossRef</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a0dc498f33875179555a71ba9441c400a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Heap</type>
      <name>Heap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ab1e3f1c47cd4bffb15e3bbc452585f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::OperationTraits</type>
      <name>OperationTraits</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>afda95bfb086e37f03cb0be4ba8725f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetPredMapTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dijkstra</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a58fc0895a271a1aa712f66aaf3425b12</anchor>
      <arglist>(const Digraph &amp;g, const LengthMap &amp;length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Dijkstra</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a9f2cad16e6cb57cad22fe766c9e809ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>lengthMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acca1fc5a2484f8284b37ac8b98a6de89</anchor>
      <arglist>(const LengthMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>predMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a553990801b3f933961ad14abfee00c0e</anchor>
      <arglist>(PredMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>processedMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6f543d7d3c4b2ab9ecdef5d14f90269d</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>distMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a344715cda707dac050bf32c85923f651</anchor>
      <arglist>(DistMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>heap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a7a0403be9c030237c46a9ab320f5bfbe</anchor>
      <arglist>(Heap &amp;hp, HeapCrossRef &amp;cr)</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a7c008a8c450fc4f6cefcd9e764abe6fd</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a798293b165f9bb022962b88c79d380e6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentDist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42b01a332ede55176f2438e67f755dc6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf3cbe74733e4534c1cebb8383974bae</anchor>
      <arglist>(Node s, Value dst=OperationTraits::zero())</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dijkstra&lt; Digraph, LengthMap, SetProcessedMapTraits&lt; T &gt; &gt;</name>
    <filename>a02309.html</filename>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a7c008a8c450fc4f6cefcd9e764abe6fd</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a798293b165f9bb022962b88c79d380e6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentDist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42b01a332ede55176f2438e67f755dc6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf3cbe74733e4534c1cebb8383974bae</anchor>
      <arglist>(Node s, Value dst=OperationTraits::zero())</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Value</type>
      <name>Value</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>aa2042899ede28a8f6f0fdceb92a7d3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LengthMap</type>
      <name>LengthMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ac1094a242a4e9be216f0623b0a7381c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adc9638061e7acac70160feb0ea49c29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::DistMap</type>
      <name>DistMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad6d9c2819f215994ded26fbe42e2fd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a43e332c55acc2c5cb99d35ff40accab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PredMapPath&lt; Digraph, PredMap &gt;</type>
      <name>Path</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a4d7ae5a0651af9c9cfadd1462718979d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::HeapCrossRef</type>
      <name>HeapCrossRef</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a0dc498f33875179555a71ba9441c400a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Heap</type>
      <name>Heap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ab1e3f1c47cd4bffb15e3bbc452585f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::OperationTraits</type>
      <name>OperationTraits</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>afda95bfb086e37f03cb0be4ba8725f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetProcessedMapTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dijkstra</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a58fc0895a271a1aa712f66aaf3425b12</anchor>
      <arglist>(const Digraph &amp;g, const LengthMap &amp;length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Dijkstra</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a9f2cad16e6cb57cad22fe766c9e809ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>lengthMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acca1fc5a2484f8284b37ac8b98a6de89</anchor>
      <arglist>(const LengthMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>predMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a553990801b3f933961ad14abfee00c0e</anchor>
      <arglist>(PredMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>processedMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6f543d7d3c4b2ab9ecdef5d14f90269d</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>distMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a344715cda707dac050bf32c85923f651</anchor>
      <arglist>(DistMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>heap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a7a0403be9c030237c46a9ab320f5bfbe</anchor>
      <arglist>(Heap &amp;hp, HeapCrossRef &amp;cr)</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a7c008a8c450fc4f6cefcd9e764abe6fd</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a798293b165f9bb022962b88c79d380e6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentDist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42b01a332ede55176f2438e67f755dc6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf3cbe74733e4534c1cebb8383974bae</anchor>
      <arglist>(Node s, Value dst=OperationTraits::zero())</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dijkstra&lt; Digraph, LengthMap, SetStandardHeapTraits&lt; H, typename Digraph::template NodeMap&lt; int &gt; &gt; &gt;</name>
    <filename>a02309.html</filename>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a7c008a8c450fc4f6cefcd9e764abe6fd</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a798293b165f9bb022962b88c79d380e6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentDist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42b01a332ede55176f2438e67f755dc6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf3cbe74733e4534c1cebb8383974bae</anchor>
      <arglist>(Node s, Value dst=OperationTraits::zero())</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Value</type>
      <name>Value</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>aa2042899ede28a8f6f0fdceb92a7d3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LengthMap</type>
      <name>LengthMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ac1094a242a4e9be216f0623b0a7381c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adc9638061e7acac70160feb0ea49c29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::DistMap</type>
      <name>DistMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad6d9c2819f215994ded26fbe42e2fd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a43e332c55acc2c5cb99d35ff40accab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PredMapPath&lt; Digraph, PredMap &gt;</type>
      <name>Path</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a4d7ae5a0651af9c9cfadd1462718979d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::HeapCrossRef</type>
      <name>HeapCrossRef</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a0dc498f33875179555a71ba9441c400a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Heap</type>
      <name>Heap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ab1e3f1c47cd4bffb15e3bbc452585f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::OperationTraits</type>
      <name>OperationTraits</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>afda95bfb086e37f03cb0be4ba8725f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetStandardHeapTraits&lt; H, typename Digraph::template NodeMap&lt; int &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dijkstra</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a58fc0895a271a1aa712f66aaf3425b12</anchor>
      <arglist>(const Digraph &amp;g, const LengthMap &amp;length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Dijkstra</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a9f2cad16e6cb57cad22fe766c9e809ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>lengthMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acca1fc5a2484f8284b37ac8b98a6de89</anchor>
      <arglist>(const LengthMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>predMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a553990801b3f933961ad14abfee00c0e</anchor>
      <arglist>(PredMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>processedMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6f543d7d3c4b2ab9ecdef5d14f90269d</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>distMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a344715cda707dac050bf32c85923f651</anchor>
      <arglist>(DistMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>heap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a7a0403be9c030237c46a9ab320f5bfbe</anchor>
      <arglist>(Heap &amp;hp, HeapCrossRef &amp;cr)</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a7c008a8c450fc4f6cefcd9e764abe6fd</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a798293b165f9bb022962b88c79d380e6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentDist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42b01a332ede55176f2438e67f755dc6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf3cbe74733e4534c1cebb8383974bae</anchor>
      <arglist>(Node s, Value dst=OperationTraits::zero())</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dijkstra&lt; Digraph, LengthMap, SetStandardProcessedMapTraits &gt;</name>
    <filename>a02309.html</filename>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a7c008a8c450fc4f6cefcd9e764abe6fd</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a798293b165f9bb022962b88c79d380e6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentDist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42b01a332ede55176f2438e67f755dc6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf3cbe74733e4534c1cebb8383974bae</anchor>
      <arglist>(Node s, Value dst=OperationTraits::zero())</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Value</type>
      <name>Value</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>aa2042899ede28a8f6f0fdceb92a7d3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LengthMap</type>
      <name>LengthMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ac1094a242a4e9be216f0623b0a7381c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adc9638061e7acac70160feb0ea49c29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::DistMap</type>
      <name>DistMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad6d9c2819f215994ded26fbe42e2fd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a43e332c55acc2c5cb99d35ff40accab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PredMapPath&lt; Digraph, PredMap &gt;</type>
      <name>Path</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a4d7ae5a0651af9c9cfadd1462718979d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::HeapCrossRef</type>
      <name>HeapCrossRef</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a0dc498f33875179555a71ba9441c400a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Heap</type>
      <name>Heap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ab1e3f1c47cd4bffb15e3bbc452585f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::OperationTraits</type>
      <name>OperationTraits</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>afda95bfb086e37f03cb0be4ba8725f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetStandardProcessedMapTraits</type>
      <name>Traits</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dijkstra</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a58fc0895a271a1aa712f66aaf3425b12</anchor>
      <arglist>(const Digraph &amp;g, const LengthMap &amp;length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Dijkstra</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a9f2cad16e6cb57cad22fe766c9e809ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>lengthMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acca1fc5a2484f8284b37ac8b98a6de89</anchor>
      <arglist>(const LengthMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>predMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a553990801b3f933961ad14abfee00c0e</anchor>
      <arglist>(PredMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>processedMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6f543d7d3c4b2ab9ecdef5d14f90269d</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>distMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a344715cda707dac050bf32c85923f651</anchor>
      <arglist>(DistMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Dijkstra &amp;</type>
      <name>heap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a7a0403be9c030237c46a9ab320f5bfbe</anchor>
      <arglist>(Heap &amp;hp, HeapCrossRef &amp;cr)</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DistMap &amp;</type>
      <name>distMap</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a5d214f747babb2d1affd72f6682e4ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Path</type>
      <name>path</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>af772b441cd00f8c67ae1e57a51f16c9a</anchor>
      <arglist>(Node t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a7c008a8c450fc4f6cefcd9e764abe6fd</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>predArc</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a33cba8b6a93f6c772791dfe9a5b7d1e1</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a441bf8455b4819ae156933ab1370c91f</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6cfeeb8c4f43281a9df6788e50e7f5a5</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a798293b165f9bb022962b88c79d380e6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentDist</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a42b01a332ede55176f2438e67f755dc6</anchor>
      <arglist>(Node v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf3cbe74733e4534c1cebb8383974bae</anchor>
      <arglist>(Node s, Value dst=OperationTraits::zero())</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a4a8e504611499400af5487bb4e869347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a8b8de9dfc16e4b3cb6b38733e82f6449</anchor>
      <arglist>(Node t)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>start</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>acf9ccb55c64065301a4e11f13e4d05fb</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::DijkstraDefaultOperationTraits</name>
    <filename>a02301.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Value</type>
      <name>zero</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>af24efe5c6b0edcb586538222fb5b1024</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Value</type>
      <name>plus</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>acce469a9728bdb4c09c015dc31a3eb3c</anchor>
      <arglist>(const Value &amp;left, const Value &amp;right)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>less</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>ac142bbf30883f244af50aefbf661bd6a</anchor>
      <arglist>(const Value &amp;left, const Value &amp;right)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::DijkstraDefaultTraits</name>
    <filename>a02305.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LEN</type>
      <name>LengthMap</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a7398ca1da160bb30ee090866bbfc12ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LEN::Value</type>
      <name>Value</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>ac2ac7ac2928b4cfeafdc493dd44f61c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DijkstraDefaultOperationTraits&lt; Value &gt;</type>
      <name>OperationTraits</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a44e2d7b3991904d43e2dc64bc7b3994b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::template NodeMap&lt; int &gt;</type>
      <name>HeapCrossRef</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>abe21d3edcb6bd235d862becfd84c6d92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BinHeap&lt; typename LEN::Value, HeapCrossRef, std::less&lt; Value &gt; &gt;</type>
      <name>Heap</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>ae9674759c9994950c85735775791c79d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::template NodeMap&lt; typename Digraph::Arc &gt;</type>
      <name>PredMap</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a2f311e3024ce1a50c00ffc291bce8e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NullMap&lt; typename Digraph::Node, bool &gt;</type>
      <name>ProcessedMap</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>ab4c841b7d3ecb344be7b85370b908920</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::template NodeMap&lt; typename LEN::Value &gt;</type>
      <name>DistMap</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a9735fe3ebb1835f94ac433863be10527</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HeapCrossRef *</type>
      <name>createHeapCrossRef</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>ae1638f8612c39f3d981d57056aca2c37</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Heap *</type>
      <name>createHeap</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a01816b6b724aa6d7f99d7ac19d549125</anchor>
      <arglist>(HeapCrossRef &amp;r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PredMap *</type>
      <name>createPredMap</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a1d05c10ba44d3b5104c17e8181912d2c</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProcessedMap *</type>
      <name>createProcessedMap</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>aef8f11ee548ae3b61e7c2a0018455569</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DistMap *</type>
      <name>createDistMap</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>ac24cfd641a704fa02ebd5d2403125c66</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::DijkstraWizard</name>
    <filename>a02377.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DijkstraWizard</name>
      <anchorfile>a02377.html</anchorfile>
      <anchor>a9f26d04d4cbf48a326f1997016e9d413</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DijkstraWizard</name>
      <anchorfile>a02377.html</anchorfile>
      <anchor>af5dd28cdef6fc5915eb674832737ee85</anchor>
      <arglist>(const Digraph &amp;g, const LengthMap &amp;l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DijkstraWizard</name>
      <anchorfile>a02377.html</anchorfile>
      <anchor>af83a6b7a96934b5c0efe73294f5d9412</anchor>
      <arglist>(const TR &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02377.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02377.html</anchorfile>
      <anchor>ad2c3c4217c98b58a8618397d65d400c8</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>DijkstraWizard&lt; SetPredMapBase&lt; T &gt; &gt;</type>
      <name>predMap</name>
      <anchorfile>a02377.html</anchorfile>
      <anchor>aca41f52e954600bd52f54a144df7f240</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>DijkstraWizard&lt; SetDistMapBase&lt; T &gt; &gt;</type>
      <name>distMap</name>
      <anchorfile>a02377.html</anchorfile>
      <anchor>aa60473d7110f682b02c4cc2d70efc9ae</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>DijkstraWizard&lt; SetProcessedMapBase&lt; T &gt; &gt;</type>
      <name>processedMap</name>
      <anchorfile>a02377.html</anchorfile>
      <anchor>a3fcf99acc15cf322ae4bd390cf4d6421</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>DijkstraWizard&lt; SetPathBase&lt; T &gt; &gt;</type>
      <name>path</name>
      <anchorfile>a02377.html</anchorfile>
      <anchor>a4a1fc26b49d7a74ec53247a5ed514c71</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>DijkstraWizard</type>
      <name>dist</name>
      <anchorfile>a02377.html</anchorfile>
      <anchor>afd921c8909e9b920668ff2f9aa6c2208</anchor>
      <arglist>(const Value &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::DijkstraWizardBase</name>
    <filename>a02373.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>lemon::DijkstraWizardDefaultTraits</base>
    <member kind="function">
      <type></type>
      <name>DijkstraWizardBase</name>
      <anchorfile>a02373.html</anchorfile>
      <anchor>a33295db5ac017fd3f4aabbabb356973f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DijkstraWizardBase</name>
      <anchorfile>a02373.html</anchorfile>
      <anchor>afb8afa8f01b04960d3177cbd0568713e</anchor>
      <arglist>(const GR &amp;g, const LEN &amp;l)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::DijkstraWizardDefaultTraits</name>
    <filename>a02369.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LEN</type>
      <name>LengthMap</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a7398ca1da160bb30ee090866bbfc12ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LEN::Value</type>
      <name>Value</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>ac2ac7ac2928b4cfeafdc493dd44f61c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DijkstraDefaultOperationTraits&lt; Value &gt;</type>
      <name>OperationTraits</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a44e2d7b3991904d43e2dc64bc7b3994b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::template NodeMap&lt; int &gt;</type>
      <name>HeapCrossRef</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>abe21d3edcb6bd235d862becfd84c6d92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BinHeap&lt; Value, typename Digraph::template NodeMap&lt; int &gt;, std::less&lt; Value &gt; &gt;</type>
      <name>Heap</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a7ef292c7753186b672855ef6a2290cff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::template NodeMap&lt; typename Digraph::Arc &gt;</type>
      <name>PredMap</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a2f311e3024ce1a50c00ffc291bce8e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NullMap&lt; typename Digraph::Node, bool &gt;</type>
      <name>ProcessedMap</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>ab4c841b7d3ecb344be7b85370b908920</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::template NodeMap&lt; typename LEN::Value &gt;</type>
      <name>DistMap</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a9735fe3ebb1835f94ac433863be10527</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lemon::Path&lt; Digraph &gt;</type>
      <name>Path</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a6989b0a22a99c251a2e7c99cf36605ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HeapCrossRef *</type>
      <name>createHeapCrossRef</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>ae1638f8612c39f3d981d57056aca2c37</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Heap *</type>
      <name>createHeap</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a01816b6b724aa6d7f99d7ac19d549125</anchor>
      <arglist>(HeapCrossRef &amp;r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PredMap *</type>
      <name>createPredMap</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a1d05c10ba44d3b5104c17e8181912d2c</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProcessedMap *</type>
      <name>createProcessedMap</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>aef8f11ee548ae3b61e7c2a0018455569</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DistMap *</type>
      <name>createDistMap</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>ac24cfd641a704fa02ebd5d2403125c66</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::DimacsDescriptor</name>
    <filename>a02425.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>a02425.html</anchorfile>
      <anchor>a1d1cfd8ffb84e947f82999c682b666a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>a02425.html</anchorfile>
      <anchor>a1d1cfd8ffb84e947f82999c682b666a7ac157bdf0b85a40d2619cbc8bc1ae5fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIN</name>
      <anchorfile>a02425.html</anchorfile>
      <anchor>a1d1cfd8ffb84e947f82999c682b666a7a957e8250f68e7b5677b22397c2c1b51e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX</name>
      <anchorfile>a02425.html</anchorfile>
      <anchor>a1d1cfd8ffb84e947f82999c682b666a7ad7e097bda6d981de2520f49fe74c25b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SP</name>
      <anchorfile>a02425.html</anchorfile>
      <anchor>a1d1cfd8ffb84e947f82999c682b666a7a77c32937cb56776e7d96ed4b5e43e06b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT</name>
      <anchorfile>a02425.html</anchorfile>
      <anchor>a1d1cfd8ffb84e947f82999c682b666a7abeed243a6ffb8f4f203ba3fb934ab3b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>a02425.html</anchorfile>
      <anchor>a1d1cfd8ffb84e947f82999c682b666a7ac157bdf0b85a40d2619cbc8bc1ae5fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIN</name>
      <anchorfile>a02425.html</anchorfile>
      <anchor>a1d1cfd8ffb84e947f82999c682b666a7a957e8250f68e7b5677b22397c2c1b51e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX</name>
      <anchorfile>a02425.html</anchorfile>
      <anchor>a1d1cfd8ffb84e947f82999c682b666a7ad7e097bda6d981de2520f49fe74c25b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SP</name>
      <anchorfile>a02425.html</anchorfile>
      <anchor>a1d1cfd8ffb84e947f82999c682b666a7a77c32937cb56776e7d96ed4b5e43e06b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT</name>
      <anchorfile>a02425.html</anchorfile>
      <anchor>a1d1cfd8ffb84e947f82999c682b666a7abeed243a6ffb8f4f203ba3fb934ab3b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DimacsDescriptor</name>
      <anchorfile>a02425.html</anchorfile>
      <anchor>abb1aab8d4a78dbac2c1c69fccf3b337e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>type</name>
      <anchorfile>a02425.html</anchorfile>
      <anchor>ab6f4e6d3fde00ce906e46494f60dfe7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nodeNum</name>
      <anchorfile>a02425.html</anchorfile>
      <anchor>a787bebfa4c764244b11726a4024576a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>edgeNum</name>
      <anchorfile>a02425.html</anchorfile>
      <anchor>ad6c4c67355fbdfa9035a24b8a3c76dee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::DivMap</name>
    <filename>a03493.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>MapBase&lt; M1::Key, M1::Value &gt;</base>
    <member kind="typedef">
      <type>M1::Key</type>
      <name>Key</name>
      <anchorfile>a03493.html</anchorfile>
      <anchor>ac16c774bd2b82a45854c3ac66248de01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M1::Value</type>
      <name>Value</name>
      <anchorfile>a03493.html</anchorfile>
      <anchor>a087615b851ee4b1f01463e4589205d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DivMap</name>
      <anchorfile>a03493.html</anchorfile>
      <anchor>a4f76bcb3d309ff7e3d3dc8aef4c15f12</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03493.html</anchorfile>
      <anchor>a8de1b13f44fab45faa8daa93027f9df2</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>DivMap&lt; M1, M2 &gt;</type>
      <name>divMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga166e4520ea24f6a0ef094898df89f180</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::LpBase::DualExpr</name>
    <filename>a03377.html</filename>
    <class kind="class">lemon::LpBase::DualExpr::CoeffIt</class>
    <class kind="class">lemon::LpBase::DualExpr::ConstCoeffIt</class>
    <member kind="typedef">
      <type>LpBase::Row</type>
      <name>Key</name>
      <anchorfile>a03377.html</anchorfile>
      <anchor>a1d3263d18e745e004485ffd0c52769ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LpBase::Value</type>
      <name>Value</name>
      <anchorfile>a03377.html</anchorfile>
      <anchor>a032494d683f041c4f7747c474a044c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DualExpr</name>
      <anchorfile>a03377.html</anchorfile>
      <anchor>ab17c2c35bd5ff5f16f10a42bb5a8871e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DualExpr</name>
      <anchorfile>a03377.html</anchorfile>
      <anchor>a81ae7566dd55a7fa596dce65e2108807</anchor>
      <arglist>(const Row &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03377.html</anchorfile>
      <anchor>ae7e782ccc74d7d31b4fc8f75b55dcbd9</anchor>
      <arglist>(const Row &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a03377.html</anchorfile>
      <anchor>accddbed99b053afecd40ea92867c54b8</anchor>
      <arglist>(const Row &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03377.html</anchorfile>
      <anchor>a6435de676808f8a7c88ea1e1c3950796</anchor>
      <arglist>(const Row &amp;r, const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>simplify</name>
      <anchorfile>a03377.html</anchorfile>
      <anchor>aa0a8cc3641e02a96fa39d303b0f88b3d</anchor>
      <arglist>(Value epsilon=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a03377.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DualExpr &amp;</type>
      <name>operator+=</name>
      <anchorfile>a03377.html</anchorfile>
      <anchor>a88004d09920b531f523044e88c0b88f1</anchor>
      <arglist>(const DualExpr &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>DualExpr &amp;</type>
      <name>operator-=</name>
      <anchorfile>a03377.html</anchorfile>
      <anchor>ad60ab715a7a90eb935f81966f120671a</anchor>
      <arglist>(const DualExpr &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>DualExpr &amp;</type>
      <name>operator*=</name>
      <anchorfile>a03377.html</anchorfile>
      <anchor>ae9262dea3610bff7f0aa5482430eee09</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>DualExpr &amp;</type>
      <name>operator/=</name>
      <anchorfile>a03377.html</anchorfile>
      <anchor>a2f0e09da752f2eafb4f8071ecfadea0e</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>LpBase::DualExpr</type>
      <name>operator+</name>
      <anchorfile>a03377.html</anchorfile>
      <anchor>ac0e09c29a447377931b706ebf8714d58</anchor>
      <arglist>(const LpBase::DualExpr &amp;a, const LpBase::DualExpr &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>LpBase::DualExpr</type>
      <name>operator-</name>
      <anchorfile>a03377.html</anchorfile>
      <anchor>a0276c63464b89f00e8c32688837f49a6</anchor>
      <arglist>(const LpBase::DualExpr &amp;a, const LpBase::DualExpr &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>LpBase::DualExpr</type>
      <name>operator*</name>
      <anchorfile>a03377.html</anchorfile>
      <anchor>ae3b285a79edb32b9c8f9561e9bd20889</anchor>
      <arglist>(const LpBase::DualExpr &amp;a, const LpBase::Value &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>LpBase::DualExpr</type>
      <name>operator*</name>
      <anchorfile>a03377.html</anchorfile>
      <anchor>ade4dde11224713e0fe6bd57b4370b57e</anchor>
      <arglist>(const LpBase::Value &amp;a, const LpBase::DualExpr &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>LpBase::DualExpr</type>
      <name>operator/</name>
      <anchorfile>a03377.html</anchorfile>
      <anchor>ade6fa4ea6e3d09bfb1845dd304556969</anchor>
      <arglist>(const LpBase::DualExpr &amp;a, const LpBase::Value &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::MinCostArborescence::DualIt</name>
    <filename>a03837.html</filename>
    <member kind="function">
      <type></type>
      <name>DualIt</name>
      <anchorfile>a03837.html</anchorfile>
      <anchor>a52f8825715c02cfb462e404479ee9378</anchor>
      <arglist>(const MinCostArborescence &amp;algorithm, int variable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Node</name>
      <anchorfile>a03837.html</anchorfile>
      <anchor>a11d0699af4659b67aae9342df58bf004</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DualIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a03837.html</anchorfile>
      <anchor>a0a697e264a03d65ee9d17e36b9c94d17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a03837.html</anchorfile>
      <anchor>a8d6f49632ab9a9e02a777155052628c3</anchor>
      <arglist>(Invalid) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a03837.html</anchorfile>
      <anchor>a7f49ed3e47c513d4466fe349c188ad1c</anchor>
      <arglist>(Invalid) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::DynArcLookUp</name>
    <filename>a02105.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a02105.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynArcLookUp</name>
      <anchorfile>a02105.html</anchorfile>
      <anchor>af350d80d0f535f2e22d2759b520b44b7</anchor>
      <arglist>(const Digraph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>operator()</name>
      <anchorfile>a02105.html</anchorfile>
      <anchor>afe9683fc6d0498f616bc3342e1f23626</anchor>
      <arglist>(Node s, Node t, Arc p=INVALID) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::BpGraph::Edge</name>
    <filename>a05129.html</filename>
    <member kind="function">
      <type></type>
      <name>Edge</name>
      <anchorfile>a05129.html</anchorfile>
      <anchor>a91715a2ea8b8478224859ee6ee42ed87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Edge</name>
      <anchorfile>a05129.html</anchorfile>
      <anchor>a05e10aa476d938bdc8767728e5e524dd</anchor>
      <arglist>(const Edge &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Edge</name>
      <anchorfile>a05129.html</anchorfile>
      <anchor>a4c15ff1fe447a33c5ba30c34b114df23</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a05129.html</anchorfile>
      <anchor>ab9746434918aca10075a6caa7ba325f8</anchor>
      <arglist>(Edge) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a05129.html</anchorfile>
      <anchor>a983c0c392111568cde6ad30c906497e8</anchor>
      <arglist>(Edge) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a05129.html</anchorfile>
      <anchor>ab6369a7f4b5402fee9c9ce98e298901f</anchor>
      <arglist>(Edge) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::Graph::Edge</name>
    <filename>a05233.html</filename>
    <member kind="function">
      <type></type>
      <name>Edge</name>
      <anchorfile>a05233.html</anchorfile>
      <anchor>a91715a2ea8b8478224859ee6ee42ed87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Edge</name>
      <anchorfile>a05233.html</anchorfile>
      <anchor>a05e10aa476d938bdc8767728e5e524dd</anchor>
      <arglist>(const Edge &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Edge</name>
      <anchorfile>a05233.html</anchorfile>
      <anchor>a4c15ff1fe447a33c5ba30c34b114df23</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a05233.html</anchorfile>
      <anchor>ab9746434918aca10075a6caa7ba325f8</anchor>
      <arglist>(Edge) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a05233.html</anchorfile>
      <anchor>a983c0c392111568cde6ad30c906497e8</anchor>
      <arglist>(Edge) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a05233.html</anchorfile>
      <anchor>ab6369a7f4b5402fee9c9ce98e298901f</anchor>
      <arglist>(Edge) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::BaseGraphComponent::Edge</name>
    <filename>a05297.html</filename>
    <base>GraphItem&lt; &apos;e&apos;&gt;</base>
    <member kind="function">
      <type></type>
      <name>Edge</name>
      <anchorfile>a05297.html</anchorfile>
      <anchor>a91715a2ea8b8478224859ee6ee42ed87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Edge</name>
      <anchorfile>a05297.html</anchorfile>
      <anchor>a05e10aa476d938bdc8767728e5e524dd</anchor>
      <arglist>(const Edge &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Edge</name>
      <anchorfile>a05297.html</anchorfile>
      <anchor>a4c15ff1fe447a33c5ba30c34b114df23</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Edge</name>
      <anchorfile>a05297.html</anchorfile>
      <anchor>a159c394fe9804b8efb784f7151e5bf82</anchor>
      <arglist>(const Arc &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::BpGraph::EdgeIt</name>
    <filename>a05133.html</filename>
    <base>lemon::concepts::BpGraph::Edge</base>
    <member kind="function">
      <type></type>
      <name>EdgeIt</name>
      <anchorfile>a05133.html</anchorfile>
      <anchor>a367509fe9aa557c1b7acdf86a9e4fb8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIt</name>
      <anchorfile>a05133.html</anchorfile>
      <anchor>a1ed0fcb6fd8e9654a5c8531d2d31ecbb</anchor>
      <arglist>(const EdgeIt &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIt</name>
      <anchorfile>a05133.html</anchorfile>
      <anchor>a984660b6f8ca41cc1257f012f97f1a50</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIt</name>
      <anchorfile>a05133.html</anchorfile>
      <anchor>aa812b2a8cb8896cee2b89a4d7c505145</anchor>
      <arglist>(const BpGraph &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIt</name>
      <anchorfile>a05133.html</anchorfile>
      <anchor>ae43751fad2546d362c5e9a1f48285be8</anchor>
      <arglist>(const BpGraph &amp;, const Edge &amp;)</arglist>
    </member>
    <member kind="function">
      <type>EdgeIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a05133.html</anchorfile>
      <anchor>ac76a4784e377b27dbcc0a66ddda42c01</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::Graph::EdgeIt</name>
    <filename>a05237.html</filename>
    <base>lemon::concepts::Graph::Edge</base>
    <member kind="function">
      <type></type>
      <name>EdgeIt</name>
      <anchorfile>a05237.html</anchorfile>
      <anchor>a367509fe9aa557c1b7acdf86a9e4fb8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIt</name>
      <anchorfile>a05237.html</anchorfile>
      <anchor>a1ed0fcb6fd8e9654a5c8531d2d31ecbb</anchor>
      <arglist>(const EdgeIt &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIt</name>
      <anchorfile>a05237.html</anchorfile>
      <anchor>a984660b6f8ca41cc1257f012f97f1a50</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIt</name>
      <anchorfile>a05237.html</anchorfile>
      <anchor>a5b832c64cc7e26a264cddbca7dbce41c</anchor>
      <arglist>(const Graph &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIt</name>
      <anchorfile>a05237.html</anchorfile>
      <anchor>ad8a7dee5bf5794f9f544f1bc94c284a8</anchor>
      <arglist>(const Graph &amp;, const Edge &amp;)</arglist>
    </member>
    <member kind="function">
      <type>EdgeIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a05237.html</anchorfile>
      <anchor>ac76a4784e377b27dbcc0a66ddda42c01</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::BpGraph::EdgeMap</name>
    <filename>a05173.html</filename>
    <templarg></templarg>
    <base>ReferenceMap&lt; Edge, T, T &amp;, const T &amp; &gt;</base>
    <member kind="function">
      <type></type>
      <name>EdgeMap</name>
      <anchorfile>a05173.html</anchorfile>
      <anchor>a936fb82b662304b902801caf54367491</anchor>
      <arglist>(const BpGraph &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeMap</name>
      <anchorfile>a05173.html</anchorfile>
      <anchor>a8f0b346008754604ea220bb1f8914569</anchor>
      <arglist>(const BpGraph &amp;, T)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>EdgeMap</name>
      <anchorfile>a05173.html</anchorfile>
      <anchor>ac8f04bd14f33e7130c8190d667639f86</anchor>
      <arglist>(const EdgeMap &amp;em)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>EdgeMap &amp;</type>
      <name>operator=</name>
      <anchorfile>a05173.html</anchorfile>
      <anchor>a8bbbefbec36b47dd490dadd63a0a7bfd</anchor>
      <arglist>(const CMap &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::Graph::EdgeMap</name>
    <filename>a05269.html</filename>
    <templarg></templarg>
    <base>ReferenceMap&lt; Edge, T, T &amp;, const T &amp; &gt;</base>
    <member kind="function">
      <type></type>
      <name>EdgeMap</name>
      <anchorfile>a05269.html</anchorfile>
      <anchor>a168c15d8d818b62e17ffec8bbafb1acb</anchor>
      <arglist>(const Graph &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeMap</name>
      <anchorfile>a05269.html</anchorfile>
      <anchor>a924256b62bbfbe886d1eb9a79d3f7670</anchor>
      <arglist>(const Graph &amp;, T)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>EdgeMap</name>
      <anchorfile>a05269.html</anchorfile>
      <anchor>ac8f04bd14f33e7130c8190d667639f86</anchor>
      <arglist>(const EdgeMap &amp;em)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>EdgeMap &amp;</type>
      <name>operator=</name>
      <anchorfile>a05269.html</anchorfile>
      <anchor>a8bbbefbec36b47dd490dadd63a0a7bfd</anchor>
      <arglist>(const CMap &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::MappableGraphComponent::EdgeMap</name>
    <filename>a05441.html</filename>
    <templarg></templarg>
    <base>GraphMap&lt; MappableGraphComponent, Edge, V &gt;</base>
    <member kind="function">
      <type></type>
      <name>EdgeMap</name>
      <anchorfile>a05441.html</anchorfile>
      <anchor>a6ae16313000b2c034cfb6184dcd58f99</anchor>
      <arglist>(const MappableGraphComponent &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeMap</name>
      <anchorfile>a05441.html</anchorfile>
      <anchor>a250e683cf375f94ad2a3181ecf35335f</anchor>
      <arglist>(const MappableGraphComponent &amp;graph, const V &amp;value)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>EdgeMap</name>
      <anchorfile>a05441.html</anchorfile>
      <anchor>a53231e3e624ba6d6f5c17ea58c5b7a75</anchor>
      <arglist>(const EdgeMap &amp;nm)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>EdgeMap &amp;</type>
      <name>operator=</name>
      <anchorfile>a05441.html</anchorfile>
      <anchor>a8bbbefbec36b47dd490dadd63a0a7bfd</anchor>
      <arglist>(const CMap &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::EdmondsKarp</name>
    <filename>a02553.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a92ec4a47dbfc2c305415f69d2c9897e4</anchor>
      <arglist>(const FlowMap &amp;flowMap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkedInit</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>aaecaa382881804e00b0eac86601f6323</anchor>
      <arglist>(const FlowMap &amp;flowMap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>augment</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>aac7f521b61097eae729916c2ce419246</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flowValue</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>ad3279fc2ec83194c2bb611d9d4a33a8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a78a9b58c8fbb38efb1f99ce8009f99ec</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>minCut</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>adb2ed0e37aa5a581482ff978d90b4e8d</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minCutMap</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>aa733020852cfccc000f117f9e7479846</anchor>
      <arglist>(CutMap &amp;cutMap) const</arglist>
    </member>
    <class kind="struct">lemon::EdmondsKarp::SetFlowMap</class>
    <member kind="typedef">
      <type>TR</type>
      <name>Traits</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>aa6928feef02be4f2a184775d19dc6373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap</type>
      <name>CapacityMap</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a9eeec06f304c4b0e7ec59d26ea8698a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Value</type>
      <name>Value</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a1c7478783a00413767196fd8d82ad8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::FlowMap</type>
      <name>FlowMap</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>acbaaf29d0c8168790ab0da45dad92c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Tolerance</type>
      <name>Tolerance</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a926a96c583959d256c1316a2aca3ce22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdmondsKarp</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a23b3345b69d5205b7813bc411f36d2ae</anchor>
      <arglist>(const Digraph &amp;digraph, const CapacityMap &amp;capacity, Node source, Node target)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EdmondsKarp</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a3892aa590576b0c5dd545bd6778988c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EdmondsKarp &amp;</type>
      <name>capacityMap</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a1e9e748cada16e30fa0256765256f648</anchor>
      <arglist>(const CapacityMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>EdmondsKarp &amp;</type>
      <name>flowMap</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>adc573e8da9e80a6978c18f29094b53ca</anchor>
      <arglist>(FlowMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>EdmondsKarp &amp;</type>
      <name>source</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a928c9a37a5664d61043b7851b845f5a6</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>EdmondsKarp &amp;</type>
      <name>target</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>aa72e7a5670c6a99ffd8028abac44fec6</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>EdmondsKarp &amp;</type>
      <name>tolerance</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a51d8b037a057e71c5d3216997cfc904e</anchor>
      <arglist>(const Tolerance &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const Tolerance &amp;</type>
      <name>tolerance</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>aec76cbbff18f655dd34a7020418965bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a92ec4a47dbfc2c305415f69d2c9897e4</anchor>
      <arglist>(const FlowMap &amp;flowMap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkedInit</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>aaecaa382881804e00b0eac86601f6323</anchor>
      <arglist>(const FlowMap &amp;flowMap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>augment</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>aac7f521b61097eae729916c2ce419246</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flowValue</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>ad3279fc2ec83194c2bb611d9d4a33a8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a78a9b58c8fbb38efb1f99ce8009f99ec</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>minCut</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>adb2ed0e37aa5a581482ff978d90b4e8d</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minCutMap</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>aa733020852cfccc000f117f9e7479846</anchor>
      <arglist>(CutMap &amp;cutMap) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EdmondsKarp&lt; Digraph, CapacityMap, SetFlowMapTraits&lt; T &gt; &gt;</name>
    <filename>a02553.html</filename>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flowValue</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>ad3279fc2ec83194c2bb611d9d4a33a8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a78a9b58c8fbb38efb1f99ce8009f99ec</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>minCut</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>adb2ed0e37aa5a581482ff978d90b4e8d</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minCutMap</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>aa733020852cfccc000f117f9e7479846</anchor>
      <arglist>(CutMap &amp;cutMap) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a92ec4a47dbfc2c305415f69d2c9897e4</anchor>
      <arglist>(const FlowMap &amp;flowMap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkedInit</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>aaecaa382881804e00b0eac86601f6323</anchor>
      <arglist>(const FlowMap &amp;flowMap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>augment</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>aac7f521b61097eae729916c2ce419246</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>SetFlowMapTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>aa6928feef02be4f2a184775d19dc6373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap</type>
      <name>CapacityMap</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a9eeec06f304c4b0e7ec59d26ea8698a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Value</type>
      <name>Value</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a1c7478783a00413767196fd8d82ad8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::FlowMap</type>
      <name>FlowMap</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>acbaaf29d0c8168790ab0da45dad92c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Tolerance</type>
      <name>Tolerance</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a926a96c583959d256c1316a2aca3ce22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdmondsKarp</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a23b3345b69d5205b7813bc411f36d2ae</anchor>
      <arglist>(const Digraph &amp;digraph, const CapacityMap &amp;capacity, Node source, Node target)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EdmondsKarp</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a3892aa590576b0c5dd545bd6778988c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EdmondsKarp &amp;</type>
      <name>capacityMap</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a1e9e748cada16e30fa0256765256f648</anchor>
      <arglist>(const CapacityMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>EdmondsKarp &amp;</type>
      <name>flowMap</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>adc573e8da9e80a6978c18f29094b53ca</anchor>
      <arglist>(FlowMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>EdmondsKarp &amp;</type>
      <name>source</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a928c9a37a5664d61043b7851b845f5a6</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>EdmondsKarp &amp;</type>
      <name>target</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>aa72e7a5670c6a99ffd8028abac44fec6</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>EdmondsKarp &amp;</type>
      <name>tolerance</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a51d8b037a057e71c5d3216997cfc904e</anchor>
      <arglist>(const Tolerance &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const Tolerance &amp;</type>
      <name>tolerance</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>aec76cbbff18f655dd34a7020418965bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flowValue</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>ad3279fc2ec83194c2bb611d9d4a33a8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a78a9b58c8fbb38efb1f99ce8009f99ec</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>minCut</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>adb2ed0e37aa5a581482ff978d90b4e8d</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minCutMap</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>aa733020852cfccc000f117f9e7479846</anchor>
      <arglist>(CutMap &amp;cutMap) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a92ec4a47dbfc2c305415f69d2c9897e4</anchor>
      <arglist>(const FlowMap &amp;flowMap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkedInit</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>aaecaa382881804e00b0eac86601f6323</anchor>
      <arglist>(const FlowMap &amp;flowMap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>augment</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>aac7f521b61097eae729916c2ce419246</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::EdmondsKarpDefaultTraits</name>
    <filename>a02549.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a02549.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CAP</type>
      <name>CapacityMap</name>
      <anchorfile>a02549.html</anchorfile>
      <anchor>a10f68c1f869f7e1be967acfbd9750290</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CapacityMap::Value</type>
      <name>Value</name>
      <anchorfile>a02549.html</anchorfile>
      <anchor>af751c878eda966b90fa4fdf5f1915eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GR::ArcMap&lt; Value &gt;</type>
      <name>FlowMap</name>
      <anchorfile>a02549.html</anchorfile>
      <anchor>a96d8e23f3aa7e1f5c97c91eae139de3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lemon::Tolerance&lt; Value &gt;</type>
      <name>Tolerance</name>
      <anchorfile>a02549.html</anchorfile>
      <anchor>ac8d81c6484d646b8881c72707f2527d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FlowMap *</type>
      <name>createFlowMap</name>
      <anchorfile>a02549.html</anchorfile>
      <anchor>afd79e520abbe90ea86b8013071afb57b</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::Elevator</name>
    <filename>a02565.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>Item</type>
      <name>highestActive</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>ae705c89b74ba93a8d0030a73c32a6c55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>highestActiveLevel</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>af0d0300a784833d553460afc1a880e85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>liftHighestActive</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>ad448db204a4dc8bcb628933f31a113d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>liftHighestActive</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>a744a06f7232fcac254c31fe9b2b879b0</anchor>
      <arglist>(int new_level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>liftHighestActiveToTop</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>afa70a583d65837a24a1c86bf52a6fdc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>activeOn</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>aeb4d7e1e5f1f7400a2ef6d62420dfd1f</anchor>
      <arglist>(int l) const</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>liftActiveOn</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>a4e2a5214802d2fac206445d347757251</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>liftActiveOn</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>a2a5c7fcaf906c207748cbc6a2993ceb3</anchor>
      <arglist>(int level, int new_level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>liftActiveToTop</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>ae396f5ceb651cfc812eee9737a5fbd79</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initStart</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>a92a97cb68d6dbaf545fa72b36dfa3cd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initAddItem</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>a64a9da3e23ab4c7248a6efcde26b1064</anchor>
      <arglist>(Item i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initNewLevel</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>aa8880e6363f8b0c2e012a03cb8bc0d77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initFinish</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>afaee4c060888616a45d071530326ea8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Elevator</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>ac5d91754365aee61cba08bc0706fda0f</anchor>
      <arglist>(const GR &amp;graph, int max_level)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Elevator</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>aedd805b73161ff74106bb1cbb18ae976</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>a4db11bfc0b64725808f2cedf6efe85bc</anchor>
      <arglist>(Item i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deactivate</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>a6399621b031eeef6b06bf4f25d0922c7</anchor>
      <arglist>(Item i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>active</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>a7108409e037a22bb883d251a4df9d75f</anchor>
      <arglist>(Item i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator[]</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>a0037dfd997d392339662c54108f3c52d</anchor>
      <arglist>(Item i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onLevel</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>a425728c27c25500924171d82d907d2cb</anchor>
      <arglist>(int l) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyLevel</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>adaef76e27a2462ce4f8afa63768c0e54</anchor>
      <arglist>(int l) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>aboveLevel</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>a971d829fbfdd63633d871715d41a8266</anchor>
      <arglist>(int l) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>activesOnLevel</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>a245c078bd901f23e0123534d43504693</anchor>
      <arglist>(int l) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>activeFree</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>a3c0217ceafea30c1c583eaf4f96172a5</anchor>
      <arglist>(int l) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>aae3e60918141bd57c813d7cd8b12bc75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lift</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>a9e8cac16792c7bdac1584828690059a5</anchor>
      <arglist>(Item i, int new_level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dirtyTopButOne</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>a45c945d67da38b2225cf6c34504cdb08</anchor>
      <arglist>(Item i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>liftToTop</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>af2c6a1f548364b1447a377c311eb948e</anchor>
      <arglist>(int l)</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>highestActive</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>ae705c89b74ba93a8d0030a73c32a6c55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>highestActiveLevel</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>af0d0300a784833d553460afc1a880e85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>liftHighestActive</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>ad448db204a4dc8bcb628933f31a113d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>liftHighestActive</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>a744a06f7232fcac254c31fe9b2b879b0</anchor>
      <arglist>(int new_level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>liftHighestActiveToTop</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>afa70a583d65837a24a1c86bf52a6fdc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>activeOn</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>aeb4d7e1e5f1f7400a2ef6d62420dfd1f</anchor>
      <arglist>(int l) const</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>liftActiveOn</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>a4e2a5214802d2fac206445d347757251</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>liftActiveOn</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>a2a5c7fcaf906c207748cbc6a2993ceb3</anchor>
      <arglist>(int level, int new_level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>liftActiveToTop</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>ae396f5ceb651cfc812eee9737a5fbd79</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initStart</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>a92a97cb68d6dbaf545fa72b36dfa3cd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initAddItem</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>a64a9da3e23ab4c7248a6efcde26b1064</anchor>
      <arglist>(Item i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initNewLevel</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>aa8880e6363f8b0c2e012a03cb8bc0d77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initFinish</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>afaee4c060888616a45d071530326ea8b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::EqualMap</name>
    <filename>a03549.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>MapBase&lt; M1::Key, bool &gt;</base>
    <member kind="typedef">
      <type>M1::Key</type>
      <name>Key</name>
      <anchorfile>a03549.html</anchorfile>
      <anchor>ac16c774bd2b82a45854c3ac66248de01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>Value</name>
      <anchorfile>a03549.html</anchorfile>
      <anchor>aaf2b2f1e7bba19591a125e352c5d7bda</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualMap</name>
      <anchorfile>a03549.html</anchorfile>
      <anchor>af6ecf4896a47999967b6622d3f50b5b1</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03549.html</anchorfile>
      <anchor>a8de1b13f44fab45faa8daa93027f9df2</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>EqualMap&lt; M1, M2 &gt;</type>
      <name>equalMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>gaabcc26e4e6ddc3ff6b98801c115b26bc</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::ErasableBpGraphComponent</name>
    <filename>a05513.html</filename>
    <templarg></templarg>
    <base>ErasableGraphComponent&lt; BaseBpGraphComponent &gt;</base>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::ErasableDigraphComponent</name>
    <filename>a05497.html</filename>
    <templarg></templarg>
    <base>lemon::concepts::BaseDigraphComponent</base>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a05497.html</anchorfile>
      <anchor>ab5aaeeb174f6471064c2eddced9e5c5e</anchor>
      <arglist>(const Node &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a05497.html</anchorfile>
      <anchor>a401f60df04443410c880f0dc9c1d899e</anchor>
      <arglist>(const Arc &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::ErasableGraphComponent</name>
    <filename>a05505.html</filename>
    <templarg></templarg>
    <base>lemon::concepts::BaseGraphComponent</base>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a05505.html</anchorfile>
      <anchor>ab5aaeeb174f6471064c2eddced9e5c5e</anchor>
      <arglist>(const Node &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a05505.html</anchorfile>
      <anchor>a2adc2f58e71cb69dac3c9a5d211e2d82</anchor>
      <arglist>(const Edge &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ErasableGraphComponent&lt; BaseBpGraphComponent &gt;</name>
    <filename>a05505.html</filename>
    <base>lemon::concepts::BaseBpGraphComponent</base>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a05505.html</anchorfile>
      <anchor>ab5aaeeb174f6471064c2eddced9e5c5e</anchor>
      <arglist>(const Node &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a05505.html</anchorfile>
      <anchor>a2adc2f58e71cb69dac3c9a5d211e2d82</anchor>
      <arglist>(const Edge &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::EulerIt</name>
    <filename>a02589.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>EulerIt</name>
      <anchorfile>a02589.html</anchorfile>
      <anchor>adeeac6d3cfe48af7b2452144c3fbf6e7</anchor>
      <arglist>(const GR &amp;gr, typename GR::Node start=INVALID)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Arc</name>
      <anchorfile>a02589.html</anchorfile>
      <anchor>a435e7990d5f173e02eda8dcb1be99bf4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Edge</name>
      <anchorfile>a02589.html</anchorfile>
      <anchor>ad055e5dd2130562d1b5886440bedcb62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02589.html</anchorfile>
      <anchor>a8d6f49632ab9a9e02a777155052628c3</anchor>
      <arglist>(Invalid) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02589.html</anchorfile>
      <anchor>a7f49ed3e47c513d4466fe349c188ad1c</anchor>
      <arglist>(Invalid) const</arglist>
    </member>
    <member kind="function">
      <type>EulerIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a02589.html</anchorfile>
      <anchor>ae0ec7d0bf98e60f122625acb3450928f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>operator++</name>
      <anchorfile>a02589.html</anchorfile>
      <anchor>a5bdbff064cd6005e3b154c18d3b21df7</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::Exception</name>
    <filename>a02573.html</filename>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>a02573.html</anchorfile>
      <anchor>abfbc23b99b2e78b609d50ac688611236</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Exception</name>
      <anchorfile>a02573.html</anchorfile>
      <anchor>ae55b5e05d3195ae27204e3a2395e54e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>a02573.html</anchorfile>
      <anchor>ad62489809e3df568e973597b928d6d9b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::LpBase::Expr</name>
    <filename>a03361.html</filename>
    <class kind="class">lemon::LpBase::Expr::CoeffIt</class>
    <class kind="class">lemon::LpBase::Expr::ConstCoeffIt</class>
    <member kind="typedef">
      <type>LpBase::Col</type>
      <name>Key</name>
      <anchorfile>a03361.html</anchorfile>
      <anchor>abfaaaa30fd6c82b0a45041e2f5ba58b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LpBase::Value</type>
      <name>Value</name>
      <anchorfile>a03361.html</anchorfile>
      <anchor>a032494d683f041c4f7747c474a044c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>a03361.html</anchorfile>
      <anchor>abc3c54e9ecf73d4054d8ef45fdbb6a54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>a03361.html</anchorfile>
      <anchor>a0c91aa73ea30ab88abdac335b18de1f8</anchor>
      <arglist>(const Col &amp;c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>a03361.html</anchorfile>
      <anchor>a692099ab161f0bae46c205b7fff4ec32</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03361.html</anchorfile>
      <anchor>a6b0b06d28bb21c74fa47cd813e54fd80</anchor>
      <arglist>(const Col &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a03361.html</anchorfile>
      <anchor>acde22c2fa83e22b68b4062954a94c4d3</anchor>
      <arglist>(const Col &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03361.html</anchorfile>
      <anchor>a45f0a1a4ccd25f30c350e03c025c99d4</anchor>
      <arglist>(const Col &amp;c, const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator*</name>
      <anchorfile>a03361.html</anchorfile>
      <anchor>a153207f2745305ea9d834e3ad5ad99ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator*</name>
      <anchorfile>a03361.html</anchorfile>
      <anchor>a94c2cb00389ca25a69e2534d50709feb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>simplify</name>
      <anchorfile>a03361.html</anchorfile>
      <anchor>aa0a8cc3641e02a96fa39d303b0f88b3d</anchor>
      <arglist>(Value epsilon=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a03361.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Expr &amp;</type>
      <name>operator+=</name>
      <anchorfile>a03361.html</anchorfile>
      <anchor>a7da807a52dd8199a4b6f0e095c5e3466</anchor>
      <arglist>(const Expr &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>Expr &amp;</type>
      <name>operator-=</name>
      <anchorfile>a03361.html</anchorfile>
      <anchor>aea5575e382c1eb0514af4a7b6b371af7</anchor>
      <arglist>(const Expr &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>Expr &amp;</type>
      <name>operator*=</name>
      <anchorfile>a03361.html</anchorfile>
      <anchor>a450a32ebed0e3d97cf73a3fd2d3f5228</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Expr &amp;</type>
      <name>operator/=</name>
      <anchorfile>a03361.html</anchorfile>
      <anchor>a41962013d47d284a5785143ff306ac8a</anchor>
      <arglist>(const Value &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>LpBase::Expr</type>
      <name>operator+</name>
      <anchorfile>a03361.html</anchorfile>
      <anchor>a96cb600aab6d3a1cd79355e5e7ef7615</anchor>
      <arglist>(const LpBase::Expr &amp;a, const LpBase::Expr &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>LpBase::Expr</type>
      <name>operator-</name>
      <anchorfile>a03361.html</anchorfile>
      <anchor>ac2b4b41c4a456533dfcf1d00150ada41</anchor>
      <arglist>(const LpBase::Expr &amp;a, const LpBase::Expr &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>LpBase::Expr</type>
      <name>operator*</name>
      <anchorfile>a03361.html</anchorfile>
      <anchor>a6994c853574fe469fa348cd5ac359363</anchor>
      <arglist>(const LpBase::Expr &amp;a, const LpBase::Value &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>LpBase::Expr</type>
      <name>operator*</name>
      <anchorfile>a03361.html</anchorfile>
      <anchor>a5b279048337eb708f35fda03684bd20d</anchor>
      <arglist>(const LpBase::Value &amp;a, const LpBase::Expr &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>LpBase::Expr</type>
      <name>operator/</name>
      <anchorfile>a03361.html</anchorfile>
      <anchor>a91e1c295db53e190588c1b5e8e1be009</anchor>
      <arglist>(const LpBase::Expr &amp;a, const LpBase::Value &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::ExtendableBpGraphComponent</name>
    <filename>a05489.html</filename>
    <templarg></templarg>
    <base>lemon::concepts::BaseBpGraphComponent</base>
    <member kind="function">
      <type>RedNode</type>
      <name>addRedNode</name>
      <anchorfile>a05489.html</anchorfile>
      <anchor>a3a95276b83b5a39135c100a32e2be340</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BlueNode</type>
      <name>addBlueNode</name>
      <anchorfile>a05489.html</anchorfile>
      <anchor>aad169db9a3cf4752c8405f83099f6d47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Edge</type>
      <name>addEdge</name>
      <anchorfile>a05489.html</anchorfile>
      <anchor>ab3bbaab44d474156f628d9aa4db59997</anchor>
      <arglist>(const RedNode &amp;, const BlueNode &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::ExtendableDigraphComponent</name>
    <filename>a05473.html</filename>
    <templarg></templarg>
    <base>lemon::concepts::BaseDigraphComponent</base>
    <member kind="function">
      <type>Node</type>
      <name>addNode</name>
      <anchorfile>a05473.html</anchorfile>
      <anchor>a96838566b12a6b04795db38688bad1a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>addArc</name>
      <anchorfile>a05473.html</anchorfile>
      <anchor>add1d7458968c541deb2e77847700c818</anchor>
      <arglist>(const Node &amp;, const Node &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::ExtendableGraphComponent</name>
    <filename>a05481.html</filename>
    <templarg></templarg>
    <base>lemon::concepts::BaseGraphComponent</base>
    <member kind="function">
      <type>Node</type>
      <name>addNode</name>
      <anchorfile>a05481.html</anchorfile>
      <anchor>a96838566b12a6b04795db38688bad1a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Edge</type>
      <name>addEdge</name>
      <anchorfile>a05481.html</anchorfile>
      <anchor>a0b9661080220dd051f3ac469581a793e</anchor>
      <arglist>(const Node &amp;, const Node &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ExtendFindEnum</name>
    <filename>a04381.html</filename>
    <templarg></templarg>
    <class kind="class">lemon::ExtendFindEnum::ClassIt</class>
    <class kind="class">lemon::ExtendFindEnum::ItemIt</class>
    <member kind="typedef">
      <type>IM</type>
      <name>ItemIntMap</name>
      <anchorfile>a04381.html</anchorfile>
      <anchor>ac00a2d6f039b6e8ffc0641530bdf5304</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ItemIntMap::Key</type>
      <name>Item</name>
      <anchorfile>a04381.html</anchorfile>
      <anchor>a70025b32b600038ee2981a3deab1a783</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExtendFindEnum</name>
      <anchorfile>a04381.html</anchorfile>
      <anchor>ab94083163188959d9fcfa940c6e640b7</anchor>
      <arglist>(ItemIntMap &amp;_index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a04381.html</anchorfile>
      <anchor>a59869ec643e4a302e58808739ad532ec</anchor>
      <arglist>(const Item &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a04381.html</anchorfile>
      <anchor>a1762b08b3b35b8b1a3d1f6d26f389fd1</anchor>
      <arglist>(const Item &amp;item, int cls)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a04381.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchorfile>a04381.html</anchorfile>
      <anchor>a9ca2e6cba218180f759b3fb54880f4a8</anchor>
      <arglist>(const Item &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>item</name>
      <anchorfile>a04381.html</anchorfile>
      <anchor>a3d19d234dbb32719a2edea613149bc6b</anchor>
      <arglist>(int cls) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a04381.html</anchorfile>
      <anchor>ab71f9a526f9dfa9ded1fdd78189c3e37</anchor>
      <arglist>(const Item &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseClass</name>
      <anchorfile>a04381.html</anchorfile>
      <anchor>a2174a725c3a68a866b49d43142bc3d29</anchor>
      <arglist>(int cdx)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::IterableBoolMap::FalseIt</name>
    <filename>a03609.html</filename>
    <member kind="function">
      <type></type>
      <name>FalseIt</name>
      <anchorfile>a03609.html</anchorfile>
      <anchor>a994746ebdb6752ba3c98de8322281286</anchor>
      <arglist>(const IterableBoolMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FalseIt</name>
      <anchorfile>a03609.html</anchorfile>
      <anchor>ae046098f35b31c8245ca7e6502803836</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type>FalseIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a03609.html</anchorfile>
      <anchor>a644cff8d4d687bcb26a93c65e056ed04</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::FalseMap</name>
    <filename>a03529.html</filename>
    <templarg></templarg>
    <base>MapBase&lt; K, bool &gt;</base>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a03529.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>Value</name>
      <anchorfile>a03529.html</anchorfile>
      <anchor>aaf2b2f1e7bba19591a125e352c5d7bda</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03529.html</anchorfile>
      <anchor>a2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>FalseMap&lt; K &gt;</type>
      <name>falseMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gac84b9c1328d8cd93e401782f1c3f70a7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::FibHeap</name>
    <filename>a02593.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumeration">
      <type></type>
      <name>State</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_HEAP</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a213759402d071be3f66f8cf86641bb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRE_HEAP</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a12f201f9d13d106e81658dad7e7c9c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POST_HEAP</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8acd215e97251c1085a8b299c068e7172d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IM</type>
      <name>ItemIntMap</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>ac00a2d6f039b6e8ffc0641530bdf5304</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PR</type>
      <name>Prio</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>a644810a55913c9e8b24511758574d6d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ItemIntMap::Key</type>
      <name>Item</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>a70025b32b600038ee2981a3deab1a783</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Item, Prio &gt;</type>
      <name>Pair</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>a616fe456bc4c8eddf813c4f5665e1180</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CMP</type>
      <name>Compare</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>a937d59343e7b08b620805162c2e52ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_HEAP</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a213759402d071be3f66f8cf86641bb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRE_HEAP</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a12f201f9d13d106e81658dad7e7c9c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POST_HEAP</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8acd215e97251c1085a8b299c068e7172d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FibHeap</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>ab3f82678fc257f80edb84d5d9b9383ee</anchor>
      <arglist>(ItemIntMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FibHeap</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>a0e30d9a6f76348e7060c856f45183cfb</anchor>
      <arglist>(ItemIntMap &amp;map, const Compare &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>a644718bb2fb240de962dc3c9a1fdf0dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>a91ce50223ca87ce2bea7ff34b356bf05</anchor>
      <arglist>(const Item &amp;item, const Prio &amp;prio)</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>top</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>a3c68736e00411448ff7acf175015cc1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Prio</type>
      <name>prio</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>aa453ea5d0eb1b666a14a104659ae49dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>a312e7f6c761a199c1369fbe651e084f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>ab71f9a526f9dfa9ded1fdd78189c3e37</anchor>
      <arglist>(const Item &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>Prio</type>
      <name>operator[]</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>a29b5b6e7d58c3e510dd88925726eafe5</anchor>
      <arglist>(const Item &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>a772cfdb561758bb4ea2fc22d9877acef</anchor>
      <arglist>(const Item &amp;item, const Prio &amp;prio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrease</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>a784fd9312710aecd837d1b1e65319f07</anchor>
      <arglist>(const Item &amp;item, const Prio &amp;prio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increase</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>acd8d4d49c8b6ad29d35fa0a90969ef48</anchor>
      <arglist>(const Item &amp;item, const Prio &amp;prio)</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>state</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>ac849c1efcb5d7c12a1419f97d669f7cb</anchor>
      <arglist>(const Item &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>state</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>a7d0ca230d438efaad53833701d9cb262</anchor>
      <arglist>(const Item &amp;i, State st)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::FilterArcs</name>
    <filename>a01501.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>DGR</type>
      <name>Digraph</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a6435ad6a242e3d323a0dfffd053d9584</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AF</type>
      <name>ArcFilterMap</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a059cdfd6d771a5bc57e8aaee120c3407</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FilterArcs</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a9273e96f98a5aa99ea93fb0e770e8e4e</anchor>
      <arglist>(DGR &amp;digraph, ArcFilterMap &amp;arc_filter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a494d1741a860ba072d870e488ace51cb</anchor>
      <arglist>(const Arc &amp;a, bool v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>status</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>ad87ad1346b9e9300d94d7bbc65bca501</anchor>
      <arglist>(const Arc &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a14c4b60be8bed7bae52159f264d21480</anchor>
      <arglist>(const Arc &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>abe7bf35e0c9d7d7647b8e756fa7ee022</anchor>
      <arglist>(const Arc &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>FilterArcs&lt; const DGR, AF &gt;</type>
      <name>filterArcs</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>gad6a800aaf8aa5c85de6ab3ff3b828905</anchor>
      <arglist>(const DGR &amp;digraph, AF &amp;arc_filter)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::FilterEdges</name>
    <filename>a01505.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Graph</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a2a51ae337b207f01f1c904f5eb2aa98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EF</type>
      <name>EdgeFilterMap</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>ac2f0212f10cc7aa26b76d2a113e963c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FilterEdges</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a857bb05088a80cbe464ce993c9744037</anchor>
      <arglist>(GR &amp;graph, EF &amp;edge_filter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a0af2c26dc2e39712a5e51883b52d231e</anchor>
      <arglist>(const Edge &amp;e, bool v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>status</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a5ff7a86a357bfff42d52ea32b3e8550c</anchor>
      <arglist>(const Edge &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a0acd289d290eb8616610f0840936a86d</anchor>
      <arglist>(const Edge &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a1d0f88de550f130eccd15e2f0e2877b0</anchor>
      <arglist>(const Edge &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>FilterEdges&lt; const GR, EF &gt;</type>
      <name>filterEdges</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>gaddd9874f4d5ad214e8f0d4f252c989ee</anchor>
      <arglist>(const GR &amp;graph, EF &amp;edge_filter)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::FilterNodes</name>
    <filename>a01493.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>FilterNodes</name>
      <anchorfile>a01493.html</anchorfile>
      <anchor>a3acbedd2d3b60c3e7c8c1913ba47d8cd</anchor>
      <arglist>(GR &amp;graph, NF &amp;node_filter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>a01493.html</anchorfile>
      <anchor>a3070f4604a7464bb8c2fb68085581d9c</anchor>
      <arglist>(const Node &amp;n, bool v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>status</name>
      <anchorfile>a01493.html</anchorfile>
      <anchor>a3c03793419eff46552bdc7ab53d506f9</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>a01493.html</anchorfile>
      <anchor>a7c5a4c09cafd0ec56be5c4e631cbc4dd</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>a01493.html</anchorfile>
      <anchor>a8e109721033aa9fca373b1f5109bdeba</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>FilterNodes&lt; const GR, NF &gt;</type>
      <name>filterNodes</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>gaa682c0f382bd7ea7227e29c5d45fd33d</anchor>
      <arglist>(const GR &amp;graph, NF &amp;node_filter)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ForkMap</name>
    <filename>a03477.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>MapBase&lt; M1::Key, M1::Value &gt;</base>
    <member kind="typedef">
      <type>M1::Key</type>
      <name>Key</name>
      <anchorfile>a03477.html</anchorfile>
      <anchor>ac16c774bd2b82a45854c3ac66248de01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M1::Value</type>
      <name>Value</name>
      <anchorfile>a03477.html</anchorfile>
      <anchor>a087615b851ee4b1f01463e4589205d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForkMap</name>
      <anchorfile>a03477.html</anchorfile>
      <anchor>a34d7446a3070acc4225e771654bce223</anchor>
      <arglist>(M1 &amp;m1, M2 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03477.html</anchorfile>
      <anchor>a8de1b13f44fab45faa8daa93027f9df2</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03477.html</anchorfile>
      <anchor>a6ac83be911521f604e18f3df0d678213</anchor>
      <arglist>(const Key &amp;k, const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ForkMap&lt; M1, M2 &gt;</type>
      <name>forkMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga7b7cf375700909175bae19eee48a9962</anchor>
      <arglist>(M1 &amp;m1, M2 &amp;m2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::FormatError</name>
    <filename>a02581.html</filename>
    <base>lemon::Exception</base>
    <member kind="function">
      <type></type>
      <name>FormatError</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>aa42ee28488e2b7bd6183b748bef48e67</anchor>
      <arglist>(const FormatError &amp;error)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormatError</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>a6d87564747176f0f8a357ccc2ea5f24b</anchor>
      <arglist>(const char *message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormatError</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>ae14f2a9e1d948374ef4aef96cd37029d</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormatError</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>a0e80334858898227937fec2734861b95</anchor>
      <arglist>(const char *message, const std::string &amp;file, int line=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormatError</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>a82f37328bb116765af91c298a15e62b4</anchor>
      <arglist>(const std::string &amp;message, const std::string &amp;file, int line=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FormatError</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>a1f920f082438639877ff7f2959715a74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>line</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>a51e985445b7c0be388784e41241e0a96</anchor>
      <arglist>(int line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>message</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>a7a46a349ff3098534da81350a6fec061</anchor>
      <arglist>(const char *message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>message</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>a6db7001e8987fe0bed56f41e53dd4fee</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>file</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>a51d6a4ade7b21409a4070f3d27c954bf</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>line</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>a9834cd1b21362a1c8b503e9eab45c406</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>message</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>a77c231e47051f5ce971c8f1ce5976b41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>file</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>af6d370d625075908b4db29cece240972</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>ad62489809e3df568e973597b928d6d9b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ForwardMap</name>
    <filename>a03657.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR::Edge</type>
      <name>Key</name>
      <anchorfile>a03657.html</anchorfile>
      <anchor>a491252d778b36b9c24dbcf1d7223548b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GR::Arc</type>
      <name>Value</name>
      <anchorfile>a03657.html</anchorfile>
      <anchor>a7978efb40d60889c1a35fd580c9d7d67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForwardMap</name>
      <anchorfile>a03657.html</anchorfile>
      <anchor>aca82dbed2eb0ffb8552c017000ba1512</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03657.html</anchorfile>
      <anchor>a9ac2d4975d0586c2793b6ff53ab35431</anchor>
      <arglist>(const Key &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>ForwardMap&lt; GR &gt;</type>
      <name>forwardMap</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga658f2b3a54c7e6e15b47b38bbc588e46</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::FullBpGraph</name>
    <filename>a02701.html</filename>
    <member kind="function">
      <type></type>
      <name>FullBpGraph</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>abc7c05e9365c30bf769e3e97a5032335</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullBpGraph</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>aab84448cec3ded27de38f2bb335835fa</anchor>
      <arglist>(int redNum, int blueNum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>ab93c5ab92bb59fcab06c4dfee228f216</anchor>
      <arglist>(int redNum, int blueNum)</arglist>
    </member>
    <member kind="function">
      <type>RedNode</type>
      <name>redNode</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a440db0f06a245d8f99db1143891af9b9</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>aaa77b33399e01c527fb692d171c85bb9</anchor>
      <arglist>(RedNode node) const</arglist>
    </member>
    <member kind="function">
      <type>BlueNode</type>
      <name>blueNode</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>aee821cda89a693a75e85a9f20ee77373</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>ac98ef409abd14563524917e434769632</anchor>
      <arglist>(BlueNode node) const</arglist>
    </member>
    <member kind="function">
      <type>Edge</type>
      <name>edge</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>ac30091ad6178863f09368d5c6d4891f3</anchor>
      <arglist>(const Node &amp;u, const Node &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>arc</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>ae3d6820488dc702d87860d4d178a4887</anchor>
      <arglist>(const Node &amp;u, const Node &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nodeNum</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a150d74302d3b5274897d44b27ee79b6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>redNum</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a010f7487e99934b6b293c00823ee0ad7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>blueNum</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>abc66cf4c9e79bc376b279d0feccc0a97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>arcNum</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>afc6b72e37021f6a497e83e98418ed3b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>edgeNum</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a9ed0629d3fba2c67bc0d2da2ccbb5a38</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::FullDigraph</name>
    <filename>a02653.html</filename>
    <member kind="function">
      <type></type>
      <name>FullDigraph</name>
      <anchorfile>a02653.html</anchorfile>
      <anchor>a8efcbbf06d26f743ebb266ceb4ca1a2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullDigraph</name>
      <anchorfile>a02653.html</anchorfile>
      <anchor>a79330852030897096b3c56124e78c91b</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02653.html</anchorfile>
      <anchor>a578be9c59132b8633a67a98c39318777</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>operator()</name>
      <anchorfile>a02653.html</anchorfile>
      <anchor>ad73c71467ff26ecbab90bc0e66b55c7e</anchor>
      <arglist>(int ix) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>arc</name>
      <anchorfile>a02653.html</anchorfile>
      <anchor>aa784c3edc38da13f1c6563adaaeb3726</anchor>
      <arglist>(Node u, Node v) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nodeNum</name>
      <anchorfile>a02653.html</anchorfile>
      <anchor>a150d74302d3b5274897d44b27ee79b6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>arcNum</name>
      <anchorfile>a02653.html</anchorfile>
      <anchor>afc6b72e37021f6a497e83e98418ed3b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>index</name>
      <anchorfile>a02653.html</anchorfile>
      <anchor>aa2c4526a503bb0dbebd87c4fba5e3a7b</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::FullGraph</name>
    <filename>a02673.html</filename>
    <member kind="function">
      <type></type>
      <name>FullGraph</name>
      <anchorfile>a02673.html</anchorfile>
      <anchor>a9064d1ac89eab29b8f2951ce080d4e87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullGraph</name>
      <anchorfile>a02673.html</anchorfile>
      <anchor>a01cb8bb8e0b8f898ffeb33348c48fad2</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02673.html</anchorfile>
      <anchor>a578be9c59132b8633a67a98c39318777</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>operator()</name>
      <anchorfile>a02673.html</anchorfile>
      <anchor>ad73c71467ff26ecbab90bc0e66b55c7e</anchor>
      <arglist>(int ix) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>arc</name>
      <anchorfile>a02673.html</anchorfile>
      <anchor>afae056cc48b8a38aa8251270d3268730</anchor>
      <arglist>(Node s, Node t) const</arglist>
    </member>
    <member kind="function">
      <type>Edge</type>
      <name>edge</name>
      <anchorfile>a02673.html</anchorfile>
      <anchor>a2f8fc0674676c993da97b66dff812cba</anchor>
      <arglist>(Node u, Node v) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nodeNum</name>
      <anchorfile>a02673.html</anchorfile>
      <anchor>a150d74302d3b5274897d44b27ee79b6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>arcNum</name>
      <anchorfile>a02673.html</anchorfile>
      <anchor>afc6b72e37021f6a497e83e98418ed3b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>edgeNum</name>
      <anchorfile>a02673.html</anchorfile>
      <anchor>a9ed0629d3fba2c67bc0d2da2ccbb5a38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>index</name>
      <anchorfile>a02673.html</anchorfile>
      <anchor>aa2c4526a503bb0dbebd87c4fba5e3a7b</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::FunctorToMap</name>
    <filename>a03465.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>MapBase&lt; typename F::argument_type, typename F::result_type &gt;</base>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a03465.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a03465.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctorToMap</name>
      <anchorfile>a03465.html</anchorfile>
      <anchor>adc7f90e90bf894dc1bddda3846a6f294</anchor>
      <arglist>(const F &amp;f=F())</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03465.html</anchorfile>
      <anchor>a8de1b13f44fab45faa8daa93027f9df2</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>FunctorToMap&lt; F, K, V &gt;</type>
      <name>functorToMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>gab0aac0bb0604df94df88ad5fef5f391c</anchor>
      <arglist>(const F &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::GlpkBase</name>
    <filename>a02709.html</filename>
    <base virtualness="virtual">lemon::LpBase</base>
    <member kind="function">
      <type>_solver_bits::VoidPtr</type>
      <name>lpx</name>
      <anchorfile>a02709.html</anchorfile>
      <anchor>adf0d2711307da6c7cb6acee24458f699</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>_solver_bits::VoidPtr</type>
      <name>lpx</name>
      <anchorfile>a02709.html</anchorfile>
      <anchor>ac4702edcab45ce4addf65dd1e57b6163</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lpxRow</name>
      <anchorfile>a02709.html</anchorfile>
      <anchor>a66bb615654ed280a45e96e6c574f865c</anchor>
      <arglist>(Row r) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lpxCol</name>
      <anchorfile>a02709.html</anchorfile>
      <anchor>a3d37e686b33bebfb9408af870ae75a3a</anchor>
      <arglist>(Col c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02709.html</anchorfile>
      <anchor>a01fb09b584b86088a044612f90401291</anchor>
      <arglist>(std::string file, std::string format=&quot;MPS&quot;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::GlpkLp</name>
    <filename>a02717.html</filename>
    <base>lemon::LpSolver</base>
    <base>lemon::GlpkBase</base>
    <member kind="function">
      <type></type>
      <name>GlpkLp</name>
      <anchorfile>a02717.html</anchorfile>
      <anchor>a8fd9ded5caa626fdf9b1b67e0d4342f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlpkLp</name>
      <anchorfile>a02717.html</anchorfile>
      <anchor>abed5d680cd663d1ebf51276c5d40a3c4</anchor>
      <arglist>(const GlpkLp &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GlpkLp *</type>
      <name>cloneSolver</name>
      <anchorfile>a02717.html</anchorfile>
      <anchor>af5a1c320c6ae9fc1f0284e2718b59ef6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GlpkLp *</type>
      <name>newSolver</name>
      <anchorfile>a02717.html</anchorfile>
      <anchor>a7f9b05a26edf75ba2a72ff03bdc37082</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SolveExitStatus</type>
      <name>solvePrimal</name>
      <anchorfile>a02717.html</anchorfile>
      <anchor>a48d56f0dbe8b60dadfb9aa6f6e7a458a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SolveExitStatus</type>
      <name>solveDual</name>
      <anchorfile>a02717.html</anchorfile>
      <anchor>a2f2e89d8a3d14f3f86b38a67967df930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>presolver</name>
      <anchorfile>a02717.html</anchorfile>
      <anchor>ab03beab5ff5c12c7160c325c0b6995d6</anchor>
      <arglist>(bool presolve)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::GlpkMip</name>
    <filename>a02721.html</filename>
    <base>lemon::MipSolver</base>
    <base>lemon::GlpkBase</base>
    <member kind="function">
      <type></type>
      <name>GlpkMip</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>ad1601aa1469b52a8fef9e52050a3bc1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlpkMip</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>ab1c1ec0ee2201677230ce93a1c815c90</anchor>
      <arglist>(const GlpkMip &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::GomoryHu</name>
    <filename>a02725.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02725.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02725.html</anchorfile>
      <anchor>a51f9942574b9d4ae47783b07e13faef4</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>predValue</name>
      <anchorfile>a02725.html</anchorfile>
      <anchor>aa24e286feb497fddd0e43d38b63d97e4</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rootDist</name>
      <anchorfile>a02725.html</anchorfile>
      <anchor>aaa1115c6082e6058c76eeb64ce166b9d</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>minCutValue</name>
      <anchorfile>a02725.html</anchorfile>
      <anchor>a8bf40c05ded12fcdfaabf58061c40588</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>minCutMap</name>
      <anchorfile>a02725.html</anchorfile>
      <anchor>a4136fa1e709a285b8dab5681b1802156</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t, CutMap &amp;cutMap) const</arglist>
    </member>
    <class kind="class">lemon::GomoryHu::MinCutEdgeIt</class>
    <class kind="class">lemon::GomoryHu::MinCutNodeIt</class>
    <member kind="typedef">
      <type>GR</type>
      <name>Graph</name>
      <anchorfile>a02725.html</anchorfile>
      <anchor>a2a51ae337b207f01f1c904f5eb2aa98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CAP</type>
      <name>Capacity</name>
      <anchorfile>a02725.html</anchorfile>
      <anchor>a772fe38595302c3bf6c4e79765a37a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Capacity::Value</type>
      <name>Value</name>
      <anchorfile>a02725.html</anchorfile>
      <anchor>a316b6a8145c12ea1dbb1e1e36005a500</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GomoryHu</name>
      <anchorfile>a02725.html</anchorfile>
      <anchor>a31ffa12460cb7ae041f29f09fcd9b8f4</anchor>
      <arglist>(const Graph &amp;graph, const Capacity &amp;capacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GomoryHu</name>
      <anchorfile>a02725.html</anchorfile>
      <anchor>abb081203500b7357f28747e675cfd341</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02725.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>predNode</name>
      <anchorfile>a02725.html</anchorfile>
      <anchor>a51f9942574b9d4ae47783b07e13faef4</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>predValue</name>
      <anchorfile>a02725.html</anchorfile>
      <anchor>aa24e286feb497fddd0e43d38b63d97e4</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rootDist</name>
      <anchorfile>a02725.html</anchorfile>
      <anchor>aaa1115c6082e6058c76eeb64ce166b9d</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>minCutValue</name>
      <anchorfile>a02725.html</anchorfile>
      <anchor>a8bf40c05ded12fcdfaabf58061c40588</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>minCutMap</name>
      <anchorfile>a02725.html</anchorfile>
      <anchor>a4136fa1e709a285b8dab5681b1802156</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t, CutMap &amp;cutMap) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::Graph</name>
    <filename>a05221.html</filename>
    <class kind="class">lemon::concepts::Graph::Arc</class>
    <class kind="class">lemon::concepts::Graph::ArcIt</class>
    <class kind="class">lemon::concepts::Graph::ArcMap</class>
    <class kind="class">lemon::concepts::Graph::Edge</class>
    <class kind="class">lemon::concepts::Graph::EdgeIt</class>
    <class kind="class">lemon::concepts::Graph::EdgeMap</class>
    <class kind="class">lemon::concepts::Graph::InArcIt</class>
    <class kind="class">lemon::concepts::Graph::IncEdgeIt</class>
    <class kind="class">lemon::concepts::Graph::Node</class>
    <class kind="class">lemon::concepts::Graph::NodeIt</class>
    <class kind="class">lemon::concepts::Graph::NodeMap</class>
    <class kind="class">lemon::concepts::Graph::OutArcIt</class>
    <member kind="typedef">
      <type>True</type>
      <name>UndirectedTag</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>aede403f4c863f2249a26de6a33fd47ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Graph</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>afc5ef9d72cc2c509814200791eaef62c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>u</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>aaff253595b1ecf3e15fa29157f7614a9</anchor>
      <arglist>(Edge) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>v</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>afb439539201363cbba6b46c5cacc461c</anchor>
      <arglist>(Edge) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>source</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>ac9e85ffa6cef50642d14bc9d7f74118e</anchor>
      <arglist>(Arc) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>target</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>ad9deab53b077f969c9054767d4eee7bc</anchor>
      <arglist>(Arc) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>a240c393e310b09179b74109a34832b58</anchor>
      <arglist>(Node) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>a5f82017f218cd48acafebe266ca31052</anchor>
      <arglist>(Edge) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>acba549328ff17e8e575761a43828713c</anchor>
      <arglist>(Arc) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nodeFromId</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>a488cc53bcd9ed8678754bc1428680b92</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>Edge</type>
      <name>edgeFromId</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>a67b3d9ab84d7920ff7adabaffb0aa648</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>arcFromId</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>a6f1576e59fcda989af46733714ffb1a7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxNodeId</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>a0e562aee6515586e90822ad0929d6742</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxEdgeId</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>a383c35dde7ea8d457fe879145585c550</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxArcId</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>a40414a15ee291ba518da15d6996ab61d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>direction</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>a3f4da685e191b989cb034a701aa70d19</anchor>
      <arglist>(Arc) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>direct</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>a4f66ff9786677f090a66745cdb3cf630</anchor>
      <arglist>(Edge, bool) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>direct</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>aed3fa7ff5afe5270a4da05432bc15463</anchor>
      <arglist>(Edge, Node) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>oppositeArc</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>ac7ff65c85b654367c9e41571ccbb830f</anchor>
      <arglist>(Arc) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>oppositeNode</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>a881246d96f8f757f23490c8c30016869</anchor>
      <arglist>(Node, Edge) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>baseNode</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>a58e9568fc1817eab27698269ca154dd6</anchor>
      <arglist>(IncEdgeIt) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>runningNode</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>a468a4b9f92e3df664344f2e6aa88c29c</anchor>
      <arglist>(IncEdgeIt) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>baseNode</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>a6f0f66cde63d5e9d7f0642746d840230</anchor>
      <arglist>(OutArcIt) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>runningNode</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>a110eaf7c8fb037e7f9feb93bc44cf7ce</anchor>
      <arglist>(OutArcIt) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>baseNode</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>a581bb7d2e756fac2d971849e60e98297</anchor>
      <arglist>(InArcIt) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>runningNode</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>af1b3356047758dcc08d4f7b2d1adae8f</anchor>
      <arglist>(InArcIt) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Graph</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>a12f75f10f87092e6a58597cbfe17944c</anchor>
      <arglist>(const Graph &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a05221.html</anchorfile>
      <anchor>aaf27dcefe2d6b16c1ae6029f229ebe7b</anchor>
      <arglist>(const Graph &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::GraphCopy</name>
    <filename>a02061.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>GraphCopy</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>a2279b087a65e31ed8414893fc247dd29</anchor>
      <arglist>(const From &amp;from, To &amp;to)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GraphCopy</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>a10f931e6776ec70ec988c4fc02bef370</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GraphCopy &amp;</type>
      <name>nodeRef</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>abe33ade893c171fbca1e42250040a846</anchor>
      <arglist>(NodeRef &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>GraphCopy &amp;</type>
      <name>nodeCrossRef</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>a4f1a6179bd93461b05a763353d5cc713</anchor>
      <arglist>(NodeCrossRef &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>GraphCopy &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>aa8a325d792933931a2420ffe82f1611f</anchor>
      <arglist>(const FromMap &amp;map, ToMap &amp;tmap)</arglist>
    </member>
    <member kind="function">
      <type>GraphCopy &amp;</type>
      <name>node</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>ab9178da29ca4df86abb9c729c6f3e354</anchor>
      <arglist>(const Node &amp;node, TNode &amp;tnode)</arglist>
    </member>
    <member kind="function">
      <type>GraphCopy &amp;</type>
      <name>arcRef</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>ae9754377f4dc67779a30055ad6745885</anchor>
      <arglist>(ArcRef &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>GraphCopy &amp;</type>
      <name>arcCrossRef</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>af789998bb2f9adfeaef7cfd040e991ca</anchor>
      <arglist>(ArcCrossRef &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>GraphCopy &amp;</type>
      <name>arcMap</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>afeafda374d4cad185755811326398576</anchor>
      <arglist>(const FromMap &amp;map, ToMap &amp;tmap)</arglist>
    </member>
    <member kind="function">
      <type>GraphCopy &amp;</type>
      <name>arc</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>a1a0c870e83efb89541ab51bf35944366</anchor>
      <arglist>(const Arc &amp;arc, TArc &amp;tarc)</arglist>
    </member>
    <member kind="function">
      <type>GraphCopy &amp;</type>
      <name>edgeRef</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>af91de782b50a44a7da07984c5f1d1c8e</anchor>
      <arglist>(EdgeRef &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>GraphCopy &amp;</type>
      <name>edgeCrossRef</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>a49664d231463c080f54ebd3299cd1121</anchor>
      <arglist>(EdgeCrossRef &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>GraphCopy &amp;</type>
      <name>edgeMap</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>a38765d68158b090273579d5296ab8d36</anchor>
      <arglist>(const FromMap &amp;map, ToMap &amp;tmap)</arglist>
    </member>
    <member kind="function">
      <type>GraphCopy &amp;</type>
      <name>edge</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>afe6d74446b39b082adc66f14fc01f206</anchor>
      <arglist>(const Edge &amp;edge, TEdge &amp;tedge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::GraphIncIt</name>
    <filename>a05353.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>sel</templarg>
    <member kind="function">
      <type></type>
      <name>GraphIncIt</name>
      <anchorfile>a05353.html</anchorfile>
      <anchor>a22a7a460818da92ce6d2221439a3b22a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphIncIt</name>
      <anchorfile>a05353.html</anchorfile>
      <anchor>ad82ba99734592401b5add691c846bb2c</anchor>
      <arglist>(const GraphIncIt &amp;it)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphIncIt</name>
      <anchorfile>a05353.html</anchorfile>
      <anchor>a88c15f8f8a74c8718d785aea76f9ce8a</anchor>
      <arglist>(const GR &amp;, const Base &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphIncIt</name>
      <anchorfile>a05353.html</anchorfile>
      <anchor>ae40351291ee4baa092d4ed2f7c5e9965</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type>GraphIncIt &amp;</type>
      <name>operator=</name>
      <anchorfile>a05353.html</anchorfile>
      <anchor>a5ba4779ba432ac93c39d53b080405540</anchor>
      <arglist>(const GraphIncIt &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GraphIncIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a05353.html</anchorfile>
      <anchor>adc2a7ca00385a31a33522708d9455785</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a05353.html</anchorfile>
      <anchor>ac3b3a67450a556dce966ca4d6547b863</anchor>
      <arglist>(const GraphIncIt &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a05353.html</anchorfile>
      <anchor>acac8799aedcdac835051b133596043cb</anchor>
      <arglist>(const GraphIncIt &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::GraphItem</name>
    <filename>a05277.html</filename>
    <member kind="function">
      <type></type>
      <name>GraphItem</name>
      <anchorfile>a05277.html</anchorfile>
      <anchor>addc79191559edeabf17f9aaaa379d65c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphItem</name>
      <anchorfile>a05277.html</anchorfile>
      <anchor>aa009ad8dc27673e336aa9b34f56b6e45</anchor>
      <arglist>(const GraphItem &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphItem</name>
      <anchorfile>a05277.html</anchorfile>
      <anchor>a0037239921556cd688a4cc9a6b7b726f</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type>GraphItem &amp;</type>
      <name>operator=</name>
      <anchorfile>a05277.html</anchorfile>
      <anchor>a5b20b906a9d9d43e64ded0f7472467c7</anchor>
      <arglist>(const GraphItem &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GraphItem &amp;</type>
      <name>operator=</name>
      <anchorfile>a05277.html</anchorfile>
      <anchor>a3bf66158fd6071e0e7769dfeed6bd8d1</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a05277.html</anchorfile>
      <anchor>abe06ca3c28fa18e282d82f16cd3a62d2</anchor>
      <arglist>(const GraphItem &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a05277.html</anchorfile>
      <anchor>ab4b59b475af4dd172a428a4c5996ba38</anchor>
      <arglist>(const GraphItem &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a05277.html</anchorfile>
      <anchor>a54481ce099a416aa89ffdcd7be5c0966</anchor>
      <arglist>(const GraphItem &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GraphItem&lt; &apos;e&apos;&gt;</name>
    <filename>a05277.html</filename>
    <member kind="function">
      <type></type>
      <name>GraphItem</name>
      <anchorfile>a05277.html</anchorfile>
      <anchor>addc79191559edeabf17f9aaaa379d65c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphItem</name>
      <anchorfile>a05277.html</anchorfile>
      <anchor>aa009ad8dc27673e336aa9b34f56b6e45</anchor>
      <arglist>(const GraphItem &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphItem</name>
      <anchorfile>a05277.html</anchorfile>
      <anchor>a0037239921556cd688a4cc9a6b7b726f</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type>GraphItem &amp;</type>
      <name>operator=</name>
      <anchorfile>a05277.html</anchorfile>
      <anchor>a5b20b906a9d9d43e64ded0f7472467c7</anchor>
      <arglist>(const GraphItem &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GraphItem &amp;</type>
      <name>operator=</name>
      <anchorfile>a05277.html</anchorfile>
      <anchor>a3bf66158fd6071e0e7769dfeed6bd8d1</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a05277.html</anchorfile>
      <anchor>abe06ca3c28fa18e282d82f16cd3a62d2</anchor>
      <arglist>(const GraphItem &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a05277.html</anchorfile>
      <anchor>ab4b59b475af4dd172a428a4c5996ba38</anchor>
      <arglist>(const GraphItem &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a05277.html</anchorfile>
      <anchor>a54481ce099a416aa89ffdcd7be5c0966</anchor>
      <arglist>(const GraphItem &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::GraphItemIt</name>
    <filename>a05345.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>GraphItemIt</name>
      <anchorfile>a05345.html</anchorfile>
      <anchor>acfcfa98b379e0464ef00f3d78bb70d0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphItemIt</name>
      <anchorfile>a05345.html</anchorfile>
      <anchor>a17274619ee8e0bcf7f5e9381f1ccc8d4</anchor>
      <arglist>(const GraphItemIt &amp;it)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphItemIt</name>
      <anchorfile>a05345.html</anchorfile>
      <anchor>a9a7a333aaec82d1e1155381c69f29162</anchor>
      <arglist>(const GR &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphItemIt</name>
      <anchorfile>a05345.html</anchorfile>
      <anchor>a8d5d10baef4798ddfc3a13669da49c45</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type>GraphItemIt &amp;</type>
      <name>operator=</name>
      <anchorfile>a05345.html</anchorfile>
      <anchor>a68532251c9cba526d3110151535eef72</anchor>
      <arglist>(const GraphItemIt &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GraphItemIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a05345.html</anchorfile>
      <anchor>afcff4a2fb279bec74692e105212e7bef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a05345.html</anchorfile>
      <anchor>ae15b6c8f8a968253e90ffbbbaf8f7179</anchor>
      <arglist>(const GraphItemIt &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a05345.html</anchorfile>
      <anchor>a414a8e8de0a6c4d1b81a3d6742ffa103</anchor>
      <arglist>(const GraphItemIt &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::GraphMap</name>
    <filename>a05409.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>ReferenceMap&lt; K, V, V &amp;, const V &amp; &gt;</base>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value &amp;</type>
      <name>Reference</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>ae36c42dfba46c6fd74d7d85a4fc27d57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Value &amp;</type>
      <name>ConstReference</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a33899f17b36f4c01c39f333a0a6f989b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphMap</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a12ff6931f03d1c6d324f2c29fe7cf206</anchor>
      <arglist>(const GR &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphMap</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a1f126a3fc1d22face02b15fc9a091ace</anchor>
      <arglist>(const GR &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>GraphMap</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>ab57bf8ab328b83859f80c6ae379bb4a8</anchor>
      <arglist>(const GraphMap &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>GraphMap &amp;</type>
      <name>operator=</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a9e04de2058c0b76922deb5f308cfd47a</anchor>
      <arglist>(const CMap &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GraphMap&lt; MappableBpGraphComponent, Node, V &gt;</name>
    <filename>a05409.html</filename>
    <base>ReferenceMap&lt; Node, V, V &amp;, const V &amp; &gt;</base>
    <member kind="typedef">
      <type>Node</type>
      <name>Key</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value &amp;</type>
      <name>Reference</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>ae36c42dfba46c6fd74d7d85a4fc27d57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Value &amp;</type>
      <name>ConstReference</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a33899f17b36f4c01c39f333a0a6f989b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphMap</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a12ff6931f03d1c6d324f2c29fe7cf206</anchor>
      <arglist>(const MappableBpGraphComponent &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphMap</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a1f126a3fc1d22face02b15fc9a091ace</anchor>
      <arglist>(const MappableBpGraphComponent &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>GraphMap</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>ab57bf8ab328b83859f80c6ae379bb4a8</anchor>
      <arglist>(const GraphMap &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>GraphMap &amp;</type>
      <name>operator=</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a9e04de2058c0b76922deb5f308cfd47a</anchor>
      <arglist>(const CMap &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GraphMap&lt; MappableDigraphComponent, Arc, V &gt;</name>
    <filename>a05409.html</filename>
    <base>ReferenceMap&lt; Arc, V, V &amp;, const V &amp; &gt;</base>
    <member kind="typedef">
      <type>Arc</type>
      <name>Key</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value &amp;</type>
      <name>Reference</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>ae36c42dfba46c6fd74d7d85a4fc27d57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Value &amp;</type>
      <name>ConstReference</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a33899f17b36f4c01c39f333a0a6f989b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphMap</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a12ff6931f03d1c6d324f2c29fe7cf206</anchor>
      <arglist>(const MappableDigraphComponent &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphMap</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a1f126a3fc1d22face02b15fc9a091ace</anchor>
      <arglist>(const MappableDigraphComponent &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>GraphMap</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>ab57bf8ab328b83859f80c6ae379bb4a8</anchor>
      <arglist>(const GraphMap &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>GraphMap &amp;</type>
      <name>operator=</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a9e04de2058c0b76922deb5f308cfd47a</anchor>
      <arglist>(const CMap &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GraphMap&lt; MappableDigraphComponent, Node, V &gt;</name>
    <filename>a05409.html</filename>
    <base>ReferenceMap&lt; Node, V, V &amp;, const V &amp; &gt;</base>
    <member kind="typedef">
      <type>Node</type>
      <name>Key</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value &amp;</type>
      <name>Reference</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>ae36c42dfba46c6fd74d7d85a4fc27d57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Value &amp;</type>
      <name>ConstReference</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a33899f17b36f4c01c39f333a0a6f989b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphMap</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a12ff6931f03d1c6d324f2c29fe7cf206</anchor>
      <arglist>(const MappableDigraphComponent &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphMap</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a1f126a3fc1d22face02b15fc9a091ace</anchor>
      <arglist>(const MappableDigraphComponent &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>GraphMap</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>ab57bf8ab328b83859f80c6ae379bb4a8</anchor>
      <arglist>(const GraphMap &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>GraphMap &amp;</type>
      <name>operator=</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a9e04de2058c0b76922deb5f308cfd47a</anchor>
      <arglist>(const CMap &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GraphMap&lt; MappableGraphComponent, Edge, V &gt;</name>
    <filename>a05409.html</filename>
    <base>ReferenceMap&lt; Edge, V, V &amp;, const V &amp; &gt;</base>
    <member kind="typedef">
      <type>Edge</type>
      <name>Key</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value &amp;</type>
      <name>Reference</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>ae36c42dfba46c6fd74d7d85a4fc27d57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Value &amp;</type>
      <name>ConstReference</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a33899f17b36f4c01c39f333a0a6f989b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphMap</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a12ff6931f03d1c6d324f2c29fe7cf206</anchor>
      <arglist>(const MappableGraphComponent &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphMap</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a1f126a3fc1d22face02b15fc9a091ace</anchor>
      <arglist>(const MappableGraphComponent &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>GraphMap</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>ab57bf8ab328b83859f80c6ae379bb4a8</anchor>
      <arglist>(const GraphMap &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>GraphMap &amp;</type>
      <name>operator=</name>
      <anchorfile>a05409.html</anchorfile>
      <anchor>a9e04de2058c0b76922deb5f308cfd47a</anchor>
      <arglist>(const CMap &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::GraphReader</name>
    <filename>a03129.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a720aac417a10a30f0af145afb314e873</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>aa16cd6d00901a250114e69a2e0f51faa</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>edgeMap</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a7ec9b3ce7eb6402614c5c1a14e068392</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>edgeMap</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a31efbf80b253438bcba78b8252eacd73</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>arcMap</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a2d368171cae20ef6a88dd67d516c9920</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>arcMap</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>aa77414eba08f7a41e7919c56cea655b1</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>attribute</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>aefc73e66afc1dc6f7f5d1f14398bca5e</anchor>
      <arglist>(const std::string &amp;caption, Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>attribute</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a38640ad634f71244eb49e544d7180ee8</anchor>
      <arglist>(const std::string &amp;caption, Value &amp;value, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>node</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a935bba5e66fdd35b12fcdbef9a6d9d19</anchor>
      <arglist>(const std::string &amp;caption, Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>edge</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a2a2aa1c80b27367bd2dcf27ded51780e</anchor>
      <arglist>(const std::string &amp;caption, Edge &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>arc</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a57595f8f77dcd876743db6735d98d6a1</anchor>
      <arglist>(const std::string &amp;caption, Arc &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>nodes</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a1d460fd7a3dda23c377cc030273e7a4e</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>edges</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a2325d91e1fffd75860a83e76a0d9dd32</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>attributes</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>af685594e06cd5d28ea88d79f9a9dcb8c</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>useNodes</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a687f5f5f4a691e00b306535a9bb488f9</anchor>
      <arglist>(const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>useNodes</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>ae7abcf0bf8a1c65e6bfad2b4d3a31780</anchor>
      <arglist>(const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>useEdges</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a96d4e7917de064f3be15c82716de81cb</anchor>
      <arglist>(const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>useEdges</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a94e655491e76d4eb9adeb2d2ec517d3f</anchor>
      <arglist>(const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>skipNodes</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a136054a5ccb371c0fcc1a45294d2a5e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>skipEdges</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>aa655ba72248a83e55b0f6f5cf1ffb78d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphReader</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>ad0d38d468b2bab5026101734a162702b</anchor>
      <arglist>(GR &amp;graph, std::istream &amp;is=std::cin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphReader</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a4b7d9443c22683c2efa9edfd85326da1</anchor>
      <arglist>(GR &amp;graph, const std::string &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphReader</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a4a91fbd433d48e5553bf2f8532eedc2a</anchor>
      <arglist>(GR &amp;graph, const char *fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GraphReader</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a602ecd8550acd9a47d3e845046dedc46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a720aac417a10a30f0af145afb314e873</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>aa16cd6d00901a250114e69a2e0f51faa</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>edgeMap</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a7ec9b3ce7eb6402614c5c1a14e068392</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>edgeMap</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a31efbf80b253438bcba78b8252eacd73</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>arcMap</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a2d368171cae20ef6a88dd67d516c9920</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>arcMap</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>aa77414eba08f7a41e7919c56cea655b1</anchor>
      <arglist>(const std::string &amp;caption, Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>attribute</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>aefc73e66afc1dc6f7f5d1f14398bca5e</anchor>
      <arglist>(const std::string &amp;caption, Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>attribute</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a38640ad634f71244eb49e544d7180ee8</anchor>
      <arglist>(const std::string &amp;caption, Value &amp;value, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>node</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a935bba5e66fdd35b12fcdbef9a6d9d19</anchor>
      <arglist>(const std::string &amp;caption, Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>edge</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a2a2aa1c80b27367bd2dcf27ded51780e</anchor>
      <arglist>(const std::string &amp;caption, Edge &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>arc</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a57595f8f77dcd876743db6735d98d6a1</anchor>
      <arglist>(const std::string &amp;caption, Arc &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>nodes</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a1d460fd7a3dda23c377cc030273e7a4e</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>edges</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a2325d91e1fffd75860a83e76a0d9dd32</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>attributes</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>af685594e06cd5d28ea88d79f9a9dcb8c</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>useNodes</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a687f5f5f4a691e00b306535a9bb488f9</anchor>
      <arglist>(const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>useNodes</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>ae7abcf0bf8a1c65e6bfad2b4d3a31780</anchor>
      <arglist>(const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>useEdges</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a96d4e7917de064f3be15c82716de81cb</anchor>
      <arglist>(const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>useEdges</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a94e655491e76d4eb9adeb2d2ec517d3f</anchor>
      <arglist>(const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>skipNodes</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a136054a5ccb371c0fcc1a45294d2a5e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GraphReader &amp;</type>
      <name>skipEdges</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>aa655ba72248a83e55b0f6f5cf1ffb78d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GraphReader&lt; TGR &gt;</type>
      <name>graphReader</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>gafdffb110416b03a63e3486f8736b2c6c</anchor>
      <arglist>(TGR &amp;graph, std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader&lt; TGR &gt;</type>
      <name>graphReader</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>a18af167a68f1b4eb2ce2d9f74389f864</anchor>
      <arglist>(TGR &amp;graph, const std::string &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader&lt; TGR &gt;</type>
      <name>graphReader</name>
      <anchorfile>a03129.html</anchorfile>
      <anchor>adced1af678fe6ed1c716518ffe4ba0bd</anchor>
      <arglist>(TGR &amp;graph, const char *fn)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::GraphToEps</name>
    <filename>a02745.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>GraphToEps&lt; ArcWidthsTraits&lt; X &gt; &gt;</type>
      <name>edgeWidths</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>abbd39a2b17070d9eb06596602d2c1645</anchor>
      <arglist>(const X &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; ArcColorsTraits&lt; X &gt; &gt;</type>
      <name>edgeColors</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a554741a027cbf9de815c578db6346b1f</anchor>
      <arglist>(const X &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>edgeWidthScale</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a1aa0ca617588f0922679ec9a34b42e8c</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>autoEdgeWidthScale</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>abe5b9b9b28139e1eb38d2a67268897ff</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>absoluteEdgeWidths</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a26373d9622dd9292313b81e78381e852</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>parEdgeDist</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a7a58d26082b1c28cb83d7e79e993d21c</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>hideEdges</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a9afe60ce30d0481d04268dd0fc4674d2</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NodeShapes</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a30c21e7556892045cb4f5553dcc47ef7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CIRCLE</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a30c21e7556892045cb4f5553dcc47ef7aa79c827759ea48f0735386c4b1188911</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SQUARE</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a30c21e7556892045cb4f5553dcc47ef7a4233fbf0cafb86abcee94b38d769fc59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIAMOND</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a30c21e7556892045cb4f5553dcc47ef7a714f2cc5c292a305e2da3c03bd63916a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MALE</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a30c21e7556892045cb4f5553dcc47ef7a6e81fe1ef694726dd6f7246cfb42369f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEMALE</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a30c21e7556892045cb4f5553dcc47ef7adebb817413857eea6331734b76793159</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CIRCLE</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a30c21e7556892045cb4f5553dcc47ef7aa79c827759ea48f0735386c4b1188911</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SQUARE</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a30c21e7556892045cb4f5553dcc47ef7a4233fbf0cafb86abcee94b38d769fc59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIAMOND</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a30c21e7556892045cb4f5553dcc47ef7a714f2cc5c292a305e2da3c03bd63916a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MALE</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a30c21e7556892045cb4f5553dcc47ef7a6e81fe1ef694726dd6f7246cfb42369f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEMALE</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a30c21e7556892045cb4f5553dcc47ef7adebb817413857eea6331734b76793159</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; CoordsTraits&lt; X &gt; &gt;</type>
      <name>coords</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a0d11c25d82382b8ab09f034c94c65832</anchor>
      <arglist>(const X &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; NodeSizesTraits&lt; X &gt; &gt;</type>
      <name>nodeSizes</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>aff72b2c51861ee462ad023c7d319dd52</anchor>
      <arglist>(const X &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; NodeShapesTraits&lt; X &gt; &gt;</type>
      <name>nodeShapes</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a58737078462e7e34c66169ac0b874554</anchor>
      <arglist>(const X &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; NodeTextsTraits&lt; X &gt; &gt;</type>
      <name>nodeTexts</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a9c1d158b073ab950de692a53b0895776</anchor>
      <arglist>(const X &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; NodePsTextsTraits&lt; X &gt; &gt;</type>
      <name>nodePsTexts</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a3d0804bbd36f62d17532ccea1728575f</anchor>
      <arglist>(const X &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; ArcWidthsTraits&lt; X &gt; &gt;</type>
      <name>arcWidths</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>ac1d3d9be1a04faa0ed290ddc9d8e33c9</anchor>
      <arglist>(const X &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; NodeColorsTraits&lt; X &gt; &gt;</type>
      <name>nodeColors</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a16fabdc1e8a211b48023ee58629aefd9</anchor>
      <arglist>(const X &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; NodeTextColorsTraits&lt; X &gt; &gt;</type>
      <name>nodeTextColors</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a289b0bcc85f0e414e3a1b71291841145</anchor>
      <arglist>(const X &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; ArcColorsTraits&lt; X &gt; &gt;</type>
      <name>arcColors</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a7c1157145713ecfa18f55e7e38d1bd3b</anchor>
      <arglist>(const X &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>nodeScale</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>aeac1e05eca87ec3eb33567e31ef1a91c</anchor>
      <arglist>(double d=.01)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>autoNodeScale</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a8d190137dbe4aacfa7d5cfce809d9f75</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>absoluteNodeSizes</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>aa370a1dd4b34a5b82ff4c9d79790edd7</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>negateY</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a3104ccdec88f257754d817e4050530ae</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>preScale</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a728bce841b714ae589c110181e8f37f3</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>arcWidthScale</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>abf807dd381deda708eaceac647ddabf5</anchor>
      <arglist>(double d=.003)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>autoArcWidthScale</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>abd98d77a768da5b90d54f2503c43aea9</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>absoluteArcWidths</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a194970341303abd037ff052bf243f241</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>scale</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>ae974ab0876d042da85db8a365a2c7fad</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>border</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a6ee956315db169869d5e8b25d322855f</anchor>
      <arglist>(double b=10)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>border</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a3e60b386fd2382cfa00029b1c04ff125</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>drawArrows</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a5927ce2b5f72a0e077efed38c0a95064</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>arrowLength</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a134f596814e662f477366f2c777d8f65</anchor>
      <arglist>(double d=1.0)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>arrowWidth</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>adc664049d0ea2a763e742bc39f9e9b73</anchor>
      <arglist>(double d=.3)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>scaleToA4</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a85b25a0508ef21583dbda20251e675d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>enableParallel</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>abcdb13d61119d0484bd5e96f9e844c31</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>parArcDist</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a1b00550e4019644f4057d3aaf57726b2</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>hideArcs</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a5ef8417b40049c9d6411a68bd0682262</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>hideNodes</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a0b3ec217b0c0686b46980f812dfdd9ba</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>nodeTextSize</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a38eac3772663e5509aa45322ccd42bbc</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>distantColorNodeTexts</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a01072429fe9bae7a4766665e4c64bfb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>distantBWNodeTexts</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>afb1df0f6b681202ac8e74a2c9912ebe5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>nodePsTextsPreamble</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a43c32c975a0d66650b56999e739bc7cd</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>undirected</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a57f03f8f903d351350e0fd939cf97eb3</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>directed</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a5df7407bacfc9447bb237376cead4218</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>title</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a98feec1651e0184b26c2fb56aef2d18b</anchor>
      <arglist>(const std::string &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>copyright</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a7d899188733cc29477191a0ecd04619a</anchor>
      <arglist>(const std::string &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; ArcWidthsTraits&lt; X &gt; &gt;</type>
      <name>edgeWidths</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>abbd39a2b17070d9eb06596602d2c1645</anchor>
      <arglist>(const X &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; ArcColorsTraits&lt; X &gt; &gt;</type>
      <name>edgeColors</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a554741a027cbf9de815c578db6346b1f</anchor>
      <arglist>(const X &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>edgeWidthScale</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a1aa0ca617588f0922679ec9a34b42e8c</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>autoEdgeWidthScale</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>abe5b9b9b28139e1eb38d2a67268897ff</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>absoluteEdgeWidths</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a26373d9622dd9292313b81e78381e852</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>parEdgeDist</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a7a58d26082b1c28cb83d7e79e993d21c</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; T &gt; &amp;</type>
      <name>hideEdges</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a9afe60ce30d0481d04268dd0fc4674d2</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::GraphWriter</name>
    <filename>a03205.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>abaf355404ffb320000b96bd2b57bb7c1</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>a7f64b489d5f69fabc7cc15df058ab6a5</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>edgeMap</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>aa4a8bcebd59cabe0328fcdaab8d67dca</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>edgeMap</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>ae695b86045e4d3606775ab9f551959e6</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>arcMap</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>adf98b39abb41cdaaa4ce972b1902b92b</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>arcMap</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>ac211b62945a3e517a42676d5a330570e</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>attribute</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>ad81e5f81a810749cdd93638970ac793a</anchor>
      <arglist>(const std::string &amp;caption, const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>attribute</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>a4adb919d0bea4ae00b2c6477720711a8</anchor>
      <arglist>(const std::string &amp;caption, const Value &amp;value, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>node</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>a210e737325b8a2d0990a66ff75639bec</anchor>
      <arglist>(const std::string &amp;caption, const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>edge</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>a0a9ebc6f70e74576359e08de9eeafd38</anchor>
      <arglist>(const std::string &amp;caption, const Edge &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>arc</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>a7e6b1f036ccc517c53c26ab6151dadad</anchor>
      <arglist>(const std::string &amp;caption, const Arc &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>nodes</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>ad6e3b29651b774389d42facc4a718822</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>edges</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>a9f4d25e108365bcc0c8d8df345a4ea32</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>attributes</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>ae5ca855de0e76c596f49e8a728af5841</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>skipNodes</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>a7cac69b6df6f805859aa6382f72a9024</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>skipEdges</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>a55b1bc7b7d913f1a0a1e05134cede4db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>ostream</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>a0df4c16f48d0e3c9c5c0cd8a55d5b183</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphWriter</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>a048dd7d5e27e1c30f96e979f92f4ea3d</anchor>
      <arglist>(const GR &amp;graph, std::ostream &amp;os=std::cout)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphWriter</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>a6a03481bb09c2fdfe5371fc1cd6e90ea</anchor>
      <arglist>(const GR &amp;graph, const std::string &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphWriter</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>af23c37b427913cc3a001edb841e4ca85</anchor>
      <arglist>(const GR &amp;graph, const char *fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GraphWriter</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>a6da7b22b11b0cf823181f0e9847e3826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>abaf355404ffb320000b96bd2b57bb7c1</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>nodeMap</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>a7f64b489d5f69fabc7cc15df058ab6a5</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>edgeMap</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>aa4a8bcebd59cabe0328fcdaab8d67dca</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>edgeMap</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>ae695b86045e4d3606775ab9f551959e6</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>arcMap</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>adf98b39abb41cdaaa4ce972b1902b92b</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>arcMap</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>ac211b62945a3e517a42676d5a330570e</anchor>
      <arglist>(const std::string &amp;caption, const Map &amp;map, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>attribute</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>ad81e5f81a810749cdd93638970ac793a</anchor>
      <arglist>(const std::string &amp;caption, const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>attribute</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>a4adb919d0bea4ae00b2c6477720711a8</anchor>
      <arglist>(const std::string &amp;caption, const Value &amp;value, const Converter &amp;converter=Converter())</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>node</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>a210e737325b8a2d0990a66ff75639bec</anchor>
      <arglist>(const std::string &amp;caption, const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>edge</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>a0a9ebc6f70e74576359e08de9eeafd38</anchor>
      <arglist>(const std::string &amp;caption, const Edge &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>arc</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>a7e6b1f036ccc517c53c26ab6151dadad</anchor>
      <arglist>(const std::string &amp;caption, const Arc &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>nodes</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>ad6e3b29651b774389d42facc4a718822</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>edges</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>a9f4d25e108365bcc0c8d8df345a4ea32</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>attributes</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>ae5ca855de0e76c596f49e8a728af5841</anchor>
      <arglist>(const std::string &amp;caption)</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>skipNodes</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>a7cac69b6df6f805859aa6382f72a9024</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter &amp;</type>
      <name>skipEdges</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>a55b1bc7b7d913f1a0a1e05134cede4db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>ostream</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>a0df4c16f48d0e3c9c5c0cd8a55d5b183</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter&lt; TGR &gt;</type>
      <name>graphWriter</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>gae03a34e019c92c5383b4d4a188a3bae0</anchor>
      <arglist>(const TGR &amp;graph, std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter&lt; TGR &gt;</type>
      <name>graphWriter</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>a0253738e23b139b13b4dd59226975a14</anchor>
      <arglist>(const TGR &amp;graph, const std::string &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter&lt; TGR &gt;</type>
      <name>graphWriter</name>
      <anchorfile>a03205.html</anchorfile>
      <anchor>a62d67c675daa12f93ea7f37f616f61de</anchor>
      <arglist>(const TGR &amp;graph, const char *fn)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::GreedyTsp</name>
    <filename>a02789.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>Cost</type>
      <name>run</name>
      <anchorfile>a02789.html</anchorfile>
      <anchor>af294138cc991668caa699c9255c8f136</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>tourCost</name>
      <anchorfile>a02789.html</anchorfile>
      <anchor>a5bd0e49b03ec84f7cecd696886d57140</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Node &gt; &amp;</type>
      <name>tourNodes</name>
      <anchorfile>a02789.html</anchorfile>
      <anchor>a3a84c614d8b1b1ab72deed6063a92004</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tourNodes</name>
      <anchorfile>a02789.html</anchorfile>
      <anchor>a91e89199ba4d6cad1ba3a3506c21ef6a</anchor>
      <arglist>(Iterator out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tour</name>
      <anchorfile>a02789.html</anchorfile>
      <anchor>a6b952e6a8fcc5212f789fafb24314af4</anchor>
      <arglist>(Path &amp;path) const</arglist>
    </member>
    <member kind="typedef">
      <type>CM</type>
      <name>CostMap</name>
      <anchorfile>a02789.html</anchorfile>
      <anchor>a0e4fe3b3bd126f464294f661c36a61d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CM::Value</type>
      <name>Cost</name>
      <anchorfile>a02789.html</anchorfile>
      <anchor>a1a1dfba092aeec4656ebceaf99ca8b22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GreedyTsp</name>
      <anchorfile>a02789.html</anchorfile>
      <anchor>a02b07ecd025ae827ff29e6eb6e9271c4</anchor>
      <arglist>(const FullGraph &amp;gr, const CostMap &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>run</name>
      <anchorfile>a02789.html</anchorfile>
      <anchor>af294138cc991668caa699c9255c8f136</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>tourCost</name>
      <anchorfile>a02789.html</anchorfile>
      <anchor>a5bd0e49b03ec84f7cecd696886d57140</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Node &gt; &amp;</type>
      <name>tourNodes</name>
      <anchorfile>a02789.html</anchorfile>
      <anchor>a3a84c614d8b1b1ab72deed6063a92004</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tourNodes</name>
      <anchorfile>a02789.html</anchorfile>
      <anchor>a91e89199ba4d6cad1ba3a3506c21ef6a</anchor>
      <arglist>(Iterator out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tour</name>
      <anchorfile>a02789.html</anchorfile>
      <anchor>a6b952e6a8fcc5212f789fafb24314af4</anchor>
      <arglist>(Path &amp;path) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::GridGraph</name>
    <filename>a02813.html</filename>
    <class kind="class">lemon::GridGraph::ColMap</class>
    <class kind="class">lemon::GridGraph::IndexMap</class>
    <class kind="class">lemon::GridGraph::RowMap</class>
    <member kind="function">
      <type></type>
      <name>GridGraph</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a9592df3bc5a41604bcc6c08b17e6ccce</anchor>
      <arglist>(int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a56bfa8fae91947eb5802d2e208405904</anchor>
      <arglist>(int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>operator()</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a10e85a89f46aa23aaf316d35648ece64</anchor>
      <arglist>(int i, int j) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>col</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a711345353057a260e0fd1816186b4f23</anchor>
      <arglist>(Node n) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>row</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>af77efc817186035156d05d16b79fd69b</anchor>
      <arglist>(Node n) const</arglist>
    </member>
    <member kind="function">
      <type>dim2::Point&lt; int &gt;</type>
      <name>pos</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a5e981b8f343b64461361f9afb729f2fd</anchor>
      <arglist>(Node n) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>width</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>ad72663daf610f2a0833a2fc3d78e4fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>height</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>ad3774f6419003470f54fd495124ef51f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>right</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>abaf04bb424c3b509f4485a86a99c59dd</anchor>
      <arglist>(Node n) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>left</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a2950c11d1bd2e5d0a3e00421905d0ab5</anchor>
      <arglist>(Node n) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>up</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a0156ee209c9b4ad8ade299394687d98d</anchor>
      <arglist>(Node n) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>down</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a589a051975a6cdfb2cbbb6a7042ee6ba</anchor>
      <arglist>(Node n) const</arglist>
    </member>
    <member kind="function">
      <type>IndexMap</type>
      <name>indexMap</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a949b5d8ca601fb44f7711214a735eb1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RowMap</type>
      <name>rowMap</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>ab79a8642c2fca6c32c16eb07db343885</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColMap</type>
      <name>colMap</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>aee39f27be3883b8050501c953e1d52be</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::GrossoLocatelliPullanMc</name>
    <filename>a02829.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>GrossoLocatelliPullanMc &amp;</type>
      <name>iterationLimit</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a3f36bb3202fc23244af7acb817629231</anchor>
      <arglist>(int limit)</arglist>
    </member>
    <member kind="function">
      <type>GrossoLocatelliPullanMc &amp;</type>
      <name>stepLimit</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a571fc10bce39a08b13b6f0d7323c9d28</anchor>
      <arglist>(int limit)</arglist>
    </member>
    <member kind="function">
      <type>GrossoLocatelliPullanMc &amp;</type>
      <name>sizeLimit</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a25aefa84b83606d8210d0550c2a0f903</anchor>
      <arglist>(int limit)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>iterationLimit</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a98814f02dd7505770d85e672e3ed0fc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>stepLimit</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>ae7efde643b60b8f9cd51c1e17fdf686f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sizeLimit</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a037b3ca3ddaf4f15227c97ca8d3c241c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TerminationCause</type>
      <name>run</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a27021ed4b4a03d839c250df3695e2048</anchor>
      <arglist>(SelectionRule rule=PENALTY_BASED)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cliqueSize</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>aae4c48dbe83250ee8d52f4b2d02e0660</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cliqueMap</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>aa17b1fdeb5b3a133a5612952ae8d8727</anchor>
      <arglist>(CliqueMap &amp;map) const</arglist>
    </member>
    <class kind="class">lemon::GrossoLocatelliPullanMc::CliqueNodeIt</class>
    <member kind="enumeration">
      <type></type>
      <name>SelectionRule</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a434cb6429f314a1e6ea1c4f2d262708e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RANDOM</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a434cb6429f314a1e6ea1c4f2d262708eaa2b65445a3a16f164c5e811064d75726</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEGREE_BASED</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a434cb6429f314a1e6ea1c4f2d262708ea52018f7611e838b47b98efd925e7b7a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PENALTY_BASED</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a434cb6429f314a1e6ea1c4f2d262708ea41cf48432fc2603d02aad347ce48a7c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TerminationCause</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a70e8fb7e2e48605883db4d1109a5f79f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ITERATION_LIMIT</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a70e8fb7e2e48605883db4d1109a5f79fa2ae51471aa8024ea15450efeae10bf37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STEP_LIMIT</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a70e8fb7e2e48605883db4d1109a5f79fa15de6de02eba8ace6e49fcb713fa7164</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIZE_LIMIT</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a70e8fb7e2e48605883db4d1109a5f79fa9d932f1317a69d22804b2ea30fb00a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RANDOM</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a434cb6429f314a1e6ea1c4f2d262708eaa2b65445a3a16f164c5e811064d75726</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEGREE_BASED</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a434cb6429f314a1e6ea1c4f2d262708ea52018f7611e838b47b98efd925e7b7a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PENALTY_BASED</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a434cb6429f314a1e6ea1c4f2d262708ea41cf48432fc2603d02aad347ce48a7c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ITERATION_LIMIT</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a70e8fb7e2e48605883db4d1109a5f79fa2ae51471aa8024ea15450efeae10bf37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STEP_LIMIT</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a70e8fb7e2e48605883db4d1109a5f79fa15de6de02eba8ace6e49fcb713fa7164</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIZE_LIMIT</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a70e8fb7e2e48605883db4d1109a5f79fa9d932f1317a69d22804b2ea30fb00a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GrossoLocatelliPullanMc</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a9ab95afa7e1a9c4fd8619f98aaaa63a0</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GrossoLocatelliPullanMc</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a94157b6d74ac0f56a9ed6ad1dd1c8f02</anchor>
      <arglist>(const GR &amp;graph, int seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GrossoLocatelliPullanMc</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a127cbd3f9c20ce1bcbd934860d3b2ad9</anchor>
      <arglist>(const GR &amp;graph, const Random &amp;random)</arglist>
    </member>
    <member kind="function">
      <type>GrossoLocatelliPullanMc &amp;</type>
      <name>iterationLimit</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a3f36bb3202fc23244af7acb817629231</anchor>
      <arglist>(int limit)</arglist>
    </member>
    <member kind="function">
      <type>GrossoLocatelliPullanMc &amp;</type>
      <name>stepLimit</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a571fc10bce39a08b13b6f0d7323c9d28</anchor>
      <arglist>(int limit)</arglist>
    </member>
    <member kind="function">
      <type>GrossoLocatelliPullanMc &amp;</type>
      <name>sizeLimit</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a25aefa84b83606d8210d0550c2a0f903</anchor>
      <arglist>(int limit)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>iterationLimit</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a98814f02dd7505770d85e672e3ed0fc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>stepLimit</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>ae7efde643b60b8f9cd51c1e17fdf686f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sizeLimit</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a037b3ca3ddaf4f15227c97ca8d3c241c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TerminationCause</type>
      <name>run</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a27021ed4b4a03d839c250df3695e2048</anchor>
      <arglist>(SelectionRule rule=PENALTY_BASED)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cliqueSize</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>aae4c48dbe83250ee8d52f4b2d02e0660</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cliqueMap</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>aa17b1fdeb5b3a133a5612952ae8d8727</anchor>
      <arglist>(CliqueMap &amp;map) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::HaoOrlin</name>
    <filename>a02849.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02849.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02849.html</anchorfile>
      <anchor>a7cb8fc3003223031b35f3ba5fcfb2762</anchor>
      <arglist>(const Node &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateOut</name>
      <anchorfile>a02849.html</anchorfile>
      <anchor>ae495b2edefc81e20b797ee5b125d3955</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateIn</name>
      <anchorfile>a02849.html</anchorfile>
      <anchor>a3b2a8b9cda4a87593c4fdfc44afa15d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02849.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02849.html</anchorfile>
      <anchor>a429ed28d5b8fc2fd63dde71155213753</anchor>
      <arglist>(const Node &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>minCutValue</name>
      <anchorfile>a02849.html</anchorfile>
      <anchor>a839608849d9d1218bf5d1c0854f19ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>minCutMap</name>
      <anchorfile>a02849.html</anchorfile>
      <anchor>a86f34dc0d7ab98aa31c422b422236f55</anchor>
      <arglist>(CutMap &amp;cutMap) const</arglist>
    </member>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a02849.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CAP</type>
      <name>CapacityMap</name>
      <anchorfile>a02849.html</anchorfile>
      <anchor>a10f68c1f869f7e1be967acfbd9750290</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TOL</type>
      <name>Tolerance</name>
      <anchorfile>a02849.html</anchorfile>
      <anchor>a88c54a1e77557bd8734f1729e39b2602</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HaoOrlin</name>
      <anchorfile>a02849.html</anchorfile>
      <anchor>ab03a48e815fb5a8af4274cccd705a33c</anchor>
      <arglist>(const Digraph &amp;graph, const CapacityMap &amp;capacity, const Tolerance &amp;tolerance=Tolerance())</arglist>
    </member>
    <member kind="function">
      <type>HaoOrlin &amp;</type>
      <name>tolerance</name>
      <anchorfile>a02849.html</anchorfile>
      <anchor>ab801f9b363cf5bc1c949500098ffea71</anchor>
      <arglist>(const Tolerance &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const Tolerance &amp;</type>
      <name>tolerance</name>
      <anchorfile>a02849.html</anchorfile>
      <anchor>aec76cbbff18f655dd34a7020418965bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02849.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02849.html</anchorfile>
      <anchor>a7cb8fc3003223031b35f3ba5fcfb2762</anchor>
      <arglist>(const Node &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateOut</name>
      <anchorfile>a02849.html</anchorfile>
      <anchor>ae495b2edefc81e20b797ee5b125d3955</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateIn</name>
      <anchorfile>a02849.html</anchorfile>
      <anchor>a3b2a8b9cda4a87593c4fdfc44afa15d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02849.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02849.html</anchorfile>
      <anchor>a429ed28d5b8fc2fd63dde71155213753</anchor>
      <arglist>(const Node &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>minCutValue</name>
      <anchorfile>a02849.html</anchorfile>
      <anchor>a839608849d9d1218bf5d1c0854f19ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>minCutMap</name>
      <anchorfile>a02849.html</anchorfile>
      <anchor>a86f34dc0d7ab98aa31c422b422236f55</anchor>
      <arglist>(CutMap &amp;cutMap) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::HartmannOrlinMmc</name>
    <filename>a02861.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycleMean</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a6f2b5b662ec988c85c00724b45b3d303</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycle</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a073361e707d4e223b592a796a7c691a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>cycleCost</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a30321d7a2f44b73b067ffc64caa321c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cycleSize</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a105f701f9c556e0ac33103153ebd6634</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cycleMean</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a2c81dc63e5ed566d54c7dee43f87b83e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>cycle</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>ac0bb39a6609abdfcdec2b2cf951ed69a</anchor>
      <arglist>() const</arglist>
    </member>
    <class kind="struct">lemon::HartmannOrlinMmc::SetLargeCost</class>
    <class kind="struct">lemon::HartmannOrlinMmc::SetPath</class>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::CostMap</type>
      <name>CostMap</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a3a2252844f4d7748442eb48a6907f379</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Cost</type>
      <name>Cost</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a9142822eba184f2778b6aac70b0900b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LargeCost</type>
      <name>LargeCost</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a7f34159326618acfb683317c3df26662</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Tolerance</type>
      <name>Tolerance</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a35e771685a474e678b13c4de43711c7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Path</type>
      <name>Path</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>ad6d7757da799220a95281fbee4d3fb8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR</type>
      <name>Traits</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HartmannOrlinMmc</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a2bf16fe287f8f8c6a0c95230c37874fb</anchor>
      <arglist>(const Digraph &amp;digraph, const CostMap &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HartmannOrlinMmc</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a450cbf24c0df4789fa74034e022a6a07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HartmannOrlinMmc &amp;</type>
      <name>cycle</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a11bb3e453480141f93ec001a9d99e4f4</anchor>
      <arglist>(Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>HartmannOrlinMmc &amp;</type>
      <name>tolerance</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>ad6a7cd185bc451dbc77a95cbf7a6fbae</anchor>
      <arglist>(const Tolerance &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const Tolerance &amp;</type>
      <name>tolerance</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>aec76cbbff18f655dd34a7020418965bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycleMean</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a6f2b5b662ec988c85c00724b45b3d303</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycle</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a073361e707d4e223b592a796a7c691a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>cycleCost</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a30321d7a2f44b73b067ffc64caa321c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cycleSize</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a105f701f9c556e0ac33103153ebd6634</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cycleMean</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a2c81dc63e5ed566d54c7dee43f87b83e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>cycle</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>ac0bb39a6609abdfcdec2b2cf951ed69a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HartmannOrlinMmc&lt; GR, CM, SetLargeCostTraits&lt; T &gt; &gt;</name>
    <filename>a02861.html</filename>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>cycle</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>ac0bb39a6609abdfcdec2b2cf951ed69a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>cycleCost</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a30321d7a2f44b73b067ffc64caa321c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cycleSize</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a105f701f9c556e0ac33103153ebd6634</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cycleMean</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a2c81dc63e5ed566d54c7dee43f87b83e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycleMean</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a6f2b5b662ec988c85c00724b45b3d303</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycle</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a073361e707d4e223b592a796a7c691a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::CostMap</type>
      <name>CostMap</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a3a2252844f4d7748442eb48a6907f379</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Cost</type>
      <name>Cost</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a9142822eba184f2778b6aac70b0900b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LargeCost</type>
      <name>LargeCost</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a7f34159326618acfb683317c3df26662</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Tolerance</type>
      <name>Tolerance</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a35e771685a474e678b13c4de43711c7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Path</type>
      <name>Path</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>ad6d7757da799220a95281fbee4d3fb8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetLargeCostTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HartmannOrlinMmc</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a2bf16fe287f8f8c6a0c95230c37874fb</anchor>
      <arglist>(const Digraph &amp;digraph, const CostMap &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HartmannOrlinMmc</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a450cbf24c0df4789fa74034e022a6a07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HartmannOrlinMmc &amp;</type>
      <name>cycle</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a11bb3e453480141f93ec001a9d99e4f4</anchor>
      <arglist>(Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>HartmannOrlinMmc &amp;</type>
      <name>tolerance</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>ad6a7cd185bc451dbc77a95cbf7a6fbae</anchor>
      <arglist>(const Tolerance &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const Tolerance &amp;</type>
      <name>tolerance</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>aec76cbbff18f655dd34a7020418965bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>cycle</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>ac0bb39a6609abdfcdec2b2cf951ed69a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>cycleCost</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a30321d7a2f44b73b067ffc64caa321c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cycleSize</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a105f701f9c556e0ac33103153ebd6634</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cycleMean</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a2c81dc63e5ed566d54c7dee43f87b83e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycleMean</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a6f2b5b662ec988c85c00724b45b3d303</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycle</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a073361e707d4e223b592a796a7c691a5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HartmannOrlinMmc&lt; GR, CM, SetPathTraits&lt; T &gt; &gt;</name>
    <filename>a02861.html</filename>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>cycle</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>ac0bb39a6609abdfcdec2b2cf951ed69a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>cycleCost</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a30321d7a2f44b73b067ffc64caa321c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cycleSize</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a105f701f9c556e0ac33103153ebd6634</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cycleMean</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a2c81dc63e5ed566d54c7dee43f87b83e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycleMean</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a6f2b5b662ec988c85c00724b45b3d303</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycle</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a073361e707d4e223b592a796a7c691a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::CostMap</type>
      <name>CostMap</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a3a2252844f4d7748442eb48a6907f379</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Cost</type>
      <name>Cost</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a9142822eba184f2778b6aac70b0900b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LargeCost</type>
      <name>LargeCost</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a7f34159326618acfb683317c3df26662</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Tolerance</type>
      <name>Tolerance</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a35e771685a474e678b13c4de43711c7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Path</type>
      <name>Path</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>ad6d7757da799220a95281fbee4d3fb8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetPathTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HartmannOrlinMmc</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a2bf16fe287f8f8c6a0c95230c37874fb</anchor>
      <arglist>(const Digraph &amp;digraph, const CostMap &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HartmannOrlinMmc</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a450cbf24c0df4789fa74034e022a6a07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HartmannOrlinMmc &amp;</type>
      <name>cycle</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a11bb3e453480141f93ec001a9d99e4f4</anchor>
      <arglist>(Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>HartmannOrlinMmc &amp;</type>
      <name>tolerance</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>ad6a7cd185bc451dbc77a95cbf7a6fbae</anchor>
      <arglist>(const Tolerance &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const Tolerance &amp;</type>
      <name>tolerance</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>aec76cbbff18f655dd34a7020418965bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>cycle</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>ac0bb39a6609abdfcdec2b2cf951ed69a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>cycleCost</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a30321d7a2f44b73b067ffc64caa321c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cycleSize</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a105f701f9c556e0ac33103153ebd6634</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cycleMean</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a2c81dc63e5ed566d54c7dee43f87b83e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycleMean</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a6f2b5b662ec988c85c00724b45b3d303</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycle</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>a073361e707d4e223b592a796a7c691a5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::HartmannOrlinMmcDefaultTraits</name>
    <filename>a02853.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a02853.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CM</type>
      <name>CostMap</name>
      <anchorfile>a02853.html</anchorfile>
      <anchor>a0e4fe3b3bd126f464294f661c36a61d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CostMap::Value</type>
      <name>Cost</name>
      <anchorfile>a02853.html</anchorfile>
      <anchor>ac9e9deaccf259b5931d867b0790c1e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>LargeCost</name>
      <anchorfile>a02853.html</anchorfile>
      <anchor>abb5b2df15a07785723c3202702c06a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lemon::Tolerance&lt; LargeCost &gt;</type>
      <name>Tolerance</name>
      <anchorfile>a02853.html</anchorfile>
      <anchor>a1a087d7bb62d1a766aa6809f2fe4a336</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lemon::Path&lt; Digraph &gt;</type>
      <name>Path</name>
      <anchorfile>a02853.html</anchorfile>
      <anchor>a6989b0a22a99c251a2e7c99cf36605ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::Heap</name>
    <filename>a05533.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumeration">
      <type></type>
      <name>State</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_HEAP</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a213759402d071be3f66f8cf86641bb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRE_HEAP</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a12f201f9d13d106e81658dad7e7c9c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POST_HEAP</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8acd215e97251c1085a8b299c068e7172d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IM</type>
      <name>ItemIntMap</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>ac00a2d6f039b6e8ffc0641530bdf5304</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PR</type>
      <name>Prio</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>a644810a55913c9e8b24511758574d6d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ItemIntMap::Key</type>
      <name>Item</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>a70025b32b600038ee2981a3deab1a783</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_HEAP</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a213759402d071be3f66f8cf86641bb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRE_HEAP</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a12f201f9d13d106e81658dad7e7c9c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POST_HEAP</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8acd215e97251c1085a8b299c068e7172d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Heap</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>a9b8fa9d5935f50e2052fb7c6ddf0cebb</anchor>
      <arglist>(ItemIntMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Heap</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>a95b4ffe77137cb6909b415f4cdac1ff5</anchor>
      <arglist>(ItemIntMap &amp;map, const CMP &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>a644718bb2fb240de962dc3c9a1fdf0dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>ad34f576dafc84f8969e2fecd67cd3a15</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>top</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>a3c68736e00411448ff7acf175015cc1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Prio</type>
      <name>prio</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>aa453ea5d0eb1b666a14a104659ae49dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>a312e7f6c761a199c1369fbe651e084f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>a5fe7eab02681c7735ba173c879de1681</anchor>
      <arglist>(const Item &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>Prio</type>
      <name>operator[]</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>ac85c63b4ab780fbfb4b986b60dd87481</anchor>
      <arglist>(const Item &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>a35c06441ccfac0ed04762113a102e6b3</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrease</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>a301fdc87288afdebf379ae043cf66cd4</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increase</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>a958836bae38b188956bcf1345c63eac4</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>state</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>a9e18a6f6555eb8d1bc8d37c951a440f6</anchor>
      <arglist>(const Item &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>state</name>
      <anchorfile>a05533.html</anchorfile>
      <anchor>a7d0ca230d438efaad53833701d9cb262</anchor>
      <arglist>(const Item &amp;i, State st)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::HeapUnionFind</name>
    <filename>a04401.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">lemon::HeapUnionFind::ClassIt</class>
    <class kind="class">lemon::HeapUnionFind::ItemIt</class>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a04401.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IM::Key</type>
      <name>Item</name>
      <anchorfile>a04401.html</anchorfile>
      <anchor>ab34456f9e53eda26e5c605cb223fbcd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IM</type>
      <name>ItemIntMap</name>
      <anchorfile>a04401.html</anchorfile>
      <anchor>ac00a2d6f039b6e8ffc0641530bdf5304</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Comp</type>
      <name>Compare</name>
      <anchorfile>a04401.html</anchorfile>
      <anchor>aad6f401d1521e21c6b512b61409f7bf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>alive</name>
      <anchorfile>a04401.html</anchorfile>
      <anchor>ad031c51944a7d542fec013475e763e44</anchor>
      <arglist>(int cls) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trivial</name>
      <anchorfile>a04401.html</anchorfile>
      <anchor>a9926dfd2393322c97cc9fab16f0fb708</anchor>
      <arglist>(int cls) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HeapUnionFind</name>
      <anchorfile>a04401.html</anchorfile>
      <anchor>a20106e1c71629a9fe8f6067d4871da84</anchor>
      <arglist>(ItemIntMap &amp;_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a04401.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a04401.html</anchorfile>
      <anchor>adaf61646dea527f772f4e1711d59e35e</anchor>
      <arglist>(const Item &amp;item, const Value &amp;prio)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchorfile>a04401.html</anchorfile>
      <anchor>a9ca2e6cba218180f759b3fb54880f4a8</anchor>
      <arglist>(const Item &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>join</name>
      <anchorfile>a04401.html</anchorfile>
      <anchor>ada1179bb996c879c2719c4737265a58e</anchor>
      <arglist>(Iterator begin, Iterator end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>a04401.html</anchorfile>
      <anchor>a15cd258c1bbff3f099eef1b899963374</anchor>
      <arglist>(int cls, Iterator out)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04401.html</anchorfile>
      <anchor>a93eb23148058c50926e482da135b8475</anchor>
      <arglist>(const Item &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a04401.html</anchorfile>
      <anchor>a76d53a876dd67ecdc8832920937b7c3f</anchor>
      <arglist>(const Item &amp;item, const Value &amp;prio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increase</name>
      <anchorfile>a04401.html</anchorfile>
      <anchor>a7b49a405fa19af1ac4ab69e669ad7842</anchor>
      <arglist>(const Item &amp;item, const Value &amp;prio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrease</name>
      <anchorfile>a04401.html</anchorfile>
      <anchor>a4be49210bae8aa13f625b3846f6e7242</anchor>
      <arglist>(const Item &amp;item, const Value &amp;prio)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>classPrio</name>
      <anchorfile>a04401.html</anchorfile>
      <anchor>ad3f2d589725ffe322dd31513b3d35a14</anchor>
      <arglist>(int cls) const</arglist>
    </member>
    <member kind="function">
      <type>const Item &amp;</type>
      <name>classTop</name>
      <anchorfile>a04401.html</anchorfile>
      <anchor>a3fdcfbb26eec75ab01633204dc62a270</anchor>
      <arglist>(int cls) const</arglist>
    </member>
    <member kind="function">
      <type>const Item &amp;</type>
      <name>classRep</name>
      <anchorfile>a04401.html</anchorfile>
      <anchor>a749a95f77bfe62d6ece70865adf7a484</anchor>
      <arglist>(int id) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::HowardMmc</name>
    <filename>a02893.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TerminationCause</type>
      <name>findCycleMean</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a40baec0badd97cf8024aab2332e630b1</anchor>
      <arglist>(int limit=std::numeric_limits&lt; int &gt;::max())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycle</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a073361e707d4e223b592a796a7c691a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>cycleCost</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a30321d7a2f44b73b067ffc64caa321c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cycleSize</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a105f701f9c556e0ac33103153ebd6634</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cycleMean</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a2c81dc63e5ed566d54c7dee43f87b83e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>cycle</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>ac0bb39a6609abdfcdec2b2cf951ed69a</anchor>
      <arglist>() const</arglist>
    </member>
    <class kind="struct">lemon::HowardMmc::SetLargeCost</class>
    <class kind="struct">lemon::HowardMmc::SetPath</class>
    <member kind="enumeration">
      <type></type>
      <name>TerminationCause</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a70e8fb7e2e48605883db4d1109a5f79f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_CYCLE</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a70e8fb7e2e48605883db4d1109a5f79fa6c4be8160712c6eb310fc38fc076def4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a70e8fb7e2e48605883db4d1109a5f79fa2579881e7c83261bc21bafb5a5c92cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ITERATION_LIMIT</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a70e8fb7e2e48605883db4d1109a5f79fa2ae51471aa8024ea15450efeae10bf37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::CostMap</type>
      <name>CostMap</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a3a2252844f4d7748442eb48a6907f379</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Cost</type>
      <name>Cost</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a9142822eba184f2778b6aac70b0900b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LargeCost</type>
      <name>LargeCost</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a7f34159326618acfb683317c3df26662</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Tolerance</type>
      <name>Tolerance</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a35e771685a474e678b13c4de43711c7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Path</type>
      <name>Path</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>ad6d7757da799220a95281fbee4d3fb8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR</type>
      <name>Traits</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_CYCLE</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a70e8fb7e2e48605883db4d1109a5f79fa6c4be8160712c6eb310fc38fc076def4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a70e8fb7e2e48605883db4d1109a5f79fa2579881e7c83261bc21bafb5a5c92cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ITERATION_LIMIT</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a70e8fb7e2e48605883db4d1109a5f79fa2ae51471aa8024ea15450efeae10bf37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HowardMmc</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a77813a4da215372de0ce94332beeb464</anchor>
      <arglist>(const Digraph &amp;digraph, const CostMap &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HowardMmc</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>ac811653debf31cbb1f3e011b4d20f8ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HowardMmc &amp;</type>
      <name>cycle</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a3d7c8670b6ad06a7a59cd1b8bf7a93af</anchor>
      <arglist>(Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>HowardMmc &amp;</type>
      <name>tolerance</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>ad70e6702783c845ea10741eb16c25309</anchor>
      <arglist>(const Tolerance &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const Tolerance &amp;</type>
      <name>tolerance</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>aec76cbbff18f655dd34a7020418965bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TerminationCause</type>
      <name>findCycleMean</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a40baec0badd97cf8024aab2332e630b1</anchor>
      <arglist>(int limit=std::numeric_limits&lt; int &gt;::max())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycle</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a073361e707d4e223b592a796a7c691a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>cycleCost</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a30321d7a2f44b73b067ffc64caa321c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cycleSize</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a105f701f9c556e0ac33103153ebd6634</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cycleMean</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a2c81dc63e5ed566d54c7dee43f87b83e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>cycle</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>ac0bb39a6609abdfcdec2b2cf951ed69a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HowardMmc&lt; GR, CM, SetLargeCostTraits&lt; T &gt; &gt;</name>
    <filename>a02893.html</filename>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>cycle</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>ac0bb39a6609abdfcdec2b2cf951ed69a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>cycleCost</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a30321d7a2f44b73b067ffc64caa321c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cycleSize</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a105f701f9c556e0ac33103153ebd6634</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cycleMean</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a2c81dc63e5ed566d54c7dee43f87b83e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TerminationCause</type>
      <name>findCycleMean</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a40baec0badd97cf8024aab2332e630b1</anchor>
      <arglist>(int limit=std::numeric_limits&lt; int &gt;::max())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycle</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a073361e707d4e223b592a796a7c691a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TerminationCause</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a70e8fb7e2e48605883db4d1109a5f79f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::CostMap</type>
      <name>CostMap</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a3a2252844f4d7748442eb48a6907f379</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Cost</type>
      <name>Cost</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a9142822eba184f2778b6aac70b0900b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LargeCost</type>
      <name>LargeCost</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a7f34159326618acfb683317c3df26662</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Tolerance</type>
      <name>Tolerance</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a35e771685a474e678b13c4de43711c7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Path</type>
      <name>Path</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>ad6d7757da799220a95281fbee4d3fb8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetLargeCostTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_CYCLE</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a70e8fb7e2e48605883db4d1109a5f79fa6c4be8160712c6eb310fc38fc076def4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a70e8fb7e2e48605883db4d1109a5f79fa2579881e7c83261bc21bafb5a5c92cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ITERATION_LIMIT</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a70e8fb7e2e48605883db4d1109a5f79fa2ae51471aa8024ea15450efeae10bf37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HowardMmc</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a77813a4da215372de0ce94332beeb464</anchor>
      <arglist>(const Digraph &amp;digraph, const CostMap &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HowardMmc</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>ac811653debf31cbb1f3e011b4d20f8ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HowardMmc &amp;</type>
      <name>cycle</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a3d7c8670b6ad06a7a59cd1b8bf7a93af</anchor>
      <arglist>(Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>HowardMmc &amp;</type>
      <name>tolerance</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>ad70e6702783c845ea10741eb16c25309</anchor>
      <arglist>(const Tolerance &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const Tolerance &amp;</type>
      <name>tolerance</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>aec76cbbff18f655dd34a7020418965bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>cycle</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>ac0bb39a6609abdfcdec2b2cf951ed69a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>cycleCost</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a30321d7a2f44b73b067ffc64caa321c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cycleSize</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a105f701f9c556e0ac33103153ebd6634</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cycleMean</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a2c81dc63e5ed566d54c7dee43f87b83e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TerminationCause</type>
      <name>findCycleMean</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a40baec0badd97cf8024aab2332e630b1</anchor>
      <arglist>(int limit=std::numeric_limits&lt; int &gt;::max())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycle</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a073361e707d4e223b592a796a7c691a5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HowardMmc&lt; GR, CM, SetPathTraits&lt; T &gt; &gt;</name>
    <filename>a02893.html</filename>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>cycle</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>ac0bb39a6609abdfcdec2b2cf951ed69a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>cycleCost</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a30321d7a2f44b73b067ffc64caa321c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cycleSize</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a105f701f9c556e0ac33103153ebd6634</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cycleMean</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a2c81dc63e5ed566d54c7dee43f87b83e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TerminationCause</type>
      <name>findCycleMean</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a40baec0badd97cf8024aab2332e630b1</anchor>
      <arglist>(int limit=std::numeric_limits&lt; int &gt;::max())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycle</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a073361e707d4e223b592a796a7c691a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TerminationCause</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a70e8fb7e2e48605883db4d1109a5f79f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::CostMap</type>
      <name>CostMap</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a3a2252844f4d7748442eb48a6907f379</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Cost</type>
      <name>Cost</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a9142822eba184f2778b6aac70b0900b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LargeCost</type>
      <name>LargeCost</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a7f34159326618acfb683317c3df26662</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Tolerance</type>
      <name>Tolerance</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a35e771685a474e678b13c4de43711c7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Path</type>
      <name>Path</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>ad6d7757da799220a95281fbee4d3fb8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetPathTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_CYCLE</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a70e8fb7e2e48605883db4d1109a5f79fa6c4be8160712c6eb310fc38fc076def4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a70e8fb7e2e48605883db4d1109a5f79fa2579881e7c83261bc21bafb5a5c92cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ITERATION_LIMIT</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a70e8fb7e2e48605883db4d1109a5f79fa2ae51471aa8024ea15450efeae10bf37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HowardMmc</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a77813a4da215372de0ce94332beeb464</anchor>
      <arglist>(const Digraph &amp;digraph, const CostMap &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HowardMmc</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>ac811653debf31cbb1f3e011b4d20f8ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HowardMmc &amp;</type>
      <name>cycle</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a3d7c8670b6ad06a7a59cd1b8bf7a93af</anchor>
      <arglist>(Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>HowardMmc &amp;</type>
      <name>tolerance</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>ad70e6702783c845ea10741eb16c25309</anchor>
      <arglist>(const Tolerance &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const Tolerance &amp;</type>
      <name>tolerance</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>aec76cbbff18f655dd34a7020418965bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>cycle</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>ac0bb39a6609abdfcdec2b2cf951ed69a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>cycleCost</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a30321d7a2f44b73b067ffc64caa321c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cycleSize</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a105f701f9c556e0ac33103153ebd6634</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cycleMean</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a2c81dc63e5ed566d54c7dee43f87b83e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TerminationCause</type>
      <name>findCycleMean</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a40baec0badd97cf8024aab2332e630b1</anchor>
      <arglist>(int limit=std::numeric_limits&lt; int &gt;::max())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycle</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a073361e707d4e223b592a796a7c691a5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::HowardMmcDefaultTraits</name>
    <filename>a02885.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a02885.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CM</type>
      <name>CostMap</name>
      <anchorfile>a02885.html</anchorfile>
      <anchor>a0e4fe3b3bd126f464294f661c36a61d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CostMap::Value</type>
      <name>Cost</name>
      <anchorfile>a02885.html</anchorfile>
      <anchor>ac9e9deaccf259b5931d867b0790c1e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>LargeCost</name>
      <anchorfile>a02885.html</anchorfile>
      <anchor>abb5b2df15a07785723c3202702c06a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lemon::Tolerance&lt; LargeCost &gt;</type>
      <name>Tolerance</name>
      <anchorfile>a02885.html</anchorfile>
      <anchor>a1a087d7bb62d1a766aa6809f2fe4a336</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lemon::Path&lt; Digraph &gt;</type>
      <name>Path</name>
      <anchorfile>a02885.html</anchorfile>
      <anchor>a6989b0a22a99c251a2e7c99cf36605ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::HypercubeGraph</name>
    <filename>a02929.html</filename>
    <class kind="class">lemon::HypercubeGraph::HyperMap</class>
    <member kind="function">
      <type></type>
      <name>HypercubeGraph</name>
      <anchorfile>a02929.html</anchorfile>
      <anchor>ad1e0bae8743a52a5f67cd18ece720412</anchor>
      <arglist>(int dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02929.html</anchorfile>
      <anchor>aa11cd627b0f18c3a1655de9c102baab4</anchor>
      <arglist>(int dim)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>a02929.html</anchorfile>
      <anchor>a510a87518ab1d5a4e7cbafb0fbedaa22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>projection</name>
      <anchorfile>a02929.html</anchorfile>
      <anchor>a8f859729052e18f355c6b212193d1686</anchor>
      <arglist>(Node node, int n) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>a02929.html</anchorfile>
      <anchor>afa3db02dd8370219ac34c28d6d7d74e0</anchor>
      <arglist>(Edge edge) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>a02929.html</anchorfile>
      <anchor>a7ca2309693275af5902759b9f63c5db4</anchor>
      <arglist>(Arc arc) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>operator()</name>
      <anchorfile>a02929.html</anchorfile>
      <anchor>ad73c71467ff26ecbab90bc0e66b55c7e</anchor>
      <arglist>(int ix) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nodeNum</name>
      <anchorfile>a02929.html</anchorfile>
      <anchor>a150d74302d3b5274897d44b27ee79b6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>edgeNum</name>
      <anchorfile>a02929.html</anchorfile>
      <anchor>a9ed0629d3fba2c67bc0d2da2ccbb5a38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>arcNum</name>
      <anchorfile>a02929.html</anchorfile>
      <anchor>afc6b72e37021f6a497e83e98418ed3b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>index</name>
      <anchorfile>a02929.html</anchorfile>
      <anchor>a0822a1cdb568cfae93bfe5856555e302</anchor>
      <arglist>(Node node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::HypercubeGraph::HyperMap</name>
    <filename>a02933.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Node</type>
      <name>Key</name>
      <anchorfile>a02933.html</anchorfile>
      <anchor>ae05d965da541abbbd35cc532b534496d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a02933.html</anchorfile>
      <anchor>a34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HyperMap</name>
      <anchorfile>a02933.html</anchorfile>
      <anchor>af3bfe46c9fac0e4f8ebd92acc2488a4d</anchor>
      <arglist>(const Graph &amp;graph, It begin, It end, T fv=0, const BF &amp;bf=BF())</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a02933.html</anchorfile>
      <anchor>a8de1b13f44fab45faa8daa93027f9df2</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::IDableBpGraphComponent</name>
    <filename>a05337.html</filename>
    <templarg></templarg>
    <base>IDableGraphComponent&lt; BaseBpGraphComponent &gt;</base>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a05337.html</anchorfile>
      <anchor>a275f8ffd033fbda7c899b527998cf313</anchor>
      <arglist>(const RedNode &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a05337.html</anchorfile>
      <anchor>ad502a31e71702eaacd49081f8f890232</anchor>
      <arglist>(const BlueNode &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxRedId</name>
      <anchorfile>a05337.html</anchorfile>
      <anchor>a7b1fdf426885bb24f64962bacfba4e0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxBlueId</name>
      <anchorfile>a05337.html</anchorfile>
      <anchor>a1725b6e9d1848f04dc580a127e97b76d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a05337.html</anchorfile>
      <anchor>a338e0ae0d02179f923874d958e5cdbe0</anchor>
      <arglist>(const Edge &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::IDableDigraphComponent</name>
    <filename>a05321.html</filename>
    <templarg></templarg>
    <base>lemon::concepts::BaseDigraphComponent</base>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a05321.html</anchorfile>
      <anchor>a7337368952bfc9df0233b787c66ccb51</anchor>
      <arglist>(const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nodeFromId</name>
      <anchorfile>a05321.html</anchorfile>
      <anchor>a488cc53bcd9ed8678754bc1428680b92</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a05321.html</anchorfile>
      <anchor>a75b133ec9d71a1c90620d9159e17c444</anchor>
      <arglist>(const Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>arcFromId</name>
      <anchorfile>a05321.html</anchorfile>
      <anchor>a6f1576e59fcda989af46733714ffb1a7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxNodeId</name>
      <anchorfile>a05321.html</anchorfile>
      <anchor>a0e562aee6515586e90822ad0929d6742</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxArcId</name>
      <anchorfile>a05321.html</anchorfile>
      <anchor>a40414a15ee291ba518da15d6996ab61d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IDableDigraphComponent&lt; BaseBpGraphComponent &gt;</name>
    <filename>a05321.html</filename>
    <base>lemon::concepts::BaseBpGraphComponent</base>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a05321.html</anchorfile>
      <anchor>a7337368952bfc9df0233b787c66ccb51</anchor>
      <arglist>(const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a05321.html</anchorfile>
      <anchor>a75b133ec9d71a1c90620d9159e17c444</anchor>
      <arglist>(const Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nodeFromId</name>
      <anchorfile>a05321.html</anchorfile>
      <anchor>a488cc53bcd9ed8678754bc1428680b92</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>arcFromId</name>
      <anchorfile>a05321.html</anchorfile>
      <anchor>a6f1576e59fcda989af46733714ffb1a7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxNodeId</name>
      <anchorfile>a05321.html</anchorfile>
      <anchor>a0e562aee6515586e90822ad0929d6742</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxArcId</name>
      <anchorfile>a05321.html</anchorfile>
      <anchor>a40414a15ee291ba518da15d6996ab61d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IDableDigraphComponent&lt; BaseGraphComponent &gt;</name>
    <filename>a05321.html</filename>
    <base>lemon::concepts::BaseGraphComponent</base>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a05321.html</anchorfile>
      <anchor>a7337368952bfc9df0233b787c66ccb51</anchor>
      <arglist>(const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a05321.html</anchorfile>
      <anchor>a75b133ec9d71a1c90620d9159e17c444</anchor>
      <arglist>(const Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nodeFromId</name>
      <anchorfile>a05321.html</anchorfile>
      <anchor>a488cc53bcd9ed8678754bc1428680b92</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>arcFromId</name>
      <anchorfile>a05321.html</anchorfile>
      <anchor>a6f1576e59fcda989af46733714ffb1a7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxNodeId</name>
      <anchorfile>a05321.html</anchorfile>
      <anchor>a0e562aee6515586e90822ad0929d6742</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxArcId</name>
      <anchorfile>a05321.html</anchorfile>
      <anchor>a40414a15ee291ba518da15d6996ab61d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::IDableGraphComponent</name>
    <filename>a05329.html</filename>
    <templarg></templarg>
    <base>IDableDigraphComponent&lt; BaseGraphComponent &gt;</base>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a05329.html</anchorfile>
      <anchor>a338e0ae0d02179f923874d958e5cdbe0</anchor>
      <arglist>(const Edge &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Edge</type>
      <name>edgeFromId</name>
      <anchorfile>a05329.html</anchorfile>
      <anchor>a67b3d9ab84d7920ff7adabaffb0aa648</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxEdgeId</name>
      <anchorfile>a05329.html</anchorfile>
      <anchor>a383c35dde7ea8d457fe879145585c550</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IDableGraphComponent&lt; BaseBpGraphComponent &gt;</name>
    <filename>a05329.html</filename>
    <base>IDableDigraphComponent&lt; BaseBpGraphComponent &gt;</base>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a05329.html</anchorfile>
      <anchor>a338e0ae0d02179f923874d958e5cdbe0</anchor>
      <arglist>(const Edge &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Edge</type>
      <name>edgeFromId</name>
      <anchorfile>a05329.html</anchorfile>
      <anchor>a67b3d9ab84d7920ff7adabaffb0aa648</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxEdgeId</name>
      <anchorfile>a05329.html</anchorfile>
      <anchor>a383c35dde7ea8d457fe879145585c550</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::IdentityMap</name>
    <filename>a03445.html</filename>
    <templarg></templarg>
    <base>MapBase&lt; T, T &gt;</base>
    <member kind="typedef">
      <type>T</type>
      <name>Key</name>
      <anchorfile>a03445.html</anchorfile>
      <anchor>aa232325a6d03d31df8f241b597083063</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a03445.html</anchorfile>
      <anchor>a34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03445.html</anchorfile>
      <anchor>a8de1b13f44fab45faa8daa93027f9df2</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>IdentityMap&lt; T &gt;</type>
      <name>identityMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gaa15ca3c8150c620c3b368c55068801a2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::IdMap</name>
    <filename>a03569.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>MapBase&lt; K, int &gt;</base>
    <class kind="class">lemon::IdMap::InverseMap</class>
    <member kind="typedef">
      <type>GR</type>
      <name>Graph</name>
      <anchorfile>a03569.html</anchorfile>
      <anchor>a2a51ae337b207f01f1c904f5eb2aa98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>Item</name>
      <anchorfile>a03569.html</anchorfile>
      <anchor>ac4edd56c103a7549d76b3a6b5c7bdf6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a03569.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Value</name>
      <anchorfile>a03569.html</anchorfile>
      <anchor>a8940a046b717a18878ab9de4ba32a0b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdMap</name>
      <anchorfile>a03569.html</anchorfile>
      <anchor>afc1a3f0b1c5b351753dd801082e222c0</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator[]</name>
      <anchorfile>a03569.html</anchorfile>
      <anchor>a653b3c14aaa200597e665b0ae054b1a6</anchor>
      <arglist>(const Item &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>operator()</name>
      <anchorfile>a03569.html</anchorfile>
      <anchor>a50fe2e7d2c4ca7050d4c0a45e6ad3edd</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>InverseMap</type>
      <name>inverse</name>
      <anchorfile>a03569.html</anchorfile>
      <anchor>a6f81d969a965dfe7eaa89a72ef11d7aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IdMap&lt; GR, K &gt;</type>
      <name>idMap</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga816a286bed06ff2b19089dbf5ebac20a</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::BpGraph::InArcIt</name>
    <filename>a05153.html</filename>
    <base>lemon::concepts::BpGraph::Arc</base>
    <member kind="function">
      <type></type>
      <name>InArcIt</name>
      <anchorfile>a05153.html</anchorfile>
      <anchor>a5b73f3d25b822a4402bae491770c69b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InArcIt</name>
      <anchorfile>a05153.html</anchorfile>
      <anchor>aed9bfdcea39717444f32ab67b7c63445</anchor>
      <arglist>(const InArcIt &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InArcIt</name>
      <anchorfile>a05153.html</anchorfile>
      <anchor>a590d5ea53f43dae27e42986018c206fa</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InArcIt</name>
      <anchorfile>a05153.html</anchorfile>
      <anchor>a7f60e745f94c6e7104ead7f73988c58d</anchor>
      <arglist>(const BpGraph &amp;g, const Node &amp;n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InArcIt</name>
      <anchorfile>a05153.html</anchorfile>
      <anchor>a7be1899f4ab3618d22afd8660f9f0948</anchor>
      <arglist>(const BpGraph &amp;, const Arc &amp;)</arglist>
    </member>
    <member kind="function">
      <type>InArcIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a05153.html</anchorfile>
      <anchor>ac495b69e37cf4ccf75cade0b52ccb08d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::Digraph::InArcIt</name>
    <filename>a05201.html</filename>
    <base>lemon::concepts::Digraph::Arc</base>
    <member kind="function">
      <type></type>
      <name>InArcIt</name>
      <anchorfile>a05201.html</anchorfile>
      <anchor>a5b73f3d25b822a4402bae491770c69b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InArcIt</name>
      <anchorfile>a05201.html</anchorfile>
      <anchor>aed9bfdcea39717444f32ab67b7c63445</anchor>
      <arglist>(const InArcIt &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InArcIt</name>
      <anchorfile>a05201.html</anchorfile>
      <anchor>a590d5ea53f43dae27e42986018c206fa</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InArcIt</name>
      <anchorfile>a05201.html</anchorfile>
      <anchor>aab21dd710a5b92d22d9ecf57493f6036</anchor>
      <arglist>(const Digraph &amp;, const Node &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InArcIt</name>
      <anchorfile>a05201.html</anchorfile>
      <anchor>a3798c4d1638b96a6a9207b62d3d526fb</anchor>
      <arglist>(const Digraph &amp;, const Arc &amp;)</arglist>
    </member>
    <member kind="function">
      <type>InArcIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a05201.html</anchorfile>
      <anchor>ac495b69e37cf4ccf75cade0b52ccb08d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::Graph::InArcIt</name>
    <filename>a05257.html</filename>
    <base>lemon::concepts::Graph::Arc</base>
    <member kind="function">
      <type></type>
      <name>InArcIt</name>
      <anchorfile>a05257.html</anchorfile>
      <anchor>a5b73f3d25b822a4402bae491770c69b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InArcIt</name>
      <anchorfile>a05257.html</anchorfile>
      <anchor>aed9bfdcea39717444f32ab67b7c63445</anchor>
      <arglist>(const InArcIt &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InArcIt</name>
      <anchorfile>a05257.html</anchorfile>
      <anchor>a590d5ea53f43dae27e42986018c206fa</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InArcIt</name>
      <anchorfile>a05257.html</anchorfile>
      <anchor>a02e3b30ddc4b2a7ab91224f8b427eb63</anchor>
      <arglist>(const Graph &amp;g, const Node &amp;n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InArcIt</name>
      <anchorfile>a05257.html</anchorfile>
      <anchor>ad59a0a7a1c0a17780b723307cb32c456</anchor>
      <arglist>(const Graph &amp;, const Arc &amp;)</arglist>
    </member>
    <member kind="function">
      <type>InArcIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a05257.html</anchorfile>
      <anchor>ac495b69e37cf4ccf75cade0b52ccb08d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::Graph::IncEdgeIt</name>
    <filename>a05241.html</filename>
    <base>lemon::concepts::Graph::Edge</base>
    <member kind="function">
      <type></type>
      <name>IncEdgeIt</name>
      <anchorfile>a05241.html</anchorfile>
      <anchor>ae34db5c99fa583501bc36ede95ce0437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IncEdgeIt</name>
      <anchorfile>a05241.html</anchorfile>
      <anchor>aacdd46c687cee03076515c8922b5c1db</anchor>
      <arglist>(const IncEdgeIt &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IncEdgeIt</name>
      <anchorfile>a05241.html</anchorfile>
      <anchor>aea2396f494e392d2583c3be19e562b77</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IncEdgeIt</name>
      <anchorfile>a05241.html</anchorfile>
      <anchor>adf9a4cfeb46ee0503e0015681773c69a</anchor>
      <arglist>(const Graph &amp;, const Node &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IncEdgeIt</name>
      <anchorfile>a05241.html</anchorfile>
      <anchor>af74baba478726d981bf2c8cb406d4921</anchor>
      <arglist>(const Graph &amp;, const Edge &amp;)</arglist>
    </member>
    <member kind="function">
      <type>IncEdgeIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a05241.html</anchorfile>
      <anchor>afd56b09535c0e18e9bd871531497797c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::BpGraph::IncEdgeIt</name>
    <filename>a05137.html</filename>
    <base>lemon::concepts::BpGraph::Edge</base>
    <member kind="function">
      <type></type>
      <name>IncEdgeIt</name>
      <anchorfile>a05137.html</anchorfile>
      <anchor>ae34db5c99fa583501bc36ede95ce0437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IncEdgeIt</name>
      <anchorfile>a05137.html</anchorfile>
      <anchor>aacdd46c687cee03076515c8922b5c1db</anchor>
      <arglist>(const IncEdgeIt &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IncEdgeIt</name>
      <anchorfile>a05137.html</anchorfile>
      <anchor>aea2396f494e392d2583c3be19e562b77</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IncEdgeIt</name>
      <anchorfile>a05137.html</anchorfile>
      <anchor>afd8311e37b019b986cafc27188b984e2</anchor>
      <arglist>(const BpGraph &amp;, const Node &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IncEdgeIt</name>
      <anchorfile>a05137.html</anchorfile>
      <anchor>a3cc666c2bdc2be448b50d8f451ecdb5f</anchor>
      <arglist>(const BpGraph &amp;, const Edge &amp;)</arglist>
    </member>
    <member kind="function">
      <type>IncEdgeIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a05137.html</anchorfile>
      <anchor>afd56b09535c0e18e9bd871531497797c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::InDegMap</name>
    <filename>a03665.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Graph</name>
      <anchorfile>a03665.html</anchorfile>
      <anchor>a2a51ae337b207f01f1c904f5eb2aa98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::Node</type>
      <name>Key</name>
      <anchorfile>a03665.html</anchorfile>
      <anchor>a0835dd1b238d00fbb4cea5cd42df661f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Value</name>
      <anchorfile>a03665.html</anchorfile>
      <anchor>a8940a046b717a18878ab9de4ba32a0b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InDegMap</name>
      <anchorfile>a03665.html</anchorfile>
      <anchor>a2ef38f21a0b2ac5818982bec1f8686a9</anchor>
      <arglist>(const Digraph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator[]</name>
      <anchorfile>a03665.html</anchorfile>
      <anchor>aef3e6b029c0ce112c64c34a44824439c</anchor>
      <arglist>(const Key &amp;key) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::GridGraph::IndexMap</name>
    <filename>a02817.html</filename>
    <member kind="typedef">
      <type>GridGraph::Node</type>
      <name>Key</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>a89610f8cffa34a4715c0730e05cb8751</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dim2::Point&lt; int &gt;</type>
      <name>Value</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>a9b682dd11c28cb3e98421ffb2c4a2240</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexMap</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>a7963a1ca4bc817546073da2398d29778</anchor>
      <arglist>(const GridGraph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>a6bb5cd098260055648dc5219c8190b4b</anchor>
      <arglist>(Key key) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::InsertionTsp</name>
    <filename>a02937.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>Cost</type>
      <name>run</name>
      <anchorfile>a02937.html</anchorfile>
      <anchor>a2411da8896788ee2307b9d283f9519da</anchor>
      <arglist>(SelectionRule rule=FARTHEST)</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>tourCost</name>
      <anchorfile>a02937.html</anchorfile>
      <anchor>a5bd0e49b03ec84f7cecd696886d57140</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Node &gt; &amp;</type>
      <name>tourNodes</name>
      <anchorfile>a02937.html</anchorfile>
      <anchor>a3a84c614d8b1b1ab72deed6063a92004</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tourNodes</name>
      <anchorfile>a02937.html</anchorfile>
      <anchor>a91e89199ba4d6cad1ba3a3506c21ef6a</anchor>
      <arglist>(Iterator out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tour</name>
      <anchorfile>a02937.html</anchorfile>
      <anchor>a6b952e6a8fcc5212f789fafb24314af4</anchor>
      <arglist>(Path &amp;path) const</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SelectionRule</name>
      <anchorfile>a02937.html</anchorfile>
      <anchor>a434cb6429f314a1e6ea1c4f2d262708e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEAREST</name>
      <anchorfile>a02937.html</anchorfile>
      <anchor>a434cb6429f314a1e6ea1c4f2d262708ea32bf899c26ebe34101c3c9d15e41b77e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FARTHEST</name>
      <anchorfile>a02937.html</anchorfile>
      <anchor>a434cb6429f314a1e6ea1c4f2d262708ead73e1b65eca2da53f94a949e05a87024</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHEAPEST</name>
      <anchorfile>a02937.html</anchorfile>
      <anchor>a434cb6429f314a1e6ea1c4f2d262708eada1238009cd01c6b46222cb976f757be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RANDOM</name>
      <anchorfile>a02937.html</anchorfile>
      <anchor>a434cb6429f314a1e6ea1c4f2d262708eaa2b65445a3a16f164c5e811064d75726</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CM</type>
      <name>CostMap</name>
      <anchorfile>a02937.html</anchorfile>
      <anchor>a0e4fe3b3bd126f464294f661c36a61d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CM::Value</type>
      <name>Cost</name>
      <anchorfile>a02937.html</anchorfile>
      <anchor>a1a1dfba092aeec4656ebceaf99ca8b22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEAREST</name>
      <anchorfile>a02937.html</anchorfile>
      <anchor>a434cb6429f314a1e6ea1c4f2d262708ea32bf899c26ebe34101c3c9d15e41b77e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FARTHEST</name>
      <anchorfile>a02937.html</anchorfile>
      <anchor>a434cb6429f314a1e6ea1c4f2d262708ead73e1b65eca2da53f94a949e05a87024</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHEAPEST</name>
      <anchorfile>a02937.html</anchorfile>
      <anchor>a434cb6429f314a1e6ea1c4f2d262708eada1238009cd01c6b46222cb976f757be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RANDOM</name>
      <anchorfile>a02937.html</anchorfile>
      <anchor>a434cb6429f314a1e6ea1c4f2d262708eaa2b65445a3a16f164c5e811064d75726</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InsertionTsp</name>
      <anchorfile>a02937.html</anchorfile>
      <anchor>a8316232e57bedff6d679489e98bb46a7</anchor>
      <arglist>(const FullGraph &amp;gr, const CostMap &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>run</name>
      <anchorfile>a02937.html</anchorfile>
      <anchor>a2411da8896788ee2307b9d283f9519da</anchor>
      <arglist>(SelectionRule rule=FARTHEST)</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>tourCost</name>
      <anchorfile>a02937.html</anchorfile>
      <anchor>a5bd0e49b03ec84f7cecd696886d57140</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Node &gt; &amp;</type>
      <name>tourNodes</name>
      <anchorfile>a02937.html</anchorfile>
      <anchor>a3a84c614d8b1b1ab72deed6063a92004</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tourNodes</name>
      <anchorfile>a02937.html</anchorfile>
      <anchor>a91e89199ba4d6cad1ba3a3506c21ef6a</anchor>
      <arglist>(Iterator out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tour</name>
      <anchorfile>a02937.html</anchorfile>
      <anchor>a6b952e6a8fcc5212f789fafb24314af4</anchor>
      <arglist>(Path &amp;path) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::Invalid</name>
    <filename>a01969.html</filename>
  </compound>
  <compound kind="class">
    <name>lemon::IdMap::InverseMap</name>
    <filename>a03573.html</filename>
    <member kind="function">
      <type></type>
      <name>InverseMap</name>
      <anchorfile>a03573.html</anchorfile>
      <anchor>ab97b60a9dd4d5b9924459f2ba4e1d176</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InverseMap</name>
      <anchorfile>a03573.html</anchorfile>
      <anchor>a6e34ce40f71eaf31a4a2afa127711e50</anchor>
      <arglist>(const IdMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>operator[]</name>
      <anchorfile>a03573.html</anchorfile>
      <anchor>a291f8baa37e3899c8044b32ef47b1385</anchor>
      <arglist>(int id) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::CrossRefMap::InverseMap</name>
    <filename>a03585.html</filename>
    <member kind="typedef">
      <type>CrossRefMap::Key</type>
      <name>Value</name>
      <anchorfile>a03585.html</anchorfile>
      <anchor>ad6328bf624a7984fe6648c70b1f4aeca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CrossRefMap::Value</type>
      <name>Key</name>
      <anchorfile>a03585.html</anchorfile>
      <anchor>add5ec20c5c456fcd5faee1564f378ff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InverseMap</name>
      <anchorfile>a03585.html</anchorfile>
      <anchor>a804ea26c79fa8994c79ef4b3eb615bf8</anchor>
      <arglist>(const CrossRefMap &amp;inverted)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03585.html</anchorfile>
      <anchor>a9ac2d4975d0586c2793b6ff53ab35431</anchor>
      <arglist>(const Key &amp;key) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::RangeIdMap::InverseMap</name>
    <filename>a03593.html</filename>
    <member kind="typedef">
      <type>RangeIdMap::Key</type>
      <name>Value</name>
      <anchorfile>a03593.html</anchorfile>
      <anchor>afe9c60964cee7f7f4930fad88d3d9c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RangeIdMap::Value</type>
      <name>Key</name>
      <anchorfile>a03593.html</anchorfile>
      <anchor>af5e10bcf703e7e794c22d57f96fa15ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InverseMap</name>
      <anchorfile>a03593.html</anchorfile>
      <anchor>ab6a873b35176f0e02362652d2681e164</anchor>
      <arglist>(const RangeIdMap &amp;inverted)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03593.html</anchorfile>
      <anchor>a9ac2d4975d0586c2793b6ff53ab35431</anchor>
      <arglist>(const Key &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a03593.html</anchorfile>
      <anchor>a69622a843a8c7f05bf706cf80fad6951</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::IoError</name>
    <filename>a02577.html</filename>
    <base>lemon::Exception</base>
    <member kind="function">
      <type></type>
      <name>IoError</name>
      <anchorfile>a02577.html</anchorfile>
      <anchor>ad86a4dc85ccd17792866cea1da986403</anchor>
      <arglist>(const IoError &amp;error)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IoError</name>
      <anchorfile>a02577.html</anchorfile>
      <anchor>a01fb1ee8d1d16ccfa24cffa29389d964</anchor>
      <arglist>(const char *message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IoError</name>
      <anchorfile>a02577.html</anchorfile>
      <anchor>af29d4cb0e06420d3609f98509e78166b</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IoError</name>
      <anchorfile>a02577.html</anchorfile>
      <anchor>abdc691521b8e780595d1a491a6bcc3be</anchor>
      <arglist>(const char *message, const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IoError</name>
      <anchorfile>a02577.html</anchorfile>
      <anchor>a000186bf062781204af3940899f1f3ba</anchor>
      <arglist>(const std::string &amp;message, const std::string &amp;file)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IoError</name>
      <anchorfile>a02577.html</anchorfile>
      <anchor>aaad9306ace6181b2e8a38ba2eedf88d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>message</name>
      <anchorfile>a02577.html</anchorfile>
      <anchor>a7a46a349ff3098534da81350a6fec061</anchor>
      <arglist>(const char *message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>message</name>
      <anchorfile>a02577.html</anchorfile>
      <anchor>a6db7001e8987fe0bed56f41e53dd4fee</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>file</name>
      <anchorfile>a02577.html</anchorfile>
      <anchor>a51d6a4ade7b21409a4070f3d27c954bf</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>message</name>
      <anchorfile>a02577.html</anchorfile>
      <anchor>a77c231e47051f5ce971c8f1ce5976b41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>file</name>
      <anchorfile>a02577.html</anchorfile>
      <anchor>af6d370d625075908b4db29cece240972</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>a02577.html</anchorfile>
      <anchor>ad62489809e3df568e973597b928d6d9b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::IterableBoolMap::ItemIt</name>
    <filename>a03613.html</filename>
    <member kind="function">
      <type></type>
      <name>ItemIt</name>
      <anchorfile>a03613.html</anchorfile>
      <anchor>af5cf77442b8fa8be820e2b1ff48c23b1</anchor>
      <arglist>(const IterableBoolMap &amp;map, bool value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ItemIt</name>
      <anchorfile>a03613.html</anchorfile>
      <anchor>ac94a8a34f023735fd20c6a684974d344</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type>ItemIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a03613.html</anchorfile>
      <anchor>afcf841b3d25f7aa896fe7edad455091a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::IterableIntMap::ItemIt</name>
    <filename>a03629.html</filename>
    <member kind="function">
      <type></type>
      <name>ItemIt</name>
      <anchorfile>a03629.html</anchorfile>
      <anchor>ac94a8a34f023735fd20c6a684974d344</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ItemIt</name>
      <anchorfile>a03629.html</anchorfile>
      <anchor>ad178cceb8da8310a95cf229b44b84de6</anchor>
      <arglist>(const IterableIntMap &amp;map, int value)</arglist>
    </member>
    <member kind="function">
      <type>ItemIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a03629.html</anchorfile>
      <anchor>afcf841b3d25f7aa896fe7edad455091a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::IterableValueMap::ItemIt</name>
    <filename>a03645.html</filename>
    <member kind="function">
      <type></type>
      <name>ItemIt</name>
      <anchorfile>a03645.html</anchorfile>
      <anchor>ac94a8a34f023735fd20c6a684974d344</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ItemIt</name>
      <anchorfile>a03645.html</anchorfile>
      <anchor>a68b002db9c217a074e94b9a1e6260bb3</anchor>
      <arglist>(const IterableValueMap &amp;map, const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>ItemIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a03645.html</anchorfile>
      <anchor>afcf841b3d25f7aa896fe7edad455091a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::UnionFindEnum::ItemIt</name>
    <filename>a04377.html</filename>
    <member kind="function">
      <type></type>
      <name>ItemIt</name>
      <anchorfile>a04377.html</anchorfile>
      <anchor>a71eb2d37629fe1d7a9f7b0f418c4ff16</anchor>
      <arglist>(const UnionFindEnum &amp;ufe, int cls)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ItemIt</name>
      <anchorfile>a04377.html</anchorfile>
      <anchor>ac94a8a34f023735fd20c6a684974d344</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type>ItemIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a04377.html</anchorfile>
      <anchor>afcf841b3d25f7aa896fe7edad455091a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Item &amp;</name>
      <anchorfile>a04377.html</anchorfile>
      <anchor>a6af24e53e98a36713c90199fe57ca15d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a04377.html</anchorfile>
      <anchor>a83ee20b3b68aeb5de19bf71cf2c9f17d</anchor>
      <arglist>(const ItemIt &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a04377.html</anchorfile>
      <anchor>a8806a1b76a91c170b552cb92a95b7da0</anchor>
      <arglist>(const ItemIt &amp;i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ExtendFindEnum::ItemIt</name>
    <filename>a04397.html</filename>
    <member kind="function">
      <type></type>
      <name>ItemIt</name>
      <anchorfile>a04397.html</anchorfile>
      <anchor>a7812fb6c628cec851fb9afb1883972a5</anchor>
      <arglist>(const ExtendFindEnum &amp;ufe, int cls)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ItemIt</name>
      <anchorfile>a04397.html</anchorfile>
      <anchor>ac94a8a34f023735fd20c6a684974d344</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type>ItemIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a04397.html</anchorfile>
      <anchor>afcf841b3d25f7aa896fe7edad455091a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Item &amp;</name>
      <anchorfile>a04397.html</anchorfile>
      <anchor>a6af24e53e98a36713c90199fe57ca15d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a04397.html</anchorfile>
      <anchor>a83ee20b3b68aeb5de19bf71cf2c9f17d</anchor>
      <arglist>(const ItemIt &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a04397.html</anchorfile>
      <anchor>a8806a1b76a91c170b552cb92a95b7da0</anchor>
      <arglist>(const ItemIt &amp;i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::HeapUnionFind::ItemIt</name>
    <filename>a04413.html</filename>
    <member kind="function">
      <type></type>
      <name>ItemIt</name>
      <anchorfile>a04413.html</anchorfile>
      <anchor>af9815f2a938cdcf66550d6f5ba407275</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ItemIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a04413.html</anchorfile>
      <anchor>afcf841b3d25f7aa896fe7edad455091a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Item &amp;</name>
      <anchorfile>a04413.html</anchorfile>
      <anchor>a6af24e53e98a36713c90199fe57ca15d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a04413.html</anchorfile>
      <anchor>a83ee20b3b68aeb5de19bf71cf2c9f17d</anchor>
      <arglist>(const ItemIt &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a04413.html</anchorfile>
      <anchor>a8806a1b76a91c170b552cb92a95b7da0</anchor>
      <arglist>(const ItemIt &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a04413.html</anchorfile>
      <anchor>afbd1dc99d3bb91299bdeac8966b4fbc1</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a04413.html</anchorfile>
      <anchor>aa20cdc6e6b325e231a505a4eb85e3989</anchor>
      <arglist>(Invalid)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::IterableBoolMap</name>
    <filename>a03597.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">lemon::IterableBoolMap::FalseIt</class>
    <class kind="class">lemon::IterableBoolMap::ItemIt</class>
    <class kind="class">lemon::IterableBoolMap::Reference</class>
    <class kind="class">lemon::IterableBoolMap::TrueIt</class>
    <member kind="typedef">
      <type>True</type>
      <name>ReferenceMapTag</name>
      <anchorfile>a03597.html</anchorfile>
      <anchor>a804d338ca2e0e71ef0572ec61ddefffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a03597.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>Value</name>
      <anchorfile>a03597.html</anchorfile>
      <anchor>aaf2b2f1e7bba19591a125e352c5d7bda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Value &amp;</type>
      <name>ConstReference</name>
      <anchorfile>a03597.html</anchorfile>
      <anchor>a33899f17b36f4c01c39f333a0a6f989b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterableBoolMap</name>
      <anchorfile>a03597.html</anchorfile>
      <anchor>a51303a5414073c253a35d305e315202a</anchor>
      <arglist>(const Graph &amp;graph, bool def=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator[]</name>
      <anchorfile>a03597.html</anchorfile>
      <anchor>ab894dd03dc9650f9b4f38765b0401a1d</anchor>
      <arglist>(const Key &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a03597.html</anchorfile>
      <anchor>a9f5ba3ddf6865f9fd2fdf6b3b19f2578</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03597.html</anchorfile>
      <anchor>abcff3adb7578424aca62a8aa36412ca1</anchor>
      <arglist>(const Key &amp;key, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAll</name>
      <anchorfile>a03597.html</anchorfile>
      <anchor>ae2b19429b4a46ec789884ee003a47ff2</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>trueNum</name>
      <anchorfile>a03597.html</anchorfile>
      <anchor>a009bbbc79d2ff93d27eb1296d22f7f1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>falseNum</name>
      <anchorfile>a03597.html</anchorfile>
      <anchor>a2e0a8387fd504c6e8c39027705433a92</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::IterableBpGraphComponent</name>
    <filename>a05377.html</filename>
    <templarg></templarg>
    <base>IterableGraphComponent&lt; BaseBpGraphComponent &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a05377.html</anchorfile>
      <anchor>a51dc9b4575b6eb28ffccac18fbeaa8f8</anchor>
      <arglist>(RedNode &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a05377.html</anchorfile>
      <anchor>abc07bdb5dc952c49563b7292fc968584</anchor>
      <arglist>(RedNode &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a05377.html</anchorfile>
      <anchor>ad35881f82cb39be49d878dc4700bb5e0</anchor>
      <arglist>(BlueNode &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a05377.html</anchorfile>
      <anchor>a66737324383d9c983b13594fc9ebfb48</anchor>
      <arglist>(BlueNode &amp;) const</arglist>
    </member>
    <member kind="typedef">
      <type>GraphItemIt&lt; BpGraph, RedNode &gt;</type>
      <name>RedNodeIt</name>
      <anchorfile>a05377.html</anchorfile>
      <anchor>ab8ae4e55e40cfc7da71fb09ef7513961</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GraphItemIt&lt; BpGraph, BlueNode &gt;</type>
      <name>BlueNodeIt</name>
      <anchorfile>a05377.html</anchorfile>
      <anchor>a4d9c4287e23ae0295aa329e25196c22f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GraphItemIt&lt; BpGraph, RedNode &gt;</type>
      <name>RedNodeIt</name>
      <anchorfile>a05377.html</anchorfile>
      <anchor>ab8ae4e55e40cfc7da71fb09ef7513961</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GraphItemIt&lt; BpGraph, BlueNode &gt;</type>
      <name>BlueNodeIt</name>
      <anchorfile>a05377.html</anchorfile>
      <anchor>a4d9c4287e23ae0295aa329e25196c22f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a05377.html</anchorfile>
      <anchor>a51dc9b4575b6eb28ffccac18fbeaa8f8</anchor>
      <arglist>(RedNode &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a05377.html</anchorfile>
      <anchor>abc07bdb5dc952c49563b7292fc968584</anchor>
      <arglist>(RedNode &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a05377.html</anchorfile>
      <anchor>ad35881f82cb39be49d878dc4700bb5e0</anchor>
      <arglist>(BlueNode &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a05377.html</anchorfile>
      <anchor>a66737324383d9c983b13594fc9ebfb48</anchor>
      <arglist>(BlueNode &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::IterableDigraphComponent</name>
    <filename>a05361.html</filename>
    <templarg></templarg>
    <base>lemon::concepts::BaseDigraphComponent</base>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>af8ce6cd193b10c5484815ece31331c4e</anchor>
      <arglist>(Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>aa1b6fb9603c1ae3fff4044d9c7be9aec</anchor>
      <arglist>(Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a993843553ddd78ee9280f61e8aa8e6a3</anchor>
      <arglist>(Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>adb899f14f1af2c103133684622d2cd4b</anchor>
      <arglist>(Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>firstIn</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a356fe2cfaf6440a387085c93eb4f38a4</anchor>
      <arglist>(Arc &amp;, const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextIn</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>acd94d5a7520375e44e6dbcddbee06cdb</anchor>
      <arglist>(Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>firstOut</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a72c23bbc1865d31dca1db8396a4a5c47</anchor>
      <arglist>(Arc &amp;, const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextOut</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a5e741b714b7eaadfe5894408968d479e</anchor>
      <arglist>(Arc &amp;) const</arglist>
    </member>
    <member kind="typedef">
      <type>GraphItemIt&lt; Digraph, Node &gt;</type>
      <name>NodeIt</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a6257071492599b2dbdfae34d4773c4ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GraphItemIt&lt; Digraph, Arc &gt;</type>
      <name>ArcIt</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a024b650da6297bc362c5c45a1ec1393a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GraphIncIt&lt; Digraph, Arc, Node, &apos;i&apos;&gt;</type>
      <name>InArcIt</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a4af9ca720fd4e16255dcdeb8f2c3d8e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GraphIncIt&lt; Digraph, Arc, Node, &apos;o&apos;&gt;</type>
      <name>OutArcIt</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>afa242dd42944ff445f049a70c180c2f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>baseNode</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a8b22ddd51d8403995e959982ad001c26</anchor>
      <arglist>(const InArcIt &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>runningNode</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a7a9c85ff7ce67511bbe81bbfa6be554f</anchor>
      <arglist>(const InArcIt &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>baseNode</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a89868a58c43f92a3eff7d4dfaaa97657</anchor>
      <arglist>(const OutArcIt &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>runningNode</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>ab0851f932ae4c2bd18a7a5e49fdc0b7d</anchor>
      <arglist>(const OutArcIt &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>af8ce6cd193b10c5484815ece31331c4e</anchor>
      <arglist>(Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>aa1b6fb9603c1ae3fff4044d9c7be9aec</anchor>
      <arglist>(Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a993843553ddd78ee9280f61e8aa8e6a3</anchor>
      <arglist>(Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>adb899f14f1af2c103133684622d2cd4b</anchor>
      <arglist>(Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>firstIn</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a356fe2cfaf6440a387085c93eb4f38a4</anchor>
      <arglist>(Arc &amp;, const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextIn</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>acd94d5a7520375e44e6dbcddbee06cdb</anchor>
      <arglist>(Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>firstOut</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a72c23bbc1865d31dca1db8396a4a5c47</anchor>
      <arglist>(Arc &amp;, const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextOut</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a5e741b714b7eaadfe5894408968d479e</anchor>
      <arglist>(Arc &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IterableDigraphComponent&lt; BaseBpGraphComponent &gt;</name>
    <filename>a05361.html</filename>
    <base>lemon::concepts::BaseBpGraphComponent</base>
    <member kind="typedef">
      <type>GraphItemIt&lt; Digraph, Node &gt;</type>
      <name>NodeIt</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a6257071492599b2dbdfae34d4773c4ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GraphItemIt&lt; Digraph, Arc &gt;</type>
      <name>ArcIt</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a024b650da6297bc362c5c45a1ec1393a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GraphIncIt&lt; Digraph, Arc, Node, &apos;i&apos;&gt;</type>
      <name>InArcIt</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a4af9ca720fd4e16255dcdeb8f2c3d8e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GraphIncIt&lt; Digraph, Arc, Node, &apos;o&apos;&gt;</type>
      <name>OutArcIt</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>afa242dd42944ff445f049a70c180c2f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>baseNode</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a8b22ddd51d8403995e959982ad001c26</anchor>
      <arglist>(const InArcIt &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>baseNode</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a89868a58c43f92a3eff7d4dfaaa97657</anchor>
      <arglist>(const OutArcIt &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>runningNode</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a7a9c85ff7ce67511bbe81bbfa6be554f</anchor>
      <arglist>(const InArcIt &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>runningNode</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>ab0851f932ae4c2bd18a7a5e49fdc0b7d</anchor>
      <arglist>(const OutArcIt &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>af8ce6cd193b10c5484815ece31331c4e</anchor>
      <arglist>(Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a993843553ddd78ee9280f61e8aa8e6a3</anchor>
      <arglist>(Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>aa1b6fb9603c1ae3fff4044d9c7be9aec</anchor>
      <arglist>(Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>adb899f14f1af2c103133684622d2cd4b</anchor>
      <arglist>(Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>firstIn</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a356fe2cfaf6440a387085c93eb4f38a4</anchor>
      <arglist>(Arc &amp;, const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextIn</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>acd94d5a7520375e44e6dbcddbee06cdb</anchor>
      <arglist>(Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>firstOut</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a72c23bbc1865d31dca1db8396a4a5c47</anchor>
      <arglist>(Arc &amp;, const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextOut</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a5e741b714b7eaadfe5894408968d479e</anchor>
      <arglist>(Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>af8ce6cd193b10c5484815ece31331c4e</anchor>
      <arglist>(Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a993843553ddd78ee9280f61e8aa8e6a3</anchor>
      <arglist>(Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>aa1b6fb9603c1ae3fff4044d9c7be9aec</anchor>
      <arglist>(Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>adb899f14f1af2c103133684622d2cd4b</anchor>
      <arglist>(Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>firstIn</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a356fe2cfaf6440a387085c93eb4f38a4</anchor>
      <arglist>(Arc &amp;, const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextIn</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>acd94d5a7520375e44e6dbcddbee06cdb</anchor>
      <arglist>(Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>firstOut</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a72c23bbc1865d31dca1db8396a4a5c47</anchor>
      <arglist>(Arc &amp;, const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextOut</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a5e741b714b7eaadfe5894408968d479e</anchor>
      <arglist>(Arc &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IterableDigraphComponent&lt; BaseGraphComponent &gt;</name>
    <filename>a05361.html</filename>
    <base>lemon::concepts::BaseGraphComponent</base>
    <member kind="typedef">
      <type>GraphItemIt&lt; Digraph, Node &gt;</type>
      <name>NodeIt</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a6257071492599b2dbdfae34d4773c4ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GraphItemIt&lt; Digraph, Arc &gt;</type>
      <name>ArcIt</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a024b650da6297bc362c5c45a1ec1393a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GraphIncIt&lt; Digraph, Arc, Node, &apos;i&apos;&gt;</type>
      <name>InArcIt</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a4af9ca720fd4e16255dcdeb8f2c3d8e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GraphIncIt&lt; Digraph, Arc, Node, &apos;o&apos;&gt;</type>
      <name>OutArcIt</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>afa242dd42944ff445f049a70c180c2f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>baseNode</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a8b22ddd51d8403995e959982ad001c26</anchor>
      <arglist>(const InArcIt &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>baseNode</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a89868a58c43f92a3eff7d4dfaaa97657</anchor>
      <arglist>(const OutArcIt &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>runningNode</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a7a9c85ff7ce67511bbe81bbfa6be554f</anchor>
      <arglist>(const InArcIt &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>runningNode</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>ab0851f932ae4c2bd18a7a5e49fdc0b7d</anchor>
      <arglist>(const OutArcIt &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>af8ce6cd193b10c5484815ece31331c4e</anchor>
      <arglist>(Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a993843553ddd78ee9280f61e8aa8e6a3</anchor>
      <arglist>(Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>aa1b6fb9603c1ae3fff4044d9c7be9aec</anchor>
      <arglist>(Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>adb899f14f1af2c103133684622d2cd4b</anchor>
      <arglist>(Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>firstIn</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a356fe2cfaf6440a387085c93eb4f38a4</anchor>
      <arglist>(Arc &amp;, const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextIn</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>acd94d5a7520375e44e6dbcddbee06cdb</anchor>
      <arglist>(Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>firstOut</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a72c23bbc1865d31dca1db8396a4a5c47</anchor>
      <arglist>(Arc &amp;, const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextOut</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a5e741b714b7eaadfe5894408968d479e</anchor>
      <arglist>(Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>af8ce6cd193b10c5484815ece31331c4e</anchor>
      <arglist>(Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a993843553ddd78ee9280f61e8aa8e6a3</anchor>
      <arglist>(Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>aa1b6fb9603c1ae3fff4044d9c7be9aec</anchor>
      <arglist>(Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>adb899f14f1af2c103133684622d2cd4b</anchor>
      <arglist>(Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>firstIn</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a356fe2cfaf6440a387085c93eb4f38a4</anchor>
      <arglist>(Arc &amp;, const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextIn</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>acd94d5a7520375e44e6dbcddbee06cdb</anchor>
      <arglist>(Arc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>firstOut</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a72c23bbc1865d31dca1db8396a4a5c47</anchor>
      <arglist>(Arc &amp;, const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextOut</name>
      <anchorfile>a05361.html</anchorfile>
      <anchor>a5e741b714b7eaadfe5894408968d479e</anchor>
      <arglist>(Arc &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::IterableGraphComponent</name>
    <filename>a05369.html</filename>
    <templarg></templarg>
    <base>IterableDigraphComponent&lt; BaseGraphComponent &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a05369.html</anchorfile>
      <anchor>a8a1aa65e6cdb929de838acac68a78176</anchor>
      <arglist>(Edge &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a05369.html</anchorfile>
      <anchor>abefe5407e80373dd993c4bd17aae60a9</anchor>
      <arglist>(Edge &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>firstInc</name>
      <anchorfile>a05369.html</anchorfile>
      <anchor>a77b796b2cc55fe08416431c4f129fc42</anchor>
      <arglist>(Edge &amp;, bool &amp;, const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextInc</name>
      <anchorfile>a05369.html</anchorfile>
      <anchor>a1c03d54103741458aba6337d1e434704</anchor>
      <arglist>(Edge &amp;, bool &amp;) const</arglist>
    </member>
    <member kind="typedef">
      <type>GraphItemIt&lt; Graph, Edge &gt;</type>
      <name>EdgeIt</name>
      <anchorfile>a05369.html</anchorfile>
      <anchor>ac447d197226538192ba5820304c275fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GraphIncIt&lt; Graph, Edge, Node, &apos;e&apos;&gt;</type>
      <name>IncEdgeIt</name>
      <anchorfile>a05369.html</anchorfile>
      <anchor>a4bf94d3f391ecccbe5126d93e418fb6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>baseNode</name>
      <anchorfile>a05369.html</anchorfile>
      <anchor>a0dd0c94eafd2817628c1c355132cf6d0</anchor>
      <arglist>(const IncEdgeIt &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>runningNode</name>
      <anchorfile>a05369.html</anchorfile>
      <anchor>a750c198fa98903d903286aacb864c9f4</anchor>
      <arglist>(const IncEdgeIt &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a05369.html</anchorfile>
      <anchor>a8a1aa65e6cdb929de838acac68a78176</anchor>
      <arglist>(Edge &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a05369.html</anchorfile>
      <anchor>abefe5407e80373dd993c4bd17aae60a9</anchor>
      <arglist>(Edge &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>firstInc</name>
      <anchorfile>a05369.html</anchorfile>
      <anchor>a77b796b2cc55fe08416431c4f129fc42</anchor>
      <arglist>(Edge &amp;, bool &amp;, const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextInc</name>
      <anchorfile>a05369.html</anchorfile>
      <anchor>a1c03d54103741458aba6337d1e434704</anchor>
      <arglist>(Edge &amp;, bool &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IterableGraphComponent&lt; BaseBpGraphComponent &gt;</name>
    <filename>a05369.html</filename>
    <base>IterableDigraphComponent&lt; BaseBpGraphComponent &gt;</base>
    <member kind="typedef">
      <type>GraphItemIt&lt; Graph, Edge &gt;</type>
      <name>EdgeIt</name>
      <anchorfile>a05369.html</anchorfile>
      <anchor>ac447d197226538192ba5820304c275fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GraphIncIt&lt; Graph, Edge, Node, &apos;e&apos;&gt;</type>
      <name>IncEdgeIt</name>
      <anchorfile>a05369.html</anchorfile>
      <anchor>a4bf94d3f391ecccbe5126d93e418fb6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>baseNode</name>
      <anchorfile>a05369.html</anchorfile>
      <anchor>a0dd0c94eafd2817628c1c355132cf6d0</anchor>
      <arglist>(const IncEdgeIt &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>runningNode</name>
      <anchorfile>a05369.html</anchorfile>
      <anchor>a750c198fa98903d903286aacb864c9f4</anchor>
      <arglist>(const IncEdgeIt &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a05369.html</anchorfile>
      <anchor>a8a1aa65e6cdb929de838acac68a78176</anchor>
      <arglist>(Edge &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a05369.html</anchorfile>
      <anchor>abefe5407e80373dd993c4bd17aae60a9</anchor>
      <arglist>(Edge &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>firstInc</name>
      <anchorfile>a05369.html</anchorfile>
      <anchor>a77b796b2cc55fe08416431c4f129fc42</anchor>
      <arglist>(Edge &amp;, bool &amp;, const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextInc</name>
      <anchorfile>a05369.html</anchorfile>
      <anchor>a1c03d54103741458aba6337d1e434704</anchor>
      <arglist>(Edge &amp;, bool &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a05369.html</anchorfile>
      <anchor>a8a1aa65e6cdb929de838acac68a78176</anchor>
      <arglist>(Edge &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a05369.html</anchorfile>
      <anchor>abefe5407e80373dd993c4bd17aae60a9</anchor>
      <arglist>(Edge &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>firstInc</name>
      <anchorfile>a05369.html</anchorfile>
      <anchor>a77b796b2cc55fe08416431c4f129fc42</anchor>
      <arglist>(Edge &amp;, bool &amp;, const Node &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextInc</name>
      <anchorfile>a05369.html</anchorfile>
      <anchor>a1c03d54103741458aba6337d1e434704</anchor>
      <arglist>(Edge &amp;, bool &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::IterableIntMap</name>
    <filename>a03621.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">lemon::IterableIntMap::ItemIt</class>
    <class kind="class">lemon::IterableIntMap::Reference</class>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a03621.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Value</name>
      <anchorfile>a03621.html</anchorfile>
      <anchor>a8940a046b717a18878ab9de4ba32a0b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GR</type>
      <name>Graph</name>
      <anchorfile>a03621.html</anchorfile>
      <anchor>a2a51ae337b207f01f1c904f5eb2aa98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>True</type>
      <name>ReferenceMapTag</name>
      <anchorfile>a03621.html</anchorfile>
      <anchor>a804d338ca2e0e71ef0572ec61ddefffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Value &amp;</type>
      <name>ConstReference</name>
      <anchorfile>a03621.html</anchorfile>
      <anchor>a33899f17b36f4c01c39f333a0a6f989b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterableIntMap</name>
      <anchorfile>a03621.html</anchorfile>
      <anchor>aa67ee233a5a36959b68110698c89e47d</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterableIntMap</name>
      <anchorfile>a03621.html</anchorfile>
      <anchor>a32a4c075b69acd509b88e32ba54973f6</anchor>
      <arglist>(const Graph &amp;graph, int value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03621.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03621.html</anchorfile>
      <anchor>a603dc3052fdde5db5980a0846177e561</anchor>
      <arglist>(const Key &amp;key, const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a03621.html</anchorfile>
      <anchor>a1e3f9ef5e537218097e28e4de115385a</anchor>
      <arglist>(const Key &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a03621.html</anchorfile>
      <anchor>a9f5ba3ddf6865f9fd2fdf6b3b19f2578</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::IterableValueMap</name>
    <filename>a03637.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">lemon::IterableValueMap::ItemIt</class>
    <class kind="class">lemon::IterableValueMap::ValueIt</class>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a03637.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a03637.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GR</type>
      <name>Graph</name>
      <anchorfile>a03637.html</anchorfile>
      <anchor>a2a51ae337b207f01f1c904f5eb2aa98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterableValueMap</name>
      <anchorfile>a03637.html</anchorfile>
      <anchor>aca57167c3a21ae7bf42f2a2510ca9e4b</anchor>
      <arglist>(const Graph &amp;graph, const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>ValueIt</type>
      <name>beginValue</name>
      <anchorfile>a03637.html</anchorfile>
      <anchor>aacb353dcd725e2cdcf4929aaabe25b67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ValueIt</type>
      <name>endValue</name>
      <anchorfile>a03637.html</anchorfile>
      <anchor>a8a0b9f15500e38df5188aeb1803a5a70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03637.html</anchorfile>
      <anchor>a603dc3052fdde5db5980a0846177e561</anchor>
      <arglist>(const Key &amp;key, const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a03637.html</anchorfile>
      <anchor>a1e3f9ef5e537218097e28e4de115385a</anchor>
      <arglist>(const Key &amp;key) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::KarpMmc</name>
    <filename>a02969.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycleMean</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a6f2b5b662ec988c85c00724b45b3d303</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycle</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a073361e707d4e223b592a796a7c691a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>cycleCost</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a30321d7a2f44b73b067ffc64caa321c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cycleSize</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a105f701f9c556e0ac33103153ebd6634</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cycleMean</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a2c81dc63e5ed566d54c7dee43f87b83e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>cycle</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>ac0bb39a6609abdfcdec2b2cf951ed69a</anchor>
      <arglist>() const</arglist>
    </member>
    <class kind="struct">lemon::KarpMmc::SetLargeCost</class>
    <class kind="struct">lemon::KarpMmc::SetPath</class>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::CostMap</type>
      <name>CostMap</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a3a2252844f4d7748442eb48a6907f379</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Cost</type>
      <name>Cost</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a9142822eba184f2778b6aac70b0900b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LargeCost</type>
      <name>LargeCost</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a7f34159326618acfb683317c3df26662</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Tolerance</type>
      <name>Tolerance</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a35e771685a474e678b13c4de43711c7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Path</type>
      <name>Path</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>ad6d7757da799220a95281fbee4d3fb8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR</type>
      <name>Traits</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KarpMmc</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a1faa7ea10aa24f717f26008b7c789bc7</anchor>
      <arglist>(const Digraph &amp;digraph, const CostMap &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~KarpMmc</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>acb28cdc9fb89b896526a729aaa21a0cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KarpMmc &amp;</type>
      <name>cycle</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>aa22fa56570a94c95f01c82c60b2f225b</anchor>
      <arglist>(Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>KarpMmc &amp;</type>
      <name>tolerance</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a8dcc55d4659a07db06264d61d4f65d43</anchor>
      <arglist>(const Tolerance &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const Tolerance &amp;</type>
      <name>tolerance</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>aec76cbbff18f655dd34a7020418965bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycleMean</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a6f2b5b662ec988c85c00724b45b3d303</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycle</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a073361e707d4e223b592a796a7c691a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>cycleCost</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a30321d7a2f44b73b067ffc64caa321c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cycleSize</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a105f701f9c556e0ac33103153ebd6634</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cycleMean</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a2c81dc63e5ed566d54c7dee43f87b83e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>cycle</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>ac0bb39a6609abdfcdec2b2cf951ed69a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KarpMmc&lt; GR, CM, SetLargeCostTraits&lt; T &gt; &gt;</name>
    <filename>a02969.html</filename>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>cycle</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>ac0bb39a6609abdfcdec2b2cf951ed69a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>cycleCost</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a30321d7a2f44b73b067ffc64caa321c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cycleSize</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a105f701f9c556e0ac33103153ebd6634</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cycleMean</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a2c81dc63e5ed566d54c7dee43f87b83e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycleMean</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a6f2b5b662ec988c85c00724b45b3d303</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycle</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a073361e707d4e223b592a796a7c691a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::CostMap</type>
      <name>CostMap</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a3a2252844f4d7748442eb48a6907f379</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Cost</type>
      <name>Cost</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a9142822eba184f2778b6aac70b0900b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LargeCost</type>
      <name>LargeCost</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a7f34159326618acfb683317c3df26662</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Tolerance</type>
      <name>Tolerance</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a35e771685a474e678b13c4de43711c7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Path</type>
      <name>Path</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>ad6d7757da799220a95281fbee4d3fb8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetLargeCostTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KarpMmc</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a1faa7ea10aa24f717f26008b7c789bc7</anchor>
      <arglist>(const Digraph &amp;digraph, const CostMap &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~KarpMmc</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>acb28cdc9fb89b896526a729aaa21a0cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KarpMmc &amp;</type>
      <name>cycle</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>aa22fa56570a94c95f01c82c60b2f225b</anchor>
      <arglist>(Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>KarpMmc &amp;</type>
      <name>tolerance</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a8dcc55d4659a07db06264d61d4f65d43</anchor>
      <arglist>(const Tolerance &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const Tolerance &amp;</type>
      <name>tolerance</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>aec76cbbff18f655dd34a7020418965bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>cycle</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>ac0bb39a6609abdfcdec2b2cf951ed69a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>cycleCost</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a30321d7a2f44b73b067ffc64caa321c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cycleSize</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a105f701f9c556e0ac33103153ebd6634</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cycleMean</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a2c81dc63e5ed566d54c7dee43f87b83e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycleMean</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a6f2b5b662ec988c85c00724b45b3d303</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycle</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a073361e707d4e223b592a796a7c691a5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KarpMmc&lt; GR, CM, SetPathTraits&lt; T &gt; &gt;</name>
    <filename>a02969.html</filename>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>cycle</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>ac0bb39a6609abdfcdec2b2cf951ed69a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>cycleCost</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a30321d7a2f44b73b067ffc64caa321c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cycleSize</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a105f701f9c556e0ac33103153ebd6634</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cycleMean</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a2c81dc63e5ed566d54c7dee43f87b83e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycleMean</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a6f2b5b662ec988c85c00724b45b3d303</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycle</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a073361e707d4e223b592a796a7c691a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::CostMap</type>
      <name>CostMap</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a3a2252844f4d7748442eb48a6907f379</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Cost</type>
      <name>Cost</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a9142822eba184f2778b6aac70b0900b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LargeCost</type>
      <name>LargeCost</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a7f34159326618acfb683317c3df26662</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Tolerance</type>
      <name>Tolerance</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a35e771685a474e678b13c4de43711c7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Path</type>
      <name>Path</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>ad6d7757da799220a95281fbee4d3fb8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetPathTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KarpMmc</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a1faa7ea10aa24f717f26008b7c789bc7</anchor>
      <arglist>(const Digraph &amp;digraph, const CostMap &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~KarpMmc</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>acb28cdc9fb89b896526a729aaa21a0cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KarpMmc &amp;</type>
      <name>cycle</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>aa22fa56570a94c95f01c82c60b2f225b</anchor>
      <arglist>(Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>KarpMmc &amp;</type>
      <name>tolerance</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a8dcc55d4659a07db06264d61d4f65d43</anchor>
      <arglist>(const Tolerance &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const Tolerance &amp;</type>
      <name>tolerance</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>aec76cbbff18f655dd34a7020418965bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>cycle</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>ac0bb39a6609abdfcdec2b2cf951ed69a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>cycleCost</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a30321d7a2f44b73b067ffc64caa321c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cycleSize</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a105f701f9c556e0ac33103153ebd6634</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cycleMean</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a2c81dc63e5ed566d54c7dee43f87b83e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycleMean</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a6f2b5b662ec988c85c00724b45b3d303</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCycle</name>
      <anchorfile>a02969.html</anchorfile>
      <anchor>a073361e707d4e223b592a796a7c691a5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::KarpMmcDefaultTraits</name>
    <filename>a02961.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a02961.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CM</type>
      <name>CostMap</name>
      <anchorfile>a02961.html</anchorfile>
      <anchor>a0e4fe3b3bd126f464294f661c36a61d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CostMap::Value</type>
      <name>Cost</name>
      <anchorfile>a02961.html</anchorfile>
      <anchor>ac9e9deaccf259b5931d867b0790c1e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>LargeCost</name>
      <anchorfile>a02961.html</anchorfile>
      <anchor>abb5b2df15a07785723c3202702c06a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lemon::Tolerance&lt; LargeCost &gt;</type>
      <name>Tolerance</name>
      <anchorfile>a02961.html</anchorfile>
      <anchor>a1a087d7bb62d1a766aa6809f2fe4a336</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lemon::Path&lt; Digraph &gt;</type>
      <name>Path</name>
      <anchorfile>a02961.html</anchorfile>
      <anchor>a6989b0a22a99c251a2e7c99cf36605ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::LessMap</name>
    <filename>a03553.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>MapBase&lt; M1::Key, bool &gt;</base>
    <member kind="typedef">
      <type>M1::Key</type>
      <name>Key</name>
      <anchorfile>a03553.html</anchorfile>
      <anchor>ac16c774bd2b82a45854c3ac66248de01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>Value</name>
      <anchorfile>a03553.html</anchorfile>
      <anchor>aaf2b2f1e7bba19591a125e352c5d7bda</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LessMap</name>
      <anchorfile>a03553.html</anchorfile>
      <anchor>a3992271974bb62dd5632a068a68b5ea6</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03553.html</anchorfile>
      <anchor>a8de1b13f44fab45faa8daa93027f9df2</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>LessMap&lt; M1, M2 &gt;</type>
      <name>lessMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga4c49f5cdfa8c2484f4fd1a8ce476ba14</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::LgfContents</name>
    <filename>a03141.html</filename>
    <member kind="function">
      <type>int</type>
      <name>nodeSectionNum</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>ad5cdb502772dc66be7be4076d55fe09c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>nodeSection</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>af083c6e0406e8a5d5a694b581f0d6d81</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>nodeMapNames</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>a83e73b3459b939190153abefb326bd3f</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>arcSectionNum</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>a66d3f53752cdabeeee076438af93bc64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>arcSection</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>a23019a8db8d2010d705f1fcb81330276</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>arcMapNames</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>adfec620829974e2e41f4b2f6db5a8613</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>edgeSectionNum</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>aaf881fe1bf3071bbabf056e9784cdd1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>edgeSection</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>ac7a36047f23102ccde0bf31dc9172550</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>edgeMapNames</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>ad25960834098b1cc94f3bec241b52e33</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>attributeSectionNum</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>aca49d44e0a92c58e4a99cf67e6757e78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>attributeSectionNames</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>a96338508dc5f464418227f55f2cdc789</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>attributes</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>adc3ce8d73e5d88601cbf44b6dba3d1b7</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>extraSectionNum</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>a5058d64ef7829cbad732e51cf75dcce8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>extraSection</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>ad47415fc31d0709c1174c8b0a5e06769</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LgfContents</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>a354d20288c783068888642817d4201fb</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LgfContents</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>a8504ecb1b857fd19df24823e811d3140</anchor>
      <arglist>(const std::string &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LgfContents</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>adf863a29229b03c84b76d174dfc355cb</anchor>
      <arglist>(const char *fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LgfContents</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>aeafd3f08b75c187e55c1c89ec0962248</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nodeSectionNum</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>ad5cdb502772dc66be7be4076d55fe09c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>nodeSection</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>af083c6e0406e8a5d5a694b581f0d6d81</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>nodeMapNames</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>a83e73b3459b939190153abefb326bd3f</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>arcSectionNum</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>a66d3f53752cdabeeee076438af93bc64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>arcSection</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>a23019a8db8d2010d705f1fcb81330276</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>arcMapNames</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>adfec620829974e2e41f4b2f6db5a8613</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>edgeSectionNum</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>aaf881fe1bf3071bbabf056e9784cdd1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>edgeSection</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>ac7a36047f23102ccde0bf31dc9172550</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>edgeMapNames</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>ad25960834098b1cc94f3bec241b52e33</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>attributeSectionNum</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>aca49d44e0a92c58e4a99cf67e6757e78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>attributeSectionNames</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>a96338508dc5f464418227f55f2cdc789</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>attributes</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>adc3ce8d73e5d88601cbf44b6dba3d1b7</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>extraSectionNum</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>a5058d64ef7829cbad732e51cf75dcce8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>extraSection</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>ad47415fc31d0709c1174c8b0a5e06769</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::CplexEnv::LicenseError</name>
    <filename>a02173.html</filename>
    <base>lemon::Exception</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>a02173.html</anchorfile>
      <anchor>ad62489809e3df568e973597b928d6d9b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::LinkedElevator</name>
    <filename>a02569.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>Item</type>
      <name>highestActive</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>ae705c89b74ba93a8d0030a73c32a6c55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>highestActiveLevel</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>af0d0300a784833d553460afc1a880e85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>liftHighestActive</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>ad448db204a4dc8bcb628933f31a113d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>liftHighestActive</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a744a06f7232fcac254c31fe9b2b879b0</anchor>
      <arglist>(int new_level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>liftHighestActiveToTop</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>afa70a583d65837a24a1c86bf52a6fdc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>activeOn</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>aeb4d7e1e5f1f7400a2ef6d62420dfd1f</anchor>
      <arglist>(int l) const</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>liftActiveOn</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a1275752b5d49412c4cc0dc9cb4d72323</anchor>
      <arglist>(int l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>liftActiveOn</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a29269ad15861c513fe6297d4aad41d83</anchor>
      <arglist>(int l, int new_level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>liftActiveToTop</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a404be93d69dc02dec4b6572745a70921</anchor>
      <arglist>(int l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initStart</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a92a97cb68d6dbaf545fa72b36dfa3cd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initAddItem</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a64a9da3e23ab4c7248a6efcde26b1064</anchor>
      <arglist>(Item i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initNewLevel</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>aa8880e6363f8b0c2e012a03cb8bc0d77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initFinish</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>afaee4c060888616a45d071530326ea8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinkedElevator</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a7c6dec431b72da2e9f1ea0296d104f0e</anchor>
      <arglist>(const GR &amp;graph, int max_level)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinkedElevator</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>aa58ae777b13e13505d79f6d58be15e37</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a4db11bfc0b64725808f2cedf6efe85bc</anchor>
      <arglist>(Item i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deactivate</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a6399621b031eeef6b06bf4f25d0922c7</anchor>
      <arglist>(Item i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>active</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a7108409e037a22bb883d251a4df9d75f</anchor>
      <arglist>(Item i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator[]</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a0037dfd997d392339662c54108f3c52d</anchor>
      <arglist>(Item i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onLevel</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a425728c27c25500924171d82d907d2cb</anchor>
      <arglist>(int l) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyLevel</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>adaef76e27a2462ce4f8afa63768c0e54</anchor>
      <arglist>(int l) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>aboveLevel</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a971d829fbfdd63633d871715d41a8266</anchor>
      <arglist>(int l) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>activesOnLevel</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a245c078bd901f23e0123534d43504693</anchor>
      <arglist>(int l) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>activeFree</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a3c0217ceafea30c1c583eaf4f96172a5</anchor>
      <arglist>(int l) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>aae3e60918141bd57c813d7cd8b12bc75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lift</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a9e8cac16792c7bdac1584828690059a5</anchor>
      <arglist>(Item i, int new_level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dirtyTopButOne</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a45c945d67da38b2225cf6c34504cdb08</anchor>
      <arglist>(Item i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>liftToTop</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>af2c6a1f548364b1447a377c311eb948e</anchor>
      <arglist>(int l)</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>highestActive</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>ae705c89b74ba93a8d0030a73c32a6c55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>highestActiveLevel</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>af0d0300a784833d553460afc1a880e85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>liftHighestActive</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>ad448db204a4dc8bcb628933f31a113d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>liftHighestActive</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a744a06f7232fcac254c31fe9b2b879b0</anchor>
      <arglist>(int new_level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>liftHighestActiveToTop</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>afa70a583d65837a24a1c86bf52a6fdc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>activeOn</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>aeb4d7e1e5f1f7400a2ef6d62420dfd1f</anchor>
      <arglist>(int l) const</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>liftActiveOn</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a1275752b5d49412c4cc0dc9cb4d72323</anchor>
      <arglist>(int l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>liftActiveOn</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a29269ad15861c513fe6297d4aad41d83</anchor>
      <arglist>(int l, int new_level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>liftActiveToTop</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a404be93d69dc02dec4b6572745a70921</anchor>
      <arglist>(int l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initStart</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a92a97cb68d6dbaf545fa72b36dfa3cd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initAddItem</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a64a9da3e23ab4c7248a6efcde26b1064</anchor>
      <arglist>(Item i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initNewLevel</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>aa8880e6363f8b0c2e012a03cb8bc0d77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initFinish</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>afaee4c060888616a45d071530326ea8b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ListArcSet</name>
    <filename>a02449.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ListArcSet</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>aa282329c1d82b1cb36430d5905c0ae41</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>addArc</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>ab947ea03356504c5c4b3c8ebfed1516a</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a3a2143bdbfc896efc87ea1a34bbcf824</anchor>
      <arglist>(const Arc &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ListBpGraph</name>
    <filename>a03325.html</filename>
    <class kind="class">lemon::ListBpGraph::Snapshot</class>
    <member kind="function">
      <type></type>
      <name>ListBpGraph</name>
      <anchorfile>a03325.html</anchorfile>
      <anchor>a02bf78d75220d990389ca54107103d03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RedNode</type>
      <name>addRedNode</name>
      <anchorfile>a03325.html</anchorfile>
      <anchor>a3a95276b83b5a39135c100a32e2be340</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BlueNode</type>
      <name>addBlueNode</name>
      <anchorfile>a03325.html</anchorfile>
      <anchor>aad169db9a3cf4752c8405f83099f6d47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Edge</type>
      <name>addEdge</name>
      <anchorfile>a03325.html</anchorfile>
      <anchor>a440cb16e73dafeae5a3dfdc984a8f8f3</anchor>
      <arglist>(RedNode u, BlueNode v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a03325.html</anchorfile>
      <anchor>a74e3b0d27f7587faa2d169a0856ff817</anchor>
      <arglist>(Node n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a03325.html</anchorfile>
      <anchor>af311a569a7d86c03db49c5e1fe62e7a4</anchor>
      <arglist>(Edge e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a03325.html</anchorfile>
      <anchor>a0175ae42450fd7acfd496967556d4503</anchor>
      <arglist>(Node n) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a03325.html</anchorfile>
      <anchor>a5d89bc9b43f4328c423b3f0c29558e55</anchor>
      <arglist>(Edge e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a03325.html</anchorfile>
      <anchor>ae066aa5f9c819ff677d498b096182aed</anchor>
      <arglist>(Arc a) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeRed</name>
      <anchorfile>a03325.html</anchorfile>
      <anchor>a58b745cb55d320050af95b578fb4c2d5</anchor>
      <arglist>(Edge e, RedNode n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeBlue</name>
      <anchorfile>a03325.html</anchorfile>
      <anchor>a7bdc15f10072d20f21bda91a1904c4f5</anchor>
      <arglist>(Edge e, BlueNode n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a03325.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserveNode</name>
      <anchorfile>a03325.html</anchorfile>
      <anchor>a28bb4df827e678ae549849be81d88def</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserveEdge</name>
      <anchorfile>a03325.html</anchorfile>
      <anchor>a0337d8e0a11c8d4d22de6265b526df1e</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ListBpGraph</name>
      <anchorfile>a03325.html</anchorfile>
      <anchor>a1128d56e162dcf7ae3f7b66e240a2738</anchor>
      <arglist>(const ListBpGraph &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a03325.html</anchorfile>
      <anchor>abea6a9e7f420e76886ead048bb123002</anchor>
      <arglist>(const ListBpGraph &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ListDigraph</name>
    <filename>a03237.html</filename>
    <class kind="class">lemon::ListDigraph::Snapshot</class>
    <member kind="function">
      <type></type>
      <name>ListDigraph</name>
      <anchorfile>a03237.html</anchorfile>
      <anchor>abff6c0f71f9067a36468f2919edcac51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>addNode</name>
      <anchorfile>a03237.html</anchorfile>
      <anchor>a96838566b12a6b04795db38688bad1a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>addArc</name>
      <anchorfile>a03237.html</anchorfile>
      <anchor>af90c0ea6fc0a0e7454657e710e8f4d0b</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a03237.html</anchorfile>
      <anchor>a74e3b0d27f7587faa2d169a0856ff817</anchor>
      <arglist>(Node n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a03237.html</anchorfile>
      <anchor>a2a4c77c93b4d1a5a924eef37bd92a051</anchor>
      <arglist>(Arc a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a03237.html</anchorfile>
      <anchor>a0175ae42450fd7acfd496967556d4503</anchor>
      <arglist>(Node n) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a03237.html</anchorfile>
      <anchor>ae066aa5f9c819ff677d498b096182aed</anchor>
      <arglist>(Arc a) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeTarget</name>
      <anchorfile>a03237.html</anchorfile>
      <anchor>abfb074c8c3ead2adee735878dd221ed3</anchor>
      <arglist>(Arc a, Node n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeSource</name>
      <anchorfile>a03237.html</anchorfile>
      <anchor>a20b4f4bf5bad96ec675f077f4b87f349</anchor>
      <arglist>(Arc a, Node n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverseArc</name>
      <anchorfile>a03237.html</anchorfile>
      <anchor>ae6cde4a094668807fd07c7971c82a674</anchor>
      <arglist>(Arc a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>contract</name>
      <anchorfile>a03237.html</anchorfile>
      <anchor>a78af55bb4a485dbbddd7f3fdfd4f0394</anchor>
      <arglist>(Node u, Node v, bool r=true)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>split</name>
      <anchorfile>a03237.html</anchorfile>
      <anchor>a09a307979f5ac51cc21195285d485bbe</anchor>
      <arglist>(Node n, bool connect=true)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>split</name>
      <anchorfile>a03237.html</anchorfile>
      <anchor>a0d05a19404323aea84d5d692f9b6fa21</anchor>
      <arglist>(Arc a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a03237.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserveNode</name>
      <anchorfile>a03237.html</anchorfile>
      <anchor>a28bb4df827e678ae549849be81d88def</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserveArc</name>
      <anchorfile>a03237.html</anchorfile>
      <anchor>a2489cbecb9d7ff5c9a0b2b5ee46818b5</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ListDigraph</name>
      <anchorfile>a03237.html</anchorfile>
      <anchor>ad28967a7a041da94e00e954c4e6861e6</anchor>
      <arglist>(const ListDigraph &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a03237.html</anchorfile>
      <anchor>a85a3026571948df8a0247aa2ce972411</anchor>
      <arglist>(const ListDigraph &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ListEdgeSet</name>
    <filename>a02481.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ListEdgeSet</name>
      <anchorfile>a02481.html</anchorfile>
      <anchor>adda52643f52a89c07675d8f223574921</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>Edge</type>
      <name>addEdge</name>
      <anchorfile>a02481.html</anchorfile>
      <anchor>a6192e97afb39b9e2ec4babc88a8aca5f</anchor>
      <arglist>(const Node &amp;u, const Node &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a02481.html</anchorfile>
      <anchor>accff03c7f445a919e57d4ca8e1b2199f</anchor>
      <arglist>(const Edge &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ListGraph</name>
    <filename>a03277.html</filename>
    <class kind="class">lemon::ListGraph::Snapshot</class>
    <member kind="function">
      <type></type>
      <name>ListGraph</name>
      <anchorfile>a03277.html</anchorfile>
      <anchor>abdab59515ed6ddd23a01d8e20f6d916c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>addNode</name>
      <anchorfile>a03277.html</anchorfile>
      <anchor>a96838566b12a6b04795db38688bad1a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Edge</type>
      <name>addEdge</name>
      <anchorfile>a03277.html</anchorfile>
      <anchor>a1aa949747a3805ff966fd9adda94c380</anchor>
      <arglist>(Node u, Node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a03277.html</anchorfile>
      <anchor>a74e3b0d27f7587faa2d169a0856ff817</anchor>
      <arglist>(Node n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a03277.html</anchorfile>
      <anchor>af311a569a7d86c03db49c5e1fe62e7a4</anchor>
      <arglist>(Edge e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a03277.html</anchorfile>
      <anchor>a0175ae42450fd7acfd496967556d4503</anchor>
      <arglist>(Node n) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a03277.html</anchorfile>
      <anchor>a5d89bc9b43f4328c423b3f0c29558e55</anchor>
      <arglist>(Edge e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a03277.html</anchorfile>
      <anchor>ae066aa5f9c819ff677d498b096182aed</anchor>
      <arglist>(Arc a) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeU</name>
      <anchorfile>a03277.html</anchorfile>
      <anchor>a38960b4669bd9a87af8f846c21806c00</anchor>
      <arglist>(Edge e, Node n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeV</name>
      <anchorfile>a03277.html</anchorfile>
      <anchor>a9d5b624a9147ffc63eb9da04fd1a9175</anchor>
      <arglist>(Edge e, Node n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>contract</name>
      <anchorfile>a03277.html</anchorfile>
      <anchor>a0eafaa9830d42f199765879062d495da</anchor>
      <arglist>(Node a, Node b, bool r=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a03277.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserveNode</name>
      <anchorfile>a03277.html</anchorfile>
      <anchor>a28bb4df827e678ae549849be81d88def</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserveEdge</name>
      <anchorfile>a03277.html</anchorfile>
      <anchor>a0337d8e0a11c8d4d22de6265b526df1e</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ListGraph</name>
      <anchorfile>a03277.html</anchorfile>
      <anchor>a62812b9a8c8bedabc1aeec208cf20d46</anchor>
      <arglist>(const ListGraph &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a03277.html</anchorfile>
      <anchor>a43d393a97d113d3aa0322292047674bc</anchor>
      <arglist>(const ListGraph &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ListPath</name>
    <filename>a03949.html</filename>
    <templarg></templarg>
    <class kind="class">lemon::ListPath::ArcIt</class>
    <member kind="function">
      <type></type>
      <name>ListPath</name>
      <anchorfile>a03949.html</anchorfile>
      <anchor>afb2e858c85748c945eb07160709a2085</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListPath</name>
      <anchorfile>a03949.html</anchorfile>
      <anchor>af2bb4163925699ade87dabef0951c76e</anchor>
      <arglist>(const ListPath &amp;cpath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListPath</name>
      <anchorfile>a03949.html</anchorfile>
      <anchor>ac891c40efd6d87972c4e10d58dabb013</anchor>
      <arglist>(const CPath &amp;cpath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ListPath</name>
      <anchorfile>a03949.html</anchorfile>
      <anchor>abcdd5fb0921608bca68617f2347759c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ListPath &amp;</type>
      <name>operator=</name>
      <anchorfile>a03949.html</anchorfile>
      <anchor>abf347e4e24a10550827c71b991d15237</anchor>
      <arglist>(const ListPath &amp;cpath)</arglist>
    </member>
    <member kind="function">
      <type>ListPath &amp;</type>
      <name>operator=</name>
      <anchorfile>a03949.html</anchorfile>
      <anchor>a03cb950ab2f49c03285de3f07ba0aaf6</anchor>
      <arglist>(const CPath &amp;cpath)</arglist>
    </member>
    <member kind="function">
      <type>const Arc &amp;</type>
      <name>nth</name>
      <anchorfile>a03949.html</anchorfile>
      <anchor>afc37a5f2af03aa246ccfb006e7ab9d48</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>ArcIt</type>
      <name>nthIt</name>
      <anchorfile>a03949.html</anchorfile>
      <anchor>a7a7c490cf0513671eac500a9c3db6d7b</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a03949.html</anchorfile>
      <anchor>a91213974fa3ac3959b1c355a9e588f8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a03949.html</anchorfile>
      <anchor>a644718bb2fb240de962dc3c9a1fdf0dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a03949.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Arc &amp;</type>
      <name>front</name>
      <anchorfile>a03949.html</anchorfile>
      <anchor>a285e23e52adb15740e888caaf60f5497</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFront</name>
      <anchorfile>a03949.html</anchorfile>
      <anchor>a3c4a7c086d4884b898681043173b2152</anchor>
      <arglist>(const Arc &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseFront</name>
      <anchorfile>a03949.html</anchorfile>
      <anchor>a320672c73f9043f74530d5b2e65d5f6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Arc &amp;</type>
      <name>back</name>
      <anchorfile>a03949.html</anchorfile>
      <anchor>a6e80101a14ddf5a057be550605cf675b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBack</name>
      <anchorfile>a03949.html</anchorfile>
      <anchor>a7de8be578587027ac5fda4e89a016f4d</anchor>
      <arglist>(const Arc &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseBack</name>
      <anchorfile>a03949.html</anchorfile>
      <anchor>a8a5e7d5f5c01f29344ec6d80d3a38e4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spliceBack</name>
      <anchorfile>a03949.html</anchorfile>
      <anchor>a8681523079be0663aa35658c6047069e</anchor>
      <arglist>(ListPath &amp;tpath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spliceFront</name>
      <anchorfile>a03949.html</anchorfile>
      <anchor>a2509b0749adb05475436e999f02604c2</anchor>
      <arglist>(ListPath &amp;tpath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splice</name>
      <anchorfile>a03949.html</anchorfile>
      <anchor>a8e76221f3637b0f805fd2096334b228d</anchor>
      <arglist>(ArcIt it, ListPath &amp;tpath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>a03949.html</anchorfile>
      <anchor>ac2b6f1c082fbba008bcb01d02b841dfd</anchor>
      <arglist>(ArcIt it, ListPath &amp;tpath)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::LoggerBoolMap</name>
    <filename>a03565.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>MapBase&lt; KEY, bool &gt;</base>
    <member kind="typedef">
      <type>KEY</type>
      <name>Key</name>
      <anchorfile>a03565.html</anchorfile>
      <anchor>a815df26dac2d60318c7a52fe953a5393</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>Value</name>
      <anchorfile>a03565.html</anchorfile>
      <anchor>aaf2b2f1e7bba19591a125e352c5d7bda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IT</type>
      <name>Iterator</name>
      <anchorfile>a03565.html</anchorfile>
      <anchor>a504647bc0d34a0cb950f3a7ed5b09e96</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LoggerBoolMap</name>
      <anchorfile>a03565.html</anchorfile>
      <anchor>abd96d3b6eafdabd483815279dd66ade6</anchor>
      <arglist>(Iterator it)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a03565.html</anchorfile>
      <anchor>a09dd208593b9721a30a83ed978ede577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a03565.html</anchorfile>
      <anchor>a62469461ed7c932afba3808f4da0fe3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03565.html</anchorfile>
      <anchor>afe66b402603ec089dc4f592643678634</anchor>
      <arglist>(const Key &amp;key, Value value)</arglist>
    </member>
    <member kind="function">
      <type>LoggerBoolMap&lt; Iterator &gt;</type>
      <name>loggerBoolMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>ga9911949acec69b07b642c082c65d810c</anchor>
      <arglist>(Iterator it)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::LpBase</name>
    <filename>a03341.html</filename>
    <member kind="function">
      <type>Col</type>
      <name>addCol</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ace2f580cd6308e948d9691a01845c8ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addColSet</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a90ad8883f2bc8f96fa265be4ee9f9eaf</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>col</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a41f5b9e3a8f92ce2560a62f3e8b0250f</anchor>
      <arglist>(Col c, const DualExpr &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>DualExpr</type>
      <name>col</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a2c6a8d10e2c724bf496b0bf5fbf405d2</anchor>
      <arglist>(Col c) const</arglist>
    </member>
    <member kind="function">
      <type>Col</type>
      <name>addCol</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a7ddfc3691600833b1bd53da9dc71799a</anchor>
      <arglist>(const DualExpr &amp;e, Value o=0)</arglist>
    </member>
    <member kind="function">
      <type>Row</type>
      <name>addRow</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a82ce0d31c840a4b11ad5462c0a5a3fc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addRowSet</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ab872a5aad82a45c9ba3a7d5ae7c75ce1</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ae099f58d682ae7ddebae4a80975af7ab</anchor>
      <arglist>(Row r, Value l, const Expr &amp;e, Value u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a6ae967113c39dad59bc508701671b537</anchor>
      <arglist>(Row r, const Constr &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>Expr</type>
      <name>row</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>af5b59a18d2d0be273833629cd4fc8146</anchor>
      <arglist>(Row r) const</arglist>
    </member>
    <member kind="function">
      <type>Row</type>
      <name>addRow</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ac979aa7dc6bb67dd2784ed61d469e122</anchor>
      <arglist>(Value l, const Expr &amp;e, Value u)</arglist>
    </member>
    <member kind="function">
      <type>Row</type>
      <name>addRow</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a551823fd575a523630b53488d840325b</anchor>
      <arglist>(const Constr &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ab50b2fcd86d231d5aed7228e4b732572</anchor>
      <arglist>(Col c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a8a5daa2d397c5c1b585711641871971c</anchor>
      <arglist>(Row r)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>colName</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a2735d361ec18e5828ab4cb810107c4cc</anchor>
      <arglist>(Col c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colName</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a926a85f6e1fc4ef4dc9d82dfdf41a954</anchor>
      <arglist>(Col c, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Col</type>
      <name>colByName</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ae0b51b107f2c954ca55c9f273663d96e</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>rowName</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ae6b9eb4004710fb9b2d44ec59915b951</anchor>
      <arglist>(Row r) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rowName</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ae0c806c54bb198a105afec8557ccc41b</anchor>
      <arglist>(Row r, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Row</type>
      <name>rowByName</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>af2245cc8a28a2435de3e0a1c4e4a92da</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coeff</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a14e7239a59a1d17bf01f53fe3b89e6f8</anchor>
      <arglist>(Row r, Col c, Value val)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>coeff</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>af9968ef870b2ddf0606c6740110c82d1</anchor>
      <arglist>(Row r, Col c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colLowerBound</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>acbea661131fafe99de521c22af326c39</anchor>
      <arglist>(Col c, Value value)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>colLowerBound</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ae40e666e536fd204d9e7ce6024d47118</anchor>
      <arglist>(Col c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colLowerBound</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ab3ff2ff3a2adca6d32223d6c1e261995</anchor>
      <arglist>(T &amp;t, Value value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colUpperBound</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a92dc2b50e43b8238917b037b687e66fe</anchor>
      <arglist>(Col c, Value value)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>colUpperBound</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a074e04665c9426e170b660e36e8b5688</anchor>
      <arglist>(Col c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colUpperBound</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ac9d106d2a1abf6ecf29142cbfe9d89e5</anchor>
      <arglist>(T &amp;t, Value value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colBounds</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a6d4a12e3ebf7ac7bcb4d35a3f18b5422</anchor>
      <arglist>(Col c, Value lower, Value upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colBounds</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ac8e452cab21de73fc1a0e51e614e5783</anchor>
      <arglist>(T &amp;t, Value lower, Value upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rowLowerBound</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a5e454afcea273dccc19a793e9a95aecc</anchor>
      <arglist>(Row r, Value value)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>rowLowerBound</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>aa81a774cf982ede3a14e46b6f55b3d3d</anchor>
      <arglist>(Row r) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rowUpperBound</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a41e9d2136a9983180a57390d56f449f5</anchor>
      <arglist>(Row r, Value value)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>rowUpperBound</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a789380d434b95e5dc3a05eb2dd2c9979</anchor>
      <arglist>(Row r) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>objCoeff</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ae7188a8596024077d2a6e37968c49686</anchor>
      <arglist>(Col c, Value v)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>objCoeff</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>aff9ec2ffe0d3633ee819cc1ff1e9d32e</anchor>
      <arglist>(Col c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>obj</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>af2ad43b3dd09721bff1f5bdc40cf7146</anchor>
      <arglist>(const Expr &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>Expr</type>
      <name>obj</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a3b52a43842cdf5b51934b157add93539</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sense</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ae3674508394adc61d4f307fcecae2d70</anchor>
      <arglist>(Sense sense)</arglist>
    </member>
    <member kind="function">
      <type>Sense</type>
      <name>sense</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>acffdd9805cf726813b447f3a63230f89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>max</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a6a360455761dfb54fa2567a5c2e46b70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>min</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a0ea60e842310906e02cac7ba70cfb591</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>messageLevel</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>abcb84b14cad394ce094af144f3508d89</anchor>
      <arglist>(MessageLevel level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a01fb09b584b86088a044612f90401291</anchor>
      <arglist>(std::string file, std::string format=&quot;MPS&quot;) const</arglist>
    </member>
    <class kind="class">lemon::LpBase::Col</class>
    <class kind="class">lemon::LpBase::ColIt</class>
    <class kind="class">lemon::LpBase::Constr</class>
    <class kind="class">lemon::LpBase::DualExpr</class>
    <class kind="class">lemon::LpBase::Expr</class>
    <class kind="class">lemon::LpBase::Row</class>
    <class kind="class">lemon::LpBase::RowIt</class>
    <class kind="class">lemon::LpBase::UnsupportedFormatError</class>
    <member kind="enumeration">
      <type></type>
      <name>SolveExitStatus</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a4a5e4b34b14952c4c826e3a859028e31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOLVED</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a4a5e4b34b14952c4c826e3a859028e31a0a5e81bed8da1cf85236aa6eb7569818</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNSOLVED</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a4a5e4b34b14952c4c826e3a859028e31a38e4b0838cfb137a637dcf0f5217b694</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Sense</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ac56a6b1edba1f6deaff6fae135e6fd9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIN</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ac56a6b1edba1f6deaff6fae135e6fd9ea957e8250f68e7b5677b22397c2c1b51e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ac56a6b1edba1f6deaff6fae135e6fd9ead7e097bda6d981de2520f49fe74c25b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MessageLevel</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>aaf5eea9687ad679dc3e504d373e959dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_NOTHING</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>aaf5eea9687ad679dc3e504d373e959dcae7a3f9c19e1a769bc42013b29b931336</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_ERROR</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>aaf5eea9687ad679dc3e504d373e959dcaeed68e2821e40e5751af74e449ba1fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_WARNING</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>aaf5eea9687ad679dc3e504d373e959dcaa0da5a01a18f78c0f248941ad32cc816</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_NORMAL</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>aaf5eea9687ad679dc3e504d373e959dca3b0309750c8c5bf0ad071cf382f10c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_VERBOSE</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>aaf5eea9687ad679dc3e504d373e959dca0c984e9c0f0f8aeb2ff46a546ce18d56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Value</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a566a00621638570a4186414035153a2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOLVED</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a4a5e4b34b14952c4c826e3a859028e31a0a5e81bed8da1cf85236aa6eb7569818</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNSOLVED</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a4a5e4b34b14952c4c826e3a859028e31a38e4b0838cfb137a637dcf0f5217b694</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIN</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ac56a6b1edba1f6deaff6fae135e6fd9ea957e8250f68e7b5677b22397c2c1b51e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ac56a6b1edba1f6deaff6fae135e6fd9ead7e097bda6d981de2520f49fe74c25b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_NOTHING</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>aaf5eea9687ad679dc3e504d373e959dcae7a3f9c19e1a769bc42013b29b931336</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_ERROR</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>aaf5eea9687ad679dc3e504d373e959dcaeed68e2821e40e5751af74e449ba1fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_WARNING</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>aaf5eea9687ad679dc3e504d373e959dcaa0da5a01a18f78c0f248941ad32cc816</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_NORMAL</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>aaf5eea9687ad679dc3e504d373e959dca3b0309750c8c5bf0ad071cf382f10c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_VERBOSE</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>aaf5eea9687ad679dc3e504d373e959dca0c984e9c0f0f8aeb2ff46a546ce18d56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LpBase</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a26ecf0974cd1cab0ed58ae67ff295429</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>solverName</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ac3c5837e37726f82c0893d5f9e580c80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Col</type>
      <name>addCol</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ace2f580cd6308e948d9691a01845c8ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addColSet</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a90ad8883f2bc8f96fa265be4ee9f9eaf</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>col</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a41f5b9e3a8f92ce2560a62f3e8b0250f</anchor>
      <arglist>(Col c, const DualExpr &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>DualExpr</type>
      <name>col</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a2c6a8d10e2c724bf496b0bf5fbf405d2</anchor>
      <arglist>(Col c) const</arglist>
    </member>
    <member kind="function">
      <type>Col</type>
      <name>addCol</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a7ddfc3691600833b1bd53da9dc71799a</anchor>
      <arglist>(const DualExpr &amp;e, Value o=0)</arglist>
    </member>
    <member kind="function">
      <type>Row</type>
      <name>addRow</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a82ce0d31c840a4b11ad5462c0a5a3fc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addRowSet</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ab872a5aad82a45c9ba3a7d5ae7c75ce1</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ae099f58d682ae7ddebae4a80975af7ab</anchor>
      <arglist>(Row r, Value l, const Expr &amp;e, Value u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a6ae967113c39dad59bc508701671b537</anchor>
      <arglist>(Row r, const Constr &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>Expr</type>
      <name>row</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>af5b59a18d2d0be273833629cd4fc8146</anchor>
      <arglist>(Row r) const</arglist>
    </member>
    <member kind="function">
      <type>Row</type>
      <name>addRow</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ac979aa7dc6bb67dd2784ed61d469e122</anchor>
      <arglist>(Value l, const Expr &amp;e, Value u)</arglist>
    </member>
    <member kind="function">
      <type>Row</type>
      <name>addRow</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a551823fd575a523630b53488d840325b</anchor>
      <arglist>(const Constr &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ab50b2fcd86d231d5aed7228e4b732572</anchor>
      <arglist>(Col c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a8a5daa2d397c5c1b585711641871971c</anchor>
      <arglist>(Row r)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>colName</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a2735d361ec18e5828ab4cb810107c4cc</anchor>
      <arglist>(Col c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colName</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a926a85f6e1fc4ef4dc9d82dfdf41a954</anchor>
      <arglist>(Col c, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Col</type>
      <name>colByName</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ae0b51b107f2c954ca55c9f273663d96e</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>rowName</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ae6b9eb4004710fb9b2d44ec59915b951</anchor>
      <arglist>(Row r) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rowName</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ae0c806c54bb198a105afec8557ccc41b</anchor>
      <arglist>(Row r, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Row</type>
      <name>rowByName</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>af2245cc8a28a2435de3e0a1c4e4a92da</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coeff</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a14e7239a59a1d17bf01f53fe3b89e6f8</anchor>
      <arglist>(Row r, Col c, Value val)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>coeff</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>af9968ef870b2ddf0606c6740110c82d1</anchor>
      <arglist>(Row r, Col c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colLowerBound</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>acbea661131fafe99de521c22af326c39</anchor>
      <arglist>(Col c, Value value)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>colLowerBound</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ae40e666e536fd204d9e7ce6024d47118</anchor>
      <arglist>(Col c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colLowerBound</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ab3ff2ff3a2adca6d32223d6c1e261995</anchor>
      <arglist>(T &amp;t, Value value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colUpperBound</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a92dc2b50e43b8238917b037b687e66fe</anchor>
      <arglist>(Col c, Value value)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>colUpperBound</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a074e04665c9426e170b660e36e8b5688</anchor>
      <arglist>(Col c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colUpperBound</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ac9d106d2a1abf6ecf29142cbfe9d89e5</anchor>
      <arglist>(T &amp;t, Value value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colBounds</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a6d4a12e3ebf7ac7bcb4d35a3f18b5422</anchor>
      <arglist>(Col c, Value lower, Value upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colBounds</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ac8e452cab21de73fc1a0e51e614e5783</anchor>
      <arglist>(T &amp;t, Value lower, Value upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rowLowerBound</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a5e454afcea273dccc19a793e9a95aecc</anchor>
      <arglist>(Row r, Value value)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>rowLowerBound</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>aa81a774cf982ede3a14e46b6f55b3d3d</anchor>
      <arglist>(Row r) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rowUpperBound</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a41e9d2136a9983180a57390d56f449f5</anchor>
      <arglist>(Row r, Value value)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>rowUpperBound</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a789380d434b95e5dc3a05eb2dd2c9979</anchor>
      <arglist>(Row r) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>objCoeff</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ae7188a8596024077d2a6e37968c49686</anchor>
      <arglist>(Col c, Value v)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>objCoeff</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>aff9ec2ffe0d3633ee819cc1ff1e9d32e</anchor>
      <arglist>(Col c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>obj</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>af2ad43b3dd09721bff1f5bdc40cf7146</anchor>
      <arglist>(const Expr &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>Expr</type>
      <name>obj</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a3b52a43842cdf5b51934b157add93539</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sense</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ae3674508394adc61d4f307fcecae2d70</anchor>
      <arglist>(Sense sense)</arglist>
    </member>
    <member kind="function">
      <type>Sense</type>
      <name>sense</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>acffdd9805cf726813b447f3a63230f89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>max</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a6a360455761dfb54fa2567a5c2e46b70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>min</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a0ea60e842310906e02cac7ba70cfb591</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>messageLevel</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>abcb84b14cad394ce094af144f3508d89</anchor>
      <arglist>(MessageLevel level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a01fb09b584b86088a044612f90401291</anchor>
      <arglist>(std::string file, std::string format=&quot;MPS&quot;) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>id</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>af34daa7955b659dc2ab4ee97db331c41</anchor>
      <arglist>(const Col &amp;col)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Col</type>
      <name>colFromId</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>aaccb11eb6305e70717547653560fc7bd</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>id</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a9d1b0b46568a37601e77e137e281b526</anchor>
      <arglist>(const Row &amp;row)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Row</type>
      <name>rowFromId</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a77816a8220e3071b1c6f633ec2d528e5</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>INF</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>aae6d881c548a17a1a9e6aa13e3f2c397</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Value</type>
      <name>NaN</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a7c8e1716b1e4ce72db4eb41902a0cf2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::LpSkeleton</name>
    <filename>a03417.html</filename>
    <base>lemon::LpSolver</base>
    <base>lemon::SkeletonSolverBase</base>
    <member kind="function">
      <type></type>
      <name>LpSkeleton</name>
      <anchorfile>a03417.html</anchorfile>
      <anchor>aac6b7af1622599f20a58aaa053c7b6b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LpSkeleton *</type>
      <name>newSolver</name>
      <anchorfile>a03417.html</anchorfile>
      <anchor>a3e9aef59182b540b41eb4606dff7d536</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LpSkeleton *</type>
      <name>cloneSolver</name>
      <anchorfile>a03417.html</anchorfile>
      <anchor>aed2863dcf75482b7f021d27729908261</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SolveExitStatus</type>
      <name>_solve</name>
      <anchorfile>a03417.html</anchorfile>
      <anchor>afb62ef2dec9579d5a2b4ebb5e482e3bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Value</type>
      <name>_getPrimal</name>
      <anchorfile>a03417.html</anchorfile>
      <anchor>aa8b52d4be3ecde8a15cf60c9301d7324</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Value</type>
      <name>_getDual</name>
      <anchorfile>a03417.html</anchorfile>
      <anchor>a145b7645b99f391d0494413450560f22</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Value</type>
      <name>_getPrimalValue</name>
      <anchorfile>a03417.html</anchorfile>
      <anchor>afe87456c1b168319bac9dfe45b367877</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Value</type>
      <name>_getPrimalRay</name>
      <anchorfile>a03417.html</anchorfile>
      <anchor>a2870a499b83c707260b90f14812712f7</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Value</type>
      <name>_getDualRay</name>
      <anchorfile>a03417.html</anchorfile>
      <anchor>aeb8786b563e65ef1ec767fb334b7b078</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ProblemType</type>
      <name>_getPrimalType</name>
      <anchorfile>a03417.html</anchorfile>
      <anchor>a5cc773f4c0fbad57cf9e9bd2ed5e0820</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ProblemType</type>
      <name>_getDualType</name>
      <anchorfile>a03417.html</anchorfile>
      <anchor>ae0c48dbe011cc22d5284af5e2feca1dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual VarStatus</type>
      <name>_getColStatus</name>
      <anchorfile>a03417.html</anchorfile>
      <anchor>af67436b04957ed73112efb9fd28b163a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual VarStatus</type>
      <name>_getRowStatus</name>
      <anchorfile>a03417.html</anchorfile>
      <anchor>a953503023c58b18c67d4a1da43971413</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_solverName</name>
      <anchorfile>a03417.html</anchorfile>
      <anchor>adc90ed40485b9a06dcfc7e01ca6a0e60</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::LpSolver</name>
    <filename>a03405.html</filename>
    <base virtualness="virtual">lemon::LpBase</base>
    <member kind="function">
      <type>SolveExitStatus</type>
      <name>solve</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a1963be740c5f32bb76dfc9df4c2de376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ProblemType</type>
      <name>primalType</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a8de26aa5a672bfdaa7dbc8be07a10c7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ProblemType</type>
      <name>dualType</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a645f697bdeebe1ed7439343112a36b31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>primal</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a9ae7e1617e920a8bc135f114422c2693</anchor>
      <arglist>(Col c) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>primal</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a45df8970ca1332daa33a6b6782411ac6</anchor>
      <arglist>(const Expr &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>primalRay</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a6650077e1f11340583dc1cc0068bb8c6</anchor>
      <arglist>(Col c) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dual</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a241916a4e7946ca6f6bf812fe8fd682b</anchor>
      <arglist>(Row r) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dual</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>ac347312c5565296b76926c2e5094ef75</anchor>
      <arglist>(const DualExpr &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dualRay</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>aef8691f43655fb0f7394ed65118ad9a2</anchor>
      <arglist>(Row r) const</arglist>
    </member>
    <member kind="function">
      <type>VarStatus</type>
      <name>colStatus</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a72e334b401535af5716766c50d113fa0</anchor>
      <arglist>(Col c) const</arglist>
    </member>
    <member kind="function">
      <type>VarStatus</type>
      <name>rowStatus</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a196435106d034977e8ab26fb8f8b1024</anchor>
      <arglist>(Row r) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>primal</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a15baf6a681d441007b41333d935c7654</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ProblemType</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNDEFINED</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea605159e8a4c32319fd69b5d151369d93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2884fa43446c0cbc9c7a9b74d41d7483</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEASIBLE</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea03f919221217f95d21a593a7120165e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2579881e7c83261bc21bafb5a5c92cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBOUNDED</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea6c65123d1b5b01632a477661055b01ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VarStatus</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a86b9012e22aaac73c64bb7247dcb44c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BASIC</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a86b9012e22aaac73c64bb7247dcb44c5a13c45196813cb44e6e81e9c48a5ec1b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FREE</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a86b9012e22aaac73c64bb7247dcb44c5acc62d1576546f3245237e1b232d838b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOWER</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a86b9012e22aaac73c64bb7247dcb44c5aa1017e9b343135a54a98b6f479354d16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPPER</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a86b9012e22aaac73c64bb7247dcb44c5ae704d5d328a8522a6193aa3efb28c724</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FIXED</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a86b9012e22aaac73c64bb7247dcb44c5a9b5eccb7f8f027c46f2018d07c74f384</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNDEFINED</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea605159e8a4c32319fd69b5d151369d93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2884fa43446c0cbc9c7a9b74d41d7483</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEASIBLE</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea03f919221217f95d21a593a7120165e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2579881e7c83261bc21bafb5a5c92cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBOUNDED</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea6c65123d1b5b01632a477661055b01ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BASIC</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a86b9012e22aaac73c64bb7247dcb44c5a13c45196813cb44e6e81e9c48a5ec1b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FREE</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a86b9012e22aaac73c64bb7247dcb44c5acc62d1576546f3245237e1b232d838b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOWER</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a86b9012e22aaac73c64bb7247dcb44c5aa1017e9b343135a54a98b6f479354d16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPPER</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a86b9012e22aaac73c64bb7247dcb44c5ae704d5d328a8522a6193aa3efb28c724</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FIXED</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a86b9012e22aaac73c64bb7247dcb44c5a9b5eccb7f8f027c46f2018d07c74f384</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LpSolver *</type>
      <name>newSolver</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a96ce83198455cdbef6be4e5b4b16eaca</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LpSolver *</type>
      <name>cloneSolver</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a7bd26c359e95549b3ab91a4abde8973e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>SolveExitStatus</type>
      <name>solve</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a1963be740c5f32bb76dfc9df4c2de376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ProblemType</type>
      <name>primalType</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a8de26aa5a672bfdaa7dbc8be07a10c7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ProblemType</type>
      <name>dualType</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a645f697bdeebe1ed7439343112a36b31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>primal</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a9ae7e1617e920a8bc135f114422c2693</anchor>
      <arglist>(Col c) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>primal</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a45df8970ca1332daa33a6b6782411ac6</anchor>
      <arglist>(const Expr &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>primalRay</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a6650077e1f11340583dc1cc0068bb8c6</anchor>
      <arglist>(Col c) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dual</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a241916a4e7946ca6f6bf812fe8fd682b</anchor>
      <arglist>(Row r) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dual</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>ac347312c5565296b76926c2e5094ef75</anchor>
      <arglist>(const DualExpr &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dualRay</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>aef8691f43655fb0f7394ed65118ad9a2</anchor>
      <arglist>(Row r) const</arglist>
    </member>
    <member kind="function">
      <type>VarStatus</type>
      <name>colStatus</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a72e334b401535af5716766c50d113fa0</anchor>
      <arglist>(Col c) const</arglist>
    </member>
    <member kind="function">
      <type>VarStatus</type>
      <name>rowStatus</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a196435106d034977e8ab26fb8f8b1024</anchor>
      <arglist>(Row r) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>primal</name>
      <anchorfile>a03405.html</anchorfile>
      <anchor>a15baf6a681d441007b41333d935c7654</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::MapBase</name>
    <filename>a03425.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; GR::Edge, Const&lt; bool, true &gt; &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>GR::Edge</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Const&lt; bool, true &gt;</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; int, BlossomData &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BlossomData</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; int, Color &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Color</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; int, NodeData &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NodeData</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; int, V &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; K, bool &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; K, int &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; KEY, bool &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>KEY</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; M1::Key, bool &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>M1::Key</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; M1::Key, M1::Value &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>M1::Key</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M1::Value</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; M1::Key, typename F::result_type &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>M1::Key</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename F::result_type</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; M2::Key, M1::Value &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>M2::Key</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M1::Value</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; M::Key, bool &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>M::Key</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; M::Key, M::Value &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>M::Key</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M::Value</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; M::Key, V &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>M::Key</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; T, T &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>T</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; typename DGR::Node, Const&lt; bool, true &gt; &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>typename DGR::Node</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Const&lt; bool, true &gt;</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; typename Digraph::Arc, Const&lt; bool, true &gt; &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>typename Digraph::Arc</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Const&lt; bool, true &gt;</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; typename F::argument_type, typename F::result_type &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>typename F::argument_type</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename F::result_type</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; typename GR::Edge, Const&lt; bool, true &gt; &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>typename GR::Edge</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Const&lt; bool, true &gt;</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; typename GR::Node, Const&lt; bool, true &gt; &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>typename GR::Node</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Const&lt; bool, true &gt;</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; typename Graph::Arc, double &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>typename Graph::Arc</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; typename Graph::Arc, lemon::Color &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>typename Graph::Arc</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lemon::Color</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; typename Graph::Node, bool &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>typename Graph::Node</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; typename Graph::Node, dim2::Point&lt; double &gt; &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>typename Graph::Node</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dim2::Point&lt; double &gt;</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; typename Graph::Node, double &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>typename Graph::Node</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; typename Graph::Node, int &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>typename Graph::Node</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; typename Graph::Node, lemon::Color &gt;</name>
    <filename>a03425.html</filename>
    <member kind="typedef">
      <type>typename Graph::Node</type>
      <name>Key</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lemon::Color</type>
      <name>Value</name>
      <anchorfile>a03425.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::MappableBpGraphComponent</name>
    <filename>a05453.html</filename>
    <templarg></templarg>
    <base>MappableGraphComponent&lt; BaseBpGraphComponent &gt;</base>
    <class kind="class">lemon::concepts::MappableBpGraphComponent::BlueNodeMap</class>
    <class kind="class">lemon::concepts::MappableBpGraphComponent::RedNodeMap</class>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::MappableDigraphComponent</name>
    <filename>a05417.html</filename>
    <templarg></templarg>
    <base>lemon::concepts::BaseDigraphComponent</base>
    <class kind="class">lemon::concepts::MappableDigraphComponent::ArcMap</class>
    <class kind="class">lemon::concepts::MappableDigraphComponent::NodeMap</class>
  </compound>
  <compound kind="class">
    <name>MappableDigraphComponent&lt; BaseBpGraphComponent &gt;</name>
    <filename>a05417.html</filename>
    <base>lemon::concepts::BaseBpGraphComponent</base>
  </compound>
  <compound kind="class">
    <name>MappableDigraphComponent&lt; BaseGraphComponent &gt;</name>
    <filename>a05417.html</filename>
    <base>lemon::concepts::BaseGraphComponent</base>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::MappableGraphComponent</name>
    <filename>a05437.html</filename>
    <templarg></templarg>
    <base>MappableDigraphComponent&lt; BaseGraphComponent &gt;</base>
    <class kind="class">lemon::concepts::MappableGraphComponent::EdgeMap</class>
  </compound>
  <compound kind="class">
    <name>MappableGraphComponent&lt; BaseBpGraphComponent &gt;</name>
    <filename>a05437.html</filename>
    <base>MappableDigraphComponent&lt; BaseBpGraphComponent &gt;</base>
  </compound>
  <compound kind="class">
    <name>lemon::MapToFunctor</name>
    <filename>a03469.html</filename>
    <templarg></templarg>
    <base>MapBase&lt; M::Key, M::Value &gt;</base>
    <member kind="typedef">
      <type>M::Key</type>
      <name>Key</name>
      <anchorfile>a03469.html</anchorfile>
      <anchor>a8c5e944591efa8f8f0d64cf81950abcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M::Value</type>
      <name>Value</name>
      <anchorfile>a03469.html</anchorfile>
      <anchor>a7054917e50868b3b4c3d0899fc4b422e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MapToFunctor</name>
      <anchorfile>a03469.html</anchorfile>
      <anchor>a33bd2b0fdb3a620641e9f9870b418107</anchor>
      <arglist>(const M &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>a03469.html</anchorfile>
      <anchor>a229f5877c7cfa3e0bf1b939bef7f60f6</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03469.html</anchorfile>
      <anchor>a8de1b13f44fab45faa8daa93027f9df2</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>MapToFunctor&lt; M &gt;</type>
      <name>mapToFunctor</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga0a68bad2e29c1486f3cc8d7a0cf056e1</anchor>
      <arglist>(const M &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::MaxCardinalitySearch</name>
    <filename>a03757.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a2182689d44252eb7533da9b0ae81ca84</anchor>
      <arglist>(Node source, Value capacity=0)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>abaa8ea92cf97ed0b91d950c61e0501b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a6101e41073be73e37cf551accf3a3b3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>emptySize</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a87572b2015161507dda390a14158f630</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ac63ebb11ff26c825dc40bed7d909b5fb</anchor>
      <arglist>(Node dest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a26cb87dd67f1b37bbdb2424688311023</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>cardinality</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ae11005bacf44368f126b50b4255eaf08</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentCardinality</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>af28ac28e6f349b52df33c4d6f58010dc</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>const CardinalityMap &amp;</type>
      <name>cardinalityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>af9ca06302a9c9ff272f171d5dd8b7d4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a89bf6f37a5765b5bf7f8146d6c143bee</anchor>
      <arglist>(Node v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a241bb560d61f0d4979f98b4eca119282</anchor>
      <arglist>(Node v)</arglist>
    </member>
    <class kind="struct">lemon::MaxCardinalitySearch::SetCapacityMap</class>
    <class kind="struct">lemon::MaxCardinalitySearch::SetCardinalityMap</class>
    <class kind="struct">lemon::MaxCardinalitySearch::SetHeap</class>
    <class kind="struct">lemon::MaxCardinalitySearch::SetProcessedMap</class>
    <class kind="struct">lemon::MaxCardinalitySearch::SetStandardHeap</class>
    <member kind="typedef">
      <type>Traits::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>aa6928feef02be4f2a184775d19dc6373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap::Value</type>
      <name>Value</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>aa6f382be2c1d9a8d3b5810f8395e877c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap</type>
      <name>CapacityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a9eeec06f304c4b0e7ec59d26ea8698a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a9d422a33007beed6fca71b1c37213d7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CardinalityMap</type>
      <name>CardinalityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a1d78c2f9734e01d062d4ba5c86be166b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::HeapCrossRef</type>
      <name>HeapCrossRef</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>acda80d336c67c0b2df5f58ede2b0a02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Heap</type>
      <name>Heap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ab4345a99641e219dc355bbf0efbcb0ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxCardinalitySearch</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a70b096809ad91e593efabdec68b38f6c</anchor>
      <arglist>(const Digraph &amp;digraph, const CapacityMap &amp;capacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxCardinalitySearch</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a84515c8784c566c4ef336d925a3dacae</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MaxCardinalitySearch</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a890dd7896a533e4a38f6a2ac9444dcff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MaxCardinalitySearch &amp;</type>
      <name>capacityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ac069474ee71166a17f3223fc11f1f79e</anchor>
      <arglist>(const CapacityMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const CapacityMap &amp;</type>
      <name>capacityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a4a8dd8379d9750bc33f76b25e7173dfe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MaxCardinalitySearch &amp;</type>
      <name>cardinalityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>aca94d8aef275b61c307167b07c9db378</anchor>
      <arglist>(CardinalityMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>MaxCardinalitySearch &amp;</type>
      <name>processedMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>aeb1f572b5dc93a795f078fb905cf49bc</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const ProcessedMap &amp;</type>
      <name>processedMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>afd38c6bc15b16977a970172d9c54661d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MaxCardinalitySearch &amp;</type>
      <name>heap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>abaad197026467596f8c3c65797794814</anchor>
      <arglist>(Heap &amp;hp, HeapCrossRef &amp;cr)</arglist>
    </member>
    <member kind="function">
      <type>const Heap &amp;</type>
      <name>heap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ad088d6e77f0b0cd5ee3b3e9f2cfdc0f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HeapCrossRef &amp;</type>
      <name>heapCrossRef</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a2bb014b5a2273bd4473c6f9db2204020</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a2182689d44252eb7533da9b0ae81ca84</anchor>
      <arglist>(Node source, Value capacity=0)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>abaa8ea92cf97ed0b91d950c61e0501b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a6101e41073be73e37cf551accf3a3b3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>emptySize</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a87572b2015161507dda390a14158f630</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ac63ebb11ff26c825dc40bed7d909b5fb</anchor>
      <arglist>(Node dest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a26cb87dd67f1b37bbdb2424688311023</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>cardinality</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ae11005bacf44368f126b50b4255eaf08</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentCardinality</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>af28ac28e6f349b52df33c4d6f58010dc</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>const CardinalityMap &amp;</type>
      <name>cardinalityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>af9ca06302a9c9ff272f171d5dd8b7d4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a89bf6f37a5765b5bf7f8146d6c143bee</anchor>
      <arglist>(Node v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a241bb560d61f0d4979f98b4eca119282</anchor>
      <arglist>(Node v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MaxCardinalitySearch&lt; Digraph, CapacityMap, DefCapacityMapTraits&lt; T &gt; &gt;</name>
    <filename>a03757.html</filename>
    <member kind="function">
      <type>const CardinalityMap &amp;</type>
      <name>cardinalityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>af9ca06302a9c9ff272f171d5dd8b7d4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>cardinality</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ae11005bacf44368f126b50b4255eaf08</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentCardinality</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>af28ac28e6f349b52df33c4d6f58010dc</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a89bf6f37a5765b5bf7f8146d6c143bee</anchor>
      <arglist>(Node v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a241bb560d61f0d4979f98b4eca119282</anchor>
      <arglist>(Node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a2182689d44252eb7533da9b0ae81ca84</anchor>
      <arglist>(Node source, Value capacity=0)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>abaa8ea92cf97ed0b91d950c61e0501b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a6101e41073be73e37cf551accf3a3b3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>emptySize</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a87572b2015161507dda390a14158f630</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ac63ebb11ff26c825dc40bed7d909b5fb</anchor>
      <arglist>(Node dest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a26cb87dd67f1b37bbdb2424688311023</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>aa6928feef02be4f2a184775d19dc6373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap::Value</type>
      <name>Value</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>aa6f382be2c1d9a8d3b5810f8395e877c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap</type>
      <name>CapacityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a9eeec06f304c4b0e7ec59d26ea8698a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a9d422a33007beed6fca71b1c37213d7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CardinalityMap</type>
      <name>CardinalityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a1d78c2f9734e01d062d4ba5c86be166b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::HeapCrossRef</type>
      <name>HeapCrossRef</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>acda80d336c67c0b2df5f58ede2b0a02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Heap</type>
      <name>Heap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ab4345a99641e219dc355bbf0efbcb0ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxCardinalitySearch</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a70b096809ad91e593efabdec68b38f6c</anchor>
      <arglist>(const Digraph &amp;digraph, const CapacityMap &amp;capacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxCardinalitySearch</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a84515c8784c566c4ef336d925a3dacae</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MaxCardinalitySearch</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a890dd7896a533e4a38f6a2ac9444dcff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MaxCardinalitySearch &amp;</type>
      <name>capacityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ac069474ee71166a17f3223fc11f1f79e</anchor>
      <arglist>(const CapacityMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const CapacityMap &amp;</type>
      <name>capacityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a4a8dd8379d9750bc33f76b25e7173dfe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MaxCardinalitySearch &amp;</type>
      <name>cardinalityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>aca94d8aef275b61c307167b07c9db378</anchor>
      <arglist>(CardinalityMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>MaxCardinalitySearch &amp;</type>
      <name>processedMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>aeb1f572b5dc93a795f078fb905cf49bc</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const ProcessedMap &amp;</type>
      <name>processedMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>afd38c6bc15b16977a970172d9c54661d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MaxCardinalitySearch &amp;</type>
      <name>heap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>abaad197026467596f8c3c65797794814</anchor>
      <arglist>(Heap &amp;hp, HeapCrossRef &amp;cr)</arglist>
    </member>
    <member kind="function">
      <type>const Heap &amp;</type>
      <name>heap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ad088d6e77f0b0cd5ee3b3e9f2cfdc0f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HeapCrossRef &amp;</type>
      <name>heapCrossRef</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a2bb014b5a2273bd4473c6f9db2204020</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CardinalityMap &amp;</type>
      <name>cardinalityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>af9ca06302a9c9ff272f171d5dd8b7d4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>cardinality</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ae11005bacf44368f126b50b4255eaf08</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentCardinality</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>af28ac28e6f349b52df33c4d6f58010dc</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a89bf6f37a5765b5bf7f8146d6c143bee</anchor>
      <arglist>(Node v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a241bb560d61f0d4979f98b4eca119282</anchor>
      <arglist>(Node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a2182689d44252eb7533da9b0ae81ca84</anchor>
      <arglist>(Node source, Value capacity=0)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>abaa8ea92cf97ed0b91d950c61e0501b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a6101e41073be73e37cf551accf3a3b3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>emptySize</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a87572b2015161507dda390a14158f630</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ac63ebb11ff26c825dc40bed7d909b5fb</anchor>
      <arglist>(Node dest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a26cb87dd67f1b37bbdb2424688311023</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MaxCardinalitySearch&lt; Digraph, CapacityMap, DefCardinalityMapTraits&lt; T &gt; &gt;</name>
    <filename>a03757.html</filename>
    <member kind="function">
      <type>const CardinalityMap &amp;</type>
      <name>cardinalityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>af9ca06302a9c9ff272f171d5dd8b7d4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>cardinality</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ae11005bacf44368f126b50b4255eaf08</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentCardinality</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>af28ac28e6f349b52df33c4d6f58010dc</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a89bf6f37a5765b5bf7f8146d6c143bee</anchor>
      <arglist>(Node v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a241bb560d61f0d4979f98b4eca119282</anchor>
      <arglist>(Node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a2182689d44252eb7533da9b0ae81ca84</anchor>
      <arglist>(Node source, Value capacity=0)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>abaa8ea92cf97ed0b91d950c61e0501b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a6101e41073be73e37cf551accf3a3b3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>emptySize</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a87572b2015161507dda390a14158f630</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ac63ebb11ff26c825dc40bed7d909b5fb</anchor>
      <arglist>(Node dest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a26cb87dd67f1b37bbdb2424688311023</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>aa6928feef02be4f2a184775d19dc6373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap::Value</type>
      <name>Value</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>aa6f382be2c1d9a8d3b5810f8395e877c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap</type>
      <name>CapacityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a9eeec06f304c4b0e7ec59d26ea8698a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a9d422a33007beed6fca71b1c37213d7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CardinalityMap</type>
      <name>CardinalityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a1d78c2f9734e01d062d4ba5c86be166b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::HeapCrossRef</type>
      <name>HeapCrossRef</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>acda80d336c67c0b2df5f58ede2b0a02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Heap</type>
      <name>Heap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ab4345a99641e219dc355bbf0efbcb0ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxCardinalitySearch</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a70b096809ad91e593efabdec68b38f6c</anchor>
      <arglist>(const Digraph &amp;digraph, const CapacityMap &amp;capacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxCardinalitySearch</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a84515c8784c566c4ef336d925a3dacae</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MaxCardinalitySearch</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a890dd7896a533e4a38f6a2ac9444dcff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MaxCardinalitySearch &amp;</type>
      <name>capacityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ac069474ee71166a17f3223fc11f1f79e</anchor>
      <arglist>(const CapacityMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const CapacityMap &amp;</type>
      <name>capacityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a4a8dd8379d9750bc33f76b25e7173dfe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MaxCardinalitySearch &amp;</type>
      <name>cardinalityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>aca94d8aef275b61c307167b07c9db378</anchor>
      <arglist>(CardinalityMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>MaxCardinalitySearch &amp;</type>
      <name>processedMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>aeb1f572b5dc93a795f078fb905cf49bc</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const ProcessedMap &amp;</type>
      <name>processedMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>afd38c6bc15b16977a970172d9c54661d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MaxCardinalitySearch &amp;</type>
      <name>heap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>abaad197026467596f8c3c65797794814</anchor>
      <arglist>(Heap &amp;hp, HeapCrossRef &amp;cr)</arglist>
    </member>
    <member kind="function">
      <type>const Heap &amp;</type>
      <name>heap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ad088d6e77f0b0cd5ee3b3e9f2cfdc0f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HeapCrossRef &amp;</type>
      <name>heapCrossRef</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a2bb014b5a2273bd4473c6f9db2204020</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CardinalityMap &amp;</type>
      <name>cardinalityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>af9ca06302a9c9ff272f171d5dd8b7d4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>cardinality</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ae11005bacf44368f126b50b4255eaf08</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentCardinality</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>af28ac28e6f349b52df33c4d6f58010dc</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a89bf6f37a5765b5bf7f8146d6c143bee</anchor>
      <arglist>(Node v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a241bb560d61f0d4979f98b4eca119282</anchor>
      <arglist>(Node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a2182689d44252eb7533da9b0ae81ca84</anchor>
      <arglist>(Node source, Value capacity=0)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>abaa8ea92cf97ed0b91d950c61e0501b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a6101e41073be73e37cf551accf3a3b3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>emptySize</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a87572b2015161507dda390a14158f630</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ac63ebb11ff26c825dc40bed7d909b5fb</anchor>
      <arglist>(Node dest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a26cb87dd67f1b37bbdb2424688311023</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MaxCardinalitySearch&lt; Digraph, CapacityMap, DefHeapTraits&lt; H, typename Digraph::template NodeMap&lt; int &gt; &gt; &gt;</name>
    <filename>a03757.html</filename>
    <member kind="function">
      <type>const CardinalityMap &amp;</type>
      <name>cardinalityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>af9ca06302a9c9ff272f171d5dd8b7d4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>cardinality</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ae11005bacf44368f126b50b4255eaf08</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentCardinality</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>af28ac28e6f349b52df33c4d6f58010dc</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a89bf6f37a5765b5bf7f8146d6c143bee</anchor>
      <arglist>(Node v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a241bb560d61f0d4979f98b4eca119282</anchor>
      <arglist>(Node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a2182689d44252eb7533da9b0ae81ca84</anchor>
      <arglist>(Node source, Value capacity=0)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>abaa8ea92cf97ed0b91d950c61e0501b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a6101e41073be73e37cf551accf3a3b3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>emptySize</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a87572b2015161507dda390a14158f630</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ac63ebb11ff26c825dc40bed7d909b5fb</anchor>
      <arglist>(Node dest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a26cb87dd67f1b37bbdb2424688311023</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>aa6928feef02be4f2a184775d19dc6373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap::Value</type>
      <name>Value</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>aa6f382be2c1d9a8d3b5810f8395e877c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap</type>
      <name>CapacityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a9eeec06f304c4b0e7ec59d26ea8698a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a9d422a33007beed6fca71b1c37213d7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CardinalityMap</type>
      <name>CardinalityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a1d78c2f9734e01d062d4ba5c86be166b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::HeapCrossRef</type>
      <name>HeapCrossRef</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>acda80d336c67c0b2df5f58ede2b0a02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Heap</type>
      <name>Heap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ab4345a99641e219dc355bbf0efbcb0ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxCardinalitySearch</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a70b096809ad91e593efabdec68b38f6c</anchor>
      <arglist>(const Digraph &amp;digraph, const CapacityMap &amp;capacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxCardinalitySearch</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a84515c8784c566c4ef336d925a3dacae</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MaxCardinalitySearch</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a890dd7896a533e4a38f6a2ac9444dcff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MaxCardinalitySearch &amp;</type>
      <name>capacityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ac069474ee71166a17f3223fc11f1f79e</anchor>
      <arglist>(const CapacityMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const CapacityMap &amp;</type>
      <name>capacityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a4a8dd8379d9750bc33f76b25e7173dfe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MaxCardinalitySearch &amp;</type>
      <name>cardinalityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>aca94d8aef275b61c307167b07c9db378</anchor>
      <arglist>(CardinalityMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>MaxCardinalitySearch &amp;</type>
      <name>processedMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>aeb1f572b5dc93a795f078fb905cf49bc</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const ProcessedMap &amp;</type>
      <name>processedMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>afd38c6bc15b16977a970172d9c54661d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MaxCardinalitySearch &amp;</type>
      <name>heap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>abaad197026467596f8c3c65797794814</anchor>
      <arglist>(Heap &amp;hp, HeapCrossRef &amp;cr)</arglist>
    </member>
    <member kind="function">
      <type>const Heap &amp;</type>
      <name>heap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ad088d6e77f0b0cd5ee3b3e9f2cfdc0f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HeapCrossRef &amp;</type>
      <name>heapCrossRef</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a2bb014b5a2273bd4473c6f9db2204020</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CardinalityMap &amp;</type>
      <name>cardinalityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>af9ca06302a9c9ff272f171d5dd8b7d4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>cardinality</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ae11005bacf44368f126b50b4255eaf08</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentCardinality</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>af28ac28e6f349b52df33c4d6f58010dc</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a89bf6f37a5765b5bf7f8146d6c143bee</anchor>
      <arglist>(Node v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a241bb560d61f0d4979f98b4eca119282</anchor>
      <arglist>(Node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a2182689d44252eb7533da9b0ae81ca84</anchor>
      <arglist>(Node source, Value capacity=0)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>abaa8ea92cf97ed0b91d950c61e0501b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a6101e41073be73e37cf551accf3a3b3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>emptySize</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a87572b2015161507dda390a14158f630</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ac63ebb11ff26c825dc40bed7d909b5fb</anchor>
      <arglist>(Node dest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a26cb87dd67f1b37bbdb2424688311023</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MaxCardinalitySearch&lt; Digraph, CapacityMap, DefProcessedMapTraits&lt; T &gt; &gt;</name>
    <filename>a03757.html</filename>
    <member kind="function">
      <type>const CardinalityMap &amp;</type>
      <name>cardinalityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>af9ca06302a9c9ff272f171d5dd8b7d4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>cardinality</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ae11005bacf44368f126b50b4255eaf08</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentCardinality</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>af28ac28e6f349b52df33c4d6f58010dc</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a89bf6f37a5765b5bf7f8146d6c143bee</anchor>
      <arglist>(Node v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a241bb560d61f0d4979f98b4eca119282</anchor>
      <arglist>(Node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a2182689d44252eb7533da9b0ae81ca84</anchor>
      <arglist>(Node source, Value capacity=0)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>abaa8ea92cf97ed0b91d950c61e0501b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a6101e41073be73e37cf551accf3a3b3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>emptySize</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a87572b2015161507dda390a14158f630</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ac63ebb11ff26c825dc40bed7d909b5fb</anchor>
      <arglist>(Node dest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a26cb87dd67f1b37bbdb2424688311023</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>aa6928feef02be4f2a184775d19dc6373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap::Value</type>
      <name>Value</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>aa6f382be2c1d9a8d3b5810f8395e877c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap</type>
      <name>CapacityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a9eeec06f304c4b0e7ec59d26ea8698a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a9d422a33007beed6fca71b1c37213d7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CardinalityMap</type>
      <name>CardinalityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a1d78c2f9734e01d062d4ba5c86be166b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::HeapCrossRef</type>
      <name>HeapCrossRef</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>acda80d336c67c0b2df5f58ede2b0a02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Heap</type>
      <name>Heap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ab4345a99641e219dc355bbf0efbcb0ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxCardinalitySearch</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a70b096809ad91e593efabdec68b38f6c</anchor>
      <arglist>(const Digraph &amp;digraph, const CapacityMap &amp;capacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxCardinalitySearch</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a84515c8784c566c4ef336d925a3dacae</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MaxCardinalitySearch</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a890dd7896a533e4a38f6a2ac9444dcff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MaxCardinalitySearch &amp;</type>
      <name>capacityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ac069474ee71166a17f3223fc11f1f79e</anchor>
      <arglist>(const CapacityMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const CapacityMap &amp;</type>
      <name>capacityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a4a8dd8379d9750bc33f76b25e7173dfe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MaxCardinalitySearch &amp;</type>
      <name>cardinalityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>aca94d8aef275b61c307167b07c9db378</anchor>
      <arglist>(CardinalityMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>MaxCardinalitySearch &amp;</type>
      <name>processedMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>aeb1f572b5dc93a795f078fb905cf49bc</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const ProcessedMap &amp;</type>
      <name>processedMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>afd38c6bc15b16977a970172d9c54661d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MaxCardinalitySearch &amp;</type>
      <name>heap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>abaad197026467596f8c3c65797794814</anchor>
      <arglist>(Heap &amp;hp, HeapCrossRef &amp;cr)</arglist>
    </member>
    <member kind="function">
      <type>const Heap &amp;</type>
      <name>heap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ad088d6e77f0b0cd5ee3b3e9f2cfdc0f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HeapCrossRef &amp;</type>
      <name>heapCrossRef</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a2bb014b5a2273bd4473c6f9db2204020</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CardinalityMap &amp;</type>
      <name>cardinalityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>af9ca06302a9c9ff272f171d5dd8b7d4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>cardinality</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ae11005bacf44368f126b50b4255eaf08</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentCardinality</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>af28ac28e6f349b52df33c4d6f58010dc</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a89bf6f37a5765b5bf7f8146d6c143bee</anchor>
      <arglist>(Node v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a241bb560d61f0d4979f98b4eca119282</anchor>
      <arglist>(Node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a2182689d44252eb7533da9b0ae81ca84</anchor>
      <arglist>(Node source, Value capacity=0)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>abaa8ea92cf97ed0b91d950c61e0501b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a6101e41073be73e37cf551accf3a3b3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>emptySize</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a87572b2015161507dda390a14158f630</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ac63ebb11ff26c825dc40bed7d909b5fb</anchor>
      <arglist>(Node dest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a26cb87dd67f1b37bbdb2424688311023</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MaxCardinalitySearch&lt; Digraph, CapacityMap, DefStandardHeapTraits&lt; H, typename Digraph::template NodeMap&lt; int &gt; &gt; &gt;</name>
    <filename>a03757.html</filename>
    <member kind="function">
      <type>const CardinalityMap &amp;</type>
      <name>cardinalityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>af9ca06302a9c9ff272f171d5dd8b7d4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>cardinality</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ae11005bacf44368f126b50b4255eaf08</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentCardinality</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>af28ac28e6f349b52df33c4d6f58010dc</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a89bf6f37a5765b5bf7f8146d6c143bee</anchor>
      <arglist>(Node v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a241bb560d61f0d4979f98b4eca119282</anchor>
      <arglist>(Node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a2182689d44252eb7533da9b0ae81ca84</anchor>
      <arglist>(Node source, Value capacity=0)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>abaa8ea92cf97ed0b91d950c61e0501b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a6101e41073be73e37cf551accf3a3b3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>emptySize</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a87572b2015161507dda390a14158f630</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ac63ebb11ff26c825dc40bed7d909b5fb</anchor>
      <arglist>(Node dest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a26cb87dd67f1b37bbdb2424688311023</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>aa6928feef02be4f2a184775d19dc6373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap::Value</type>
      <name>Value</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>aa6f382be2c1d9a8d3b5810f8395e877c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap</type>
      <name>CapacityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a9eeec06f304c4b0e7ec59d26ea8698a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::ProcessedMap</type>
      <name>ProcessedMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a9d422a33007beed6fca71b1c37213d7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CardinalityMap</type>
      <name>CardinalityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a1d78c2f9734e01d062d4ba5c86be166b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::HeapCrossRef</type>
      <name>HeapCrossRef</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>acda80d336c67c0b2df5f58ede2b0a02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Heap</type>
      <name>Heap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ab4345a99641e219dc355bbf0efbcb0ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxCardinalitySearch</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a70b096809ad91e593efabdec68b38f6c</anchor>
      <arglist>(const Digraph &amp;digraph, const CapacityMap &amp;capacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxCardinalitySearch</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a84515c8784c566c4ef336d925a3dacae</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MaxCardinalitySearch</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a890dd7896a533e4a38f6a2ac9444dcff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MaxCardinalitySearch &amp;</type>
      <name>capacityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ac069474ee71166a17f3223fc11f1f79e</anchor>
      <arglist>(const CapacityMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const CapacityMap &amp;</type>
      <name>capacityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a4a8dd8379d9750bc33f76b25e7173dfe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MaxCardinalitySearch &amp;</type>
      <name>cardinalityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>aca94d8aef275b61c307167b07c9db378</anchor>
      <arglist>(CardinalityMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>MaxCardinalitySearch &amp;</type>
      <name>processedMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>aeb1f572b5dc93a795f078fb905cf49bc</anchor>
      <arglist>(ProcessedMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const ProcessedMap &amp;</type>
      <name>processedMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>afd38c6bc15b16977a970172d9c54661d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MaxCardinalitySearch &amp;</type>
      <name>heap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>abaad197026467596f8c3c65797794814</anchor>
      <arglist>(Heap &amp;hp, HeapCrossRef &amp;cr)</arglist>
    </member>
    <member kind="function">
      <type>const Heap &amp;</type>
      <name>heap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ad088d6e77f0b0cd5ee3b3e9f2cfdc0f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HeapCrossRef &amp;</type>
      <name>heapCrossRef</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a2bb014b5a2273bd4473c6f9db2204020</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CardinalityMap &amp;</type>
      <name>cardinalityMap</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>af9ca06302a9c9ff272f171d5dd8b7d4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>cardinality</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ae11005bacf44368f126b50b4255eaf08</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>currentCardinality</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>af28ac28e6f349b52df33c4d6f58010dc</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a89bf6f37a5765b5bf7f8146d6c143bee</anchor>
      <arglist>(Node v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a241bb560d61f0d4979f98b4eca119282</anchor>
      <arglist>(Node v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a2182689d44252eb7533da9b0ae81ca84</anchor>
      <arglist>(Node source, Value capacity=0)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>nextNode</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>abaa8ea92cf97ed0b91d950c61e0501b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a6101e41073be73e37cf551accf3a3b3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>emptySize</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a87572b2015161507dda390a14158f630</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ac63ebb11ff26c825dc40bed7d909b5fb</anchor>
      <arglist>(Node dest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a26cb87dd67f1b37bbdb2424688311023</anchor>
      <arglist>(const NodeBoolMap &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03757.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::MaxCardinalitySearchDefaultTraits</name>
    <filename>a03729.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a03729.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CapMapSelector&lt; CAP &gt;::CapacityMap</type>
      <name>CapacityMap</name>
      <anchorfile>a03729.html</anchorfile>
      <anchor>ad8441a907720e0ad1ba708f79016ac2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CapacityMap::Value</type>
      <name>Value</name>
      <anchorfile>a03729.html</anchorfile>
      <anchor>af751c878eda966b90fa4fdf5f1915eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::template NodeMap&lt; int &gt;</type>
      <name>HeapCrossRef</name>
      <anchorfile>a03729.html</anchorfile>
      <anchor>abe21d3edcb6bd235d862becfd84c6d92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HeapSelector&lt; CapacityMap &gt;::template Selector&lt; Value, HeapCrossRef &gt;::Heap</type>
      <name>Heap</name>
      <anchorfile>a03729.html</anchorfile>
      <anchor>a0043711ab44b6ad570aaae4fe3939059</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NullMap&lt; typename Digraph::Node, bool &gt;</type>
      <name>ProcessedMap</name>
      <anchorfile>a03729.html</anchorfile>
      <anchor>aacceca000ef5a4ecf90f910cff5fda88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::template NodeMap&lt; Value &gt;</type>
      <name>CardinalityMap</name>
      <anchorfile>a03729.html</anchorfile>
      <anchor>ad6b1960c7ece31acf8c7aab3f8b17054</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CapacityMap *</type>
      <name>createCapacityMap</name>
      <anchorfile>a03729.html</anchorfile>
      <anchor>a0ebc66206505d0308f53381f9c530143</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HeapCrossRef *</type>
      <name>createHeapCrossRef</name>
      <anchorfile>a03729.html</anchorfile>
      <anchor>ab2ed2fddeed129e2e2375dc2e9a6f2ec</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Heap *</type>
      <name>createHeap</name>
      <anchorfile>a03729.html</anchorfile>
      <anchor>a64cae0a299445161679d33b405837295</anchor>
      <arglist>(HeapCrossRef &amp;crossref)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProcessedMap *</type>
      <name>createProcessedMap</name>
      <anchorfile>a03729.html</anchorfile>
      <anchor>abb9fdc5023184dd1ff0e60bfdb8c7114</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CardinalityMap *</type>
      <name>createCardinalityMap</name>
      <anchorfile>a03729.html</anchorfile>
      <anchor>a08707eefc5a8e1a339e92d9368a67979</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::MaxFractionalMatching</name>
    <filename>a02605.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a2b87bbc0b9cbd0fd9f193bee71984810</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>startPerfect</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad384211fb3b06fea3a15bfc56454539b</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a035e9e0f46f74123960b677fc4950fc6</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>runPerfect</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a26b5bcdd4b8017748eeef0d258c7264c</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matchingSize</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>afb32a0417899af04f53006ad2156a0e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatchingMap &amp;</type>
      <name>matchingMap</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab67cd53b3b018eb0f9c1db6ed47801a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matching</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad1551c7629e8e7e105748277bbbfd7c8</anchor>
      <arglist>(const Edge &amp;edge) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>matching</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a0ec3673b5dbe00b5d53ca67a66c83986</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>barrier</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a721a11371b4e487be7c42614481b6ddd</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <class kind="struct">lemon::MaxFractionalMatching::SetElevator</class>
    <class kind="struct">lemon::MaxFractionalMatching::SetMatchingMap</class>
    <class kind="struct">lemon::MaxFractionalMatching::SetStandardElevator</class>
    <member kind="typedef">
      <type>TR</type>
      <name>Traits</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Graph</type>
      <name>Graph</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a81a6597ab6f942d117d2f32b1481e0de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::MatchingMap</type>
      <name>MatchingMap</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a9360c49ae8d8700a20e116842c238946</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Elevator</type>
      <name>Elevator</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a6f28aefb0101865304e425890c6c4c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxFractionalMatching</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a5fcc721fb672aa45f70b0a208bd0feeb</anchor>
      <arglist>(const Graph &amp;graph, bool allow_loops=true)</arglist>
    </member>
    <member kind="function">
      <type>MaxFractionalMatching &amp;</type>
      <name>matchingMap</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a265db4699c294741b3fac13fd87683f9</anchor>
      <arglist>(MatchingMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>MaxFractionalMatching &amp;</type>
      <name>elevator</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>aac65595b7a96924fb1f3136005686def</anchor>
      <arglist>(Elevator &amp;elevator)</arglist>
    </member>
    <member kind="function">
      <type>const Elevator &amp;</type>
      <name>elevator</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a960c4f9b0d5af901c6b37bec96f24de3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a2b87bbc0b9cbd0fd9f193bee71984810</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>startPerfect</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad384211fb3b06fea3a15bfc56454539b</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a035e9e0f46f74123960b677fc4950fc6</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>runPerfect</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a26b5bcdd4b8017748eeef0d258c7264c</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matchingSize</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>afb32a0417899af04f53006ad2156a0e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatchingMap &amp;</type>
      <name>matchingMap</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab67cd53b3b018eb0f9c1db6ed47801a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matching</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad1551c7629e8e7e105748277bbbfd7c8</anchor>
      <arglist>(const Edge &amp;edge) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>matching</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a0ec3673b5dbe00b5d53ca67a66c83986</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>barrier</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a721a11371b4e487be7c42614481b6ddd</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>primalScale</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>aa437420dd0d9ef796d732dc5df70c008</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MaxFractionalMatching&lt; Graph, SetElevatorTraits&lt; T &gt; &gt;</name>
    <filename>a02605.html</filename>
    <member kind="function">
      <type>const MatchingMap &amp;</type>
      <name>matchingMap</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab67cd53b3b018eb0f9c1db6ed47801a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matchingSize</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>afb32a0417899af04f53006ad2156a0e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matching</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad1551c7629e8e7e105748277bbbfd7c8</anchor>
      <arglist>(const Edge &amp;edge) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>matching</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a0ec3673b5dbe00b5d53ca67a66c83986</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>barrier</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a721a11371b4e487be7c42614481b6ddd</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a2b87bbc0b9cbd0fd9f193bee71984810</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>startPerfect</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad384211fb3b06fea3a15bfc56454539b</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a035e9e0f46f74123960b677fc4950fc6</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>runPerfect</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a26b5bcdd4b8017748eeef0d258c7264c</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="typedef">
      <type>SetElevatorTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Graph</type>
      <name>Graph</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a81a6597ab6f942d117d2f32b1481e0de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::MatchingMap</type>
      <name>MatchingMap</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a9360c49ae8d8700a20e116842c238946</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Elevator</type>
      <name>Elevator</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a6f28aefb0101865304e425890c6c4c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxFractionalMatching</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a5fcc721fb672aa45f70b0a208bd0feeb</anchor>
      <arglist>(const Graph &amp;graph, bool allow_loops=true)</arglist>
    </member>
    <member kind="function">
      <type>MaxFractionalMatching &amp;</type>
      <name>matchingMap</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a265db4699c294741b3fac13fd87683f9</anchor>
      <arglist>(MatchingMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>MaxFractionalMatching &amp;</type>
      <name>elevator</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>aac65595b7a96924fb1f3136005686def</anchor>
      <arglist>(Elevator &amp;elevator)</arglist>
    </member>
    <member kind="function">
      <type>const Elevator &amp;</type>
      <name>elevator</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a960c4f9b0d5af901c6b37bec96f24de3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatchingMap &amp;</type>
      <name>matchingMap</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab67cd53b3b018eb0f9c1db6ed47801a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matchingSize</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>afb32a0417899af04f53006ad2156a0e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matching</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad1551c7629e8e7e105748277bbbfd7c8</anchor>
      <arglist>(const Edge &amp;edge) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>matching</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a0ec3673b5dbe00b5d53ca67a66c83986</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>barrier</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a721a11371b4e487be7c42614481b6ddd</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a2b87bbc0b9cbd0fd9f193bee71984810</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>startPerfect</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad384211fb3b06fea3a15bfc56454539b</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a035e9e0f46f74123960b677fc4950fc6</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>runPerfect</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a26b5bcdd4b8017748eeef0d258c7264c</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>primalScale</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>aa437420dd0d9ef796d732dc5df70c008</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MaxFractionalMatching&lt; Graph, SetMatchingMapTraits&lt; T &gt; &gt;</name>
    <filename>a02605.html</filename>
    <member kind="function">
      <type>const MatchingMap &amp;</type>
      <name>matchingMap</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab67cd53b3b018eb0f9c1db6ed47801a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matchingSize</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>afb32a0417899af04f53006ad2156a0e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matching</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad1551c7629e8e7e105748277bbbfd7c8</anchor>
      <arglist>(const Edge &amp;edge) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>matching</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a0ec3673b5dbe00b5d53ca67a66c83986</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>barrier</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a721a11371b4e487be7c42614481b6ddd</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a2b87bbc0b9cbd0fd9f193bee71984810</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>startPerfect</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad384211fb3b06fea3a15bfc56454539b</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a035e9e0f46f74123960b677fc4950fc6</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>runPerfect</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a26b5bcdd4b8017748eeef0d258c7264c</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="typedef">
      <type>SetMatchingMapTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Graph</type>
      <name>Graph</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a81a6597ab6f942d117d2f32b1481e0de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::MatchingMap</type>
      <name>MatchingMap</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a9360c49ae8d8700a20e116842c238946</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Elevator</type>
      <name>Elevator</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a6f28aefb0101865304e425890c6c4c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxFractionalMatching</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a5fcc721fb672aa45f70b0a208bd0feeb</anchor>
      <arglist>(const Graph &amp;graph, bool allow_loops=true)</arglist>
    </member>
    <member kind="function">
      <type>MaxFractionalMatching &amp;</type>
      <name>matchingMap</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a265db4699c294741b3fac13fd87683f9</anchor>
      <arglist>(MatchingMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>MaxFractionalMatching &amp;</type>
      <name>elevator</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>aac65595b7a96924fb1f3136005686def</anchor>
      <arglist>(Elevator &amp;elevator)</arglist>
    </member>
    <member kind="function">
      <type>const Elevator &amp;</type>
      <name>elevator</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a960c4f9b0d5af901c6b37bec96f24de3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatchingMap &amp;</type>
      <name>matchingMap</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab67cd53b3b018eb0f9c1db6ed47801a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matchingSize</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>afb32a0417899af04f53006ad2156a0e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matching</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad1551c7629e8e7e105748277bbbfd7c8</anchor>
      <arglist>(const Edge &amp;edge) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>matching</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a0ec3673b5dbe00b5d53ca67a66c83986</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>barrier</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a721a11371b4e487be7c42614481b6ddd</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a2b87bbc0b9cbd0fd9f193bee71984810</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>startPerfect</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad384211fb3b06fea3a15bfc56454539b</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a035e9e0f46f74123960b677fc4950fc6</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>runPerfect</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a26b5bcdd4b8017748eeef0d258c7264c</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>primalScale</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>aa437420dd0d9ef796d732dc5df70c008</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MaxFractionalMatching&lt; Graph, SetStandardElevatorTraits&lt; T &gt; &gt;</name>
    <filename>a02605.html</filename>
    <member kind="function">
      <type>const MatchingMap &amp;</type>
      <name>matchingMap</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab67cd53b3b018eb0f9c1db6ed47801a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matchingSize</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>afb32a0417899af04f53006ad2156a0e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matching</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad1551c7629e8e7e105748277bbbfd7c8</anchor>
      <arglist>(const Edge &amp;edge) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>matching</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a0ec3673b5dbe00b5d53ca67a66c83986</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>barrier</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a721a11371b4e487be7c42614481b6ddd</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a2b87bbc0b9cbd0fd9f193bee71984810</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>startPerfect</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad384211fb3b06fea3a15bfc56454539b</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a035e9e0f46f74123960b677fc4950fc6</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>runPerfect</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a26b5bcdd4b8017748eeef0d258c7264c</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="typedef">
      <type>SetStandardElevatorTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Graph</type>
      <name>Graph</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a81a6597ab6f942d117d2f32b1481e0de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::MatchingMap</type>
      <name>MatchingMap</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a9360c49ae8d8700a20e116842c238946</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Elevator</type>
      <name>Elevator</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a6f28aefb0101865304e425890c6c4c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxFractionalMatching</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a5fcc721fb672aa45f70b0a208bd0feeb</anchor>
      <arglist>(const Graph &amp;graph, bool allow_loops=true)</arglist>
    </member>
    <member kind="function">
      <type>MaxFractionalMatching &amp;</type>
      <name>matchingMap</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a265db4699c294741b3fac13fd87683f9</anchor>
      <arglist>(MatchingMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>MaxFractionalMatching &amp;</type>
      <name>elevator</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>aac65595b7a96924fb1f3136005686def</anchor>
      <arglist>(Elevator &amp;elevator)</arglist>
    </member>
    <member kind="function">
      <type>const Elevator &amp;</type>
      <name>elevator</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a960c4f9b0d5af901c6b37bec96f24de3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatchingMap &amp;</type>
      <name>matchingMap</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab67cd53b3b018eb0f9c1db6ed47801a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matchingSize</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>afb32a0417899af04f53006ad2156a0e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matching</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad1551c7629e8e7e105748277bbbfd7c8</anchor>
      <arglist>(const Edge &amp;edge) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>matching</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a0ec3673b5dbe00b5d53ca67a66c83986</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>barrier</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a721a11371b4e487be7c42614481b6ddd</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a2b87bbc0b9cbd0fd9f193bee71984810</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>startPerfect</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad384211fb3b06fea3a15bfc56454539b</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a035e9e0f46f74123960b677fc4950fc6</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>runPerfect</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a26b5bcdd4b8017748eeef0d258c7264c</anchor>
      <arglist>(bool postprocess=true)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>primalScale</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>aa437420dd0d9ef796d732dc5df70c008</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::MaxFractionalMatchingDefaultTraits</name>
    <filename>a02601.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Graph</name>
      <anchorfile>a02601.html</anchorfile>
      <anchor>a2a51ae337b207f01f1c904f5eb2aa98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::template NodeMap&lt; typename GR::Arc &gt;</type>
      <name>MatchingMap</name>
      <anchorfile>a02601.html</anchorfile>
      <anchor>a033d9deccd1a06be1a62f8e9bc74c0d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinkedElevator&lt; Graph, typename Graph::Node &gt;</type>
      <name>Elevator</name>
      <anchorfile>a02601.html</anchorfile>
      <anchor>a8cfd34209fea564ef4e1d207bc0d2deb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MatchingMap *</type>
      <name>createMatchingMap</name>
      <anchorfile>a02601.html</anchorfile>
      <anchor>a19316af04ed3d8ef49ed690942061dd6</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Elevator *</type>
      <name>createElevator</name>
      <anchorfile>a02601.html</anchorfile>
      <anchor>a4550493b10baf925369431b30b63200a</anchor>
      <arglist>(const Graph &amp;graph, int max_level)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::MaxMatching</name>
    <filename>a03685.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>greedyInit</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a275cfb5a0d9eeb69e56ec2366e0a4f81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matchingInit</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a2db9e08af7f1c09cc29fb16f642b1246</anchor>
      <arglist>(const MatchingMap &amp;matching)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startSparse</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a772e8152b771c82330948686df4f9a6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startDense</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a4965a741e7b39a4efd41965bfa67f6f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matchingSize</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>afb32a0417899af04f53006ad2156a0e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matching</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>affc11fd07a5a277d4e9f939bf18ad590</anchor>
      <arglist>(const Edge &amp;edge) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>matching</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a8d2ab2a2a895ad3acb2b12a1be30fdbd</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>const MatchingMap &amp;</type>
      <name>matchingMap</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>ab67cd53b3b018eb0f9c1db6ed47801a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>mate</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>ad62aa49f04d01e23c41d4940a3b39ddc</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>status</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a0027518869313d51d987960604205de2</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>const StatusMap &amp;</type>
      <name>statusMap</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a81ea896892af8ffb1595fc6f6b12d8af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>barrier</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a260eed009ff30adef3d856b44cf76bc9</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Status</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a67a0db04d321a74b7e7fcfd3f1a3f70b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EVEN</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a67a0db04d321a74b7e7fcfd3f1a3f70ba8487756fbc720579906f0ae1738f0fcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MATCHED</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a67a0db04d321a74b7e7fcfd3f1a3f70bafa51dda37faacd52f548681cd05d4e31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ODD</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a67a0db04d321a74b7e7fcfd3f1a3f70baa29cedab858353a26006af9db7cd1ed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNMATCHED</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a67a0db04d321a74b7e7fcfd3f1a3f70ba1281ac5b7ba5b42a08b8e2dfee5ec74c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GR</type>
      <name>Graph</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a2a51ae337b207f01f1c904f5eb2aa98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::template NodeMap&lt; typename Graph::Arc &gt;</type>
      <name>MatchingMap</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a5e14c7d4f5b49a6771fef21bece0139c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::template NodeMap&lt; Status &gt;</type>
      <name>StatusMap</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>aaa57c1a28da6573c042ce3650072e142</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EVEN</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a67a0db04d321a74b7e7fcfd3f1a3f70ba8487756fbc720579906f0ae1738f0fcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MATCHED</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a67a0db04d321a74b7e7fcfd3f1a3f70bafa51dda37faacd52f548681cd05d4e31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ODD</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a67a0db04d321a74b7e7fcfd3f1a3f70baa29cedab858353a26006af9db7cd1ed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNMATCHED</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a67a0db04d321a74b7e7fcfd3f1a3f70ba1281ac5b7ba5b42a08b8e2dfee5ec74c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxMatching</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>ab3291930ed44de4eebbb080515043759</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>greedyInit</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a275cfb5a0d9eeb69e56ec2366e0a4f81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matchingInit</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a2db9e08af7f1c09cc29fb16f642b1246</anchor>
      <arglist>(const MatchingMap &amp;matching)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startSparse</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a772e8152b771c82330948686df4f9a6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startDense</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a4965a741e7b39a4efd41965bfa67f6f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matchingSize</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>afb32a0417899af04f53006ad2156a0e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matching</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>affc11fd07a5a277d4e9f939bf18ad590</anchor>
      <arglist>(const Edge &amp;edge) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>matching</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a8d2ab2a2a895ad3acb2b12a1be30fdbd</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>const MatchingMap &amp;</type>
      <name>matchingMap</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>ab67cd53b3b018eb0f9c1db6ed47801a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>mate</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>ad62aa49f04d01e23c41d4940a3b39ddc</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>status</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a0027518869313d51d987960604205de2</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>const StatusMap &amp;</type>
      <name>statusMap</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a81ea896892af8ffb1595fc6f6b12d8af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>barrier</name>
      <anchorfile>a03685.html</anchorfile>
      <anchor>a260eed009ff30adef3d856b44cf76bc9</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::MaxWeightedFractionalMatching</name>
    <filename>a02633.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>matchingWeight</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>abb81b1f445e7ebcd23a19345b7b229cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matchingSize</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>afb32a0417899af04f53006ad2156a0e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matching</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>ad1551c7629e8e7e105748277bbbfd7c8</anchor>
      <arglist>(const Edge &amp;edge) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>matching</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>a0ec3673b5dbe00b5d53ca67a66c83986</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>const MatchingMap &amp;</type>
      <name>matchingMap</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>ab67cd53b3b018eb0f9c1db6ed47801a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dualValue</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>a7d209104eac16d2b63b33ef2eecf7f6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>nodeValue</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>a962d3f6bcc8a9ed103aaa56f41f7281c</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="typedef">
      <type>GR</type>
      <name>Graph</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>a2a51ae337b207f01f1c904f5eb2aa98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WM</type>
      <name>WeightMap</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>a8cc0487bc8ca8ef9b236b960bc0b9b81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WeightMap::Value</type>
      <name>Value</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>adb23f34f07ad6e93c0e6fba266a31c0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::template NodeMap&lt; typename Graph::Arc &gt;</type>
      <name>MatchingMap</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>a5e14c7d4f5b49a6771fef21bece0139c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxWeightedFractionalMatching</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>ace9cc6010d186dd13183a003067210c5</anchor>
      <arglist>(const Graph &amp;graph, const WeightMap &amp;weight, bool allow_loops=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>matchingWeight</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>abb81b1f445e7ebcd23a19345b7b229cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matchingSize</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>afb32a0417899af04f53006ad2156a0e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matching</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>ad1551c7629e8e7e105748277bbbfd7c8</anchor>
      <arglist>(const Edge &amp;edge) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>matching</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>a0ec3673b5dbe00b5d53ca67a66c83986</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>const MatchingMap &amp;</type>
      <name>matchingMap</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>ab67cd53b3b018eb0f9c1db6ed47801a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dualValue</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>a7d209104eac16d2b63b33ef2eecf7f6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>nodeValue</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>a962d3f6bcc8a9ed103aaa56f41f7281c</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>primalScale</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>aa437420dd0d9ef796d732dc5df70c008</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dualScale</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>aeb1562496ec67b935620a87b899897bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::MaxWeightedMatching</name>
    <filename>a03689.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fractionalInit</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>aa6aa523182612da8c58ca2745c354403</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>matchingWeight</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>abb81b1f445e7ebcd23a19345b7b229cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matchingSize</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>afb32a0417899af04f53006ad2156a0e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matching</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>affc11fd07a5a277d4e9f939bf18ad590</anchor>
      <arglist>(const Edge &amp;edge) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>matching</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>a0ec3673b5dbe00b5d53ca67a66c83986</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>const MatchingMap &amp;</type>
      <name>matchingMap</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>ab67cd53b3b018eb0f9c1db6ed47801a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>mate</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>a73165a48630fbba60e5bdb7b07db7433</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dualValue</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>a7d209104eac16d2b63b33ef2eecf7f6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>nodeValue</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>a962d3f6bcc8a9ed103aaa56f41f7281c</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>blossomNum</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>ab070a6afae82c27c8ab92f0c57487412</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>blossomSize</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>ad3959dbefd4d3c3d56ddeb8a21f8acbb</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>blossomValue</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>a793d75064a0609564fcc14812a0f3517</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <class kind="class">lemon::MaxWeightedMatching::BlossomIt</class>
    <member kind="typedef">
      <type>GR</type>
      <name>Graph</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>a2a51ae337b207f01f1c904f5eb2aa98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WM</type>
      <name>WeightMap</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>a8cc0487bc8ca8ef9b236b960bc0b9b81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WeightMap::Value</type>
      <name>Value</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>adb23f34f07ad6e93c0e6fba266a31c0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::template NodeMap&lt; typename Graph::Arc &gt;</type>
      <name>MatchingMap</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>a5e14c7d4f5b49a6771fef21bece0139c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxWeightedMatching</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>a452a6b17d04688ef7953307630053964</anchor>
      <arglist>(const Graph &amp;graph, const WeightMap &amp;weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fractionalInit</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>aa6aa523182612da8c58ca2745c354403</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>matchingWeight</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>abb81b1f445e7ebcd23a19345b7b229cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matchingSize</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>afb32a0417899af04f53006ad2156a0e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matching</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>affc11fd07a5a277d4e9f939bf18ad590</anchor>
      <arglist>(const Edge &amp;edge) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>matching</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>a0ec3673b5dbe00b5d53ca67a66c83986</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>const MatchingMap &amp;</type>
      <name>matchingMap</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>ab67cd53b3b018eb0f9c1db6ed47801a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>mate</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>a73165a48630fbba60e5bdb7b07db7433</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dualValue</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>a7d209104eac16d2b63b33ef2eecf7f6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>nodeValue</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>a962d3f6bcc8a9ed103aaa56f41f7281c</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>blossomNum</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>ab070a6afae82c27c8ab92f0c57487412</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>blossomSize</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>ad3959dbefd4d3c3d56ddeb8a21f8acbb</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>blossomValue</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>a793d75064a0609564fcc14812a0f3517</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dualScale</name>
      <anchorfile>a03689.html</anchorfile>
      <anchor>aeb1562496ec67b935620a87b899897bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::MaxWeightedPerfectFractionalMatching</name>
    <filename>a02637.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>aad5997aaaa2d622f0ca57f8b24a51a7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>matchingWeight</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>abb81b1f445e7ebcd23a19345b7b229cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matchingSize</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>afb32a0417899af04f53006ad2156a0e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matching</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>ad1551c7629e8e7e105748277bbbfd7c8</anchor>
      <arglist>(const Edge &amp;edge) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>matching</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>a0ec3673b5dbe00b5d53ca67a66c83986</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>const MatchingMap &amp;</type>
      <name>matchingMap</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>ab67cd53b3b018eb0f9c1db6ed47801a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dualValue</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>a7d209104eac16d2b63b33ef2eecf7f6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>nodeValue</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>a962d3f6bcc8a9ed103aaa56f41f7281c</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="typedef">
      <type>GR</type>
      <name>Graph</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>a2a51ae337b207f01f1c904f5eb2aa98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WM</type>
      <name>WeightMap</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>a8cc0487bc8ca8ef9b236b960bc0b9b81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WeightMap::Value</type>
      <name>Value</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>adb23f34f07ad6e93c0e6fba266a31c0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::template NodeMap&lt; typename Graph::Arc &gt;</type>
      <name>MatchingMap</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>a5e14c7d4f5b49a6771fef21bece0139c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxWeightedPerfectFractionalMatching</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>a095ae90f2c8db1d9c4d709d348b93092</anchor>
      <arglist>(const Graph &amp;graph, const WeightMap &amp;weight, bool allow_loops=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>aad5997aaaa2d622f0ca57f8b24a51a7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>matchingWeight</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>abb81b1f445e7ebcd23a19345b7b229cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matchingSize</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>afb32a0417899af04f53006ad2156a0e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matching</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>ad1551c7629e8e7e105748277bbbfd7c8</anchor>
      <arglist>(const Edge &amp;edge) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>matching</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>a0ec3673b5dbe00b5d53ca67a66c83986</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>const MatchingMap &amp;</type>
      <name>matchingMap</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>ab67cd53b3b018eb0f9c1db6ed47801a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dualValue</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>a7d209104eac16d2b63b33ef2eecf7f6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>nodeValue</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>a962d3f6bcc8a9ed103aaa56f41f7281c</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>primalScale</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>aa437420dd0d9ef796d732dc5df70c008</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dualScale</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>aeb1562496ec67b935620a87b899897bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::MaxWeightedPerfectMatching</name>
    <filename>a03709.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fractionalInit</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>aa6aa523182612da8c58ca2745c354403</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>aad5997aaaa2d622f0ca57f8b24a51a7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>matchingWeight</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>abb81b1f445e7ebcd23a19345b7b229cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matching</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>affc11fd07a5a277d4e9f939bf18ad590</anchor>
      <arglist>(const Edge &amp;edge) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>matching</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>a0ec3673b5dbe00b5d53ca67a66c83986</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>const MatchingMap &amp;</type>
      <name>matchingMap</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>ab67cd53b3b018eb0f9c1db6ed47801a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>mate</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>a73165a48630fbba60e5bdb7b07db7433</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dualValue</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>a7d209104eac16d2b63b33ef2eecf7f6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>nodeValue</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>a962d3f6bcc8a9ed103aaa56f41f7281c</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>blossomNum</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>ab070a6afae82c27c8ab92f0c57487412</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>blossomSize</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>ad3959dbefd4d3c3d56ddeb8a21f8acbb</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>blossomValue</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>a793d75064a0609564fcc14812a0f3517</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <class kind="class">lemon::MaxWeightedPerfectMatching::BlossomIt</class>
    <member kind="typedef">
      <type>GR</type>
      <name>Graph</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>a2a51ae337b207f01f1c904f5eb2aa98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WM</type>
      <name>WeightMap</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>a8cc0487bc8ca8ef9b236b960bc0b9b81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WeightMap::Value</type>
      <name>Value</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>adb23f34f07ad6e93c0e6fba266a31c0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::template NodeMap&lt; typename Graph::Arc &gt;</type>
      <name>MatchingMap</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>a5e14c7d4f5b49a6771fef21bece0139c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxWeightedPerfectMatching</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>aa7a5d4dac99e37dca9ad075f287cbd82</anchor>
      <arglist>(const Graph &amp;graph, const WeightMap &amp;weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fractionalInit</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>aa6aa523182612da8c58ca2745c354403</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>aad5997aaaa2d622f0ca57f8b24a51a7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>matchingWeight</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>abb81b1f445e7ebcd23a19345b7b229cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matching</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>affc11fd07a5a277d4e9f939bf18ad590</anchor>
      <arglist>(const Edge &amp;edge) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>matching</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>a0ec3673b5dbe00b5d53ca67a66c83986</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>const MatchingMap &amp;</type>
      <name>matchingMap</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>ab67cd53b3b018eb0f9c1db6ed47801a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>mate</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>a73165a48630fbba60e5bdb7b07db7433</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dualValue</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>a7d209104eac16d2b63b33ef2eecf7f6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>nodeValue</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>a962d3f6bcc8a9ed103aaa56f41f7281c</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>blossomNum</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>ab070a6afae82c27c8ab92f0c57487412</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>blossomSize</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>ad3959dbefd4d3c3d56ddeb8a21f8acbb</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>blossomValue</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>a793d75064a0609564fcc14812a0f3517</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dualScale</name>
      <anchorfile>a03709.html</anchorfile>
      <anchor>aeb1562496ec67b935620a87b899897bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::MinCostArborescence</name>
    <filename>a03805.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a8208ca7e6b5405b60a9ae85a6f6394d4</anchor>
      <arglist>(Node source)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>arborescenceCost</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>afdfaefc8ece3b6337f32f1f5ce6d3cc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arborescence</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a2f0de1079bb015a8dc8f0f462c84cef8</anchor>
      <arglist>(Arc arc) const</arglist>
    </member>
    <member kind="function">
      <type>const ArborescenceMap &amp;</type>
      <name>arborescenceMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ad79488d9740c404ac06f297c97c59e23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>pred</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>abb208f63803bf5335ab93b5f13d9f371</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ac32547e2e8937ec1f059662ae7d07161</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a4162531c1c9e5d543a55a0dcdb8f8183</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dualNum</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a2e78f68324e425964784d3e76407547f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dualValue</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a7d209104eac16d2b63b33ef2eecf7f6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dualSize</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a60559a0eeb3be242bd16b3edf5a1597a</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dualValue</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ad422afae57d4ad38e8cffbb29384be83</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <class kind="class">lemon::MinCostArborescence::DualIt</class>
    <class kind="struct">lemon::MinCostArborescence::SetArborescenceMap</class>
    <class kind="struct">lemon::MinCostArborescence::SetPredMap</class>
    <member kind="typedef">
      <type>TR</type>
      <name>Traits</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>aa6928feef02be4f2a184775d19dc6373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CostMap</type>
      <name>CostMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a4394ecf7ca38a61b918f4e4ff3d3c9c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Value</type>
      <name>Value</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a1c7478783a00413767196fd8d82ad8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ad1a405d28d1b2733ec664409307be04f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::ArborescenceMap</type>
      <name>ArborescenceMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>aa1d4b4fc0b1e1e05a9aa150eb1471a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MinCostArborescence</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a7e8813f46384642dc4348622a966461a</anchor>
      <arglist>(const Digraph &amp;digraph, const CostMap &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MinCostArborescence</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a322a9f09bc8ca050537f92270b93957b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MinCostArborescence &amp;</type>
      <name>arborescenceMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a4ca9693e035b544f115fd28740ff9b32</anchor>
      <arglist>(ArborescenceMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>MinCostArborescence &amp;</type>
      <name>predMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a3419e79c5d19a90e3314c35c9e098515</anchor>
      <arglist>(PredMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a8208ca7e6b5405b60a9ae85a6f6394d4</anchor>
      <arglist>(Node source)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>arborescenceCost</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>afdfaefc8ece3b6337f32f1f5ce6d3cc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arborescence</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a2f0de1079bb015a8dc8f0f462c84cef8</anchor>
      <arglist>(Arc arc) const</arglist>
    </member>
    <member kind="function">
      <type>const ArborescenceMap &amp;</type>
      <name>arborescenceMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ad79488d9740c404ac06f297c97c59e23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>pred</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>abb208f63803bf5335ab93b5f13d9f371</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ac32547e2e8937ec1f059662ae7d07161</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a4162531c1c9e5d543a55a0dcdb8f8183</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dualNum</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a2e78f68324e425964784d3e76407547f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dualValue</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a7d209104eac16d2b63b33ef2eecf7f6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dualSize</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a60559a0eeb3be242bd16b3edf5a1597a</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dualValue</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ad422afae57d4ad38e8cffbb29384be83</anchor>
      <arglist>(int k) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MinCostArborescence&lt; Digraph, CostMap, SetArborescenceMapTraits&lt; T &gt; &gt;</name>
    <filename>a03805.html</filename>
    <member kind="function">
      <type>const ArborescenceMap &amp;</type>
      <name>arborescenceMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ad79488d9740c404ac06f297c97c59e23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>arborescenceCost</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>afdfaefc8ece3b6337f32f1f5ce6d3cc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arborescence</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a2f0de1079bb015a8dc8f0f462c84cef8</anchor>
      <arglist>(Arc arc) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>pred</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>abb208f63803bf5335ab93b5f13d9f371</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ac32547e2e8937ec1f059662ae7d07161</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a4162531c1c9e5d543a55a0dcdb8f8183</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dualNum</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a2e78f68324e425964784d3e76407547f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dualValue</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a7d209104eac16d2b63b33ef2eecf7f6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dualValue</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ad422afae57d4ad38e8cffbb29384be83</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dualSize</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a60559a0eeb3be242bd16b3edf5a1597a</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a8208ca7e6b5405b60a9ae85a6f6394d4</anchor>
      <arglist>(Node source)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="typedef">
      <type>SetArborescenceMapTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>aa6928feef02be4f2a184775d19dc6373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CostMap</type>
      <name>CostMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a4394ecf7ca38a61b918f4e4ff3d3c9c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Value</type>
      <name>Value</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a1c7478783a00413767196fd8d82ad8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ad1a405d28d1b2733ec664409307be04f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::ArborescenceMap</type>
      <name>ArborescenceMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>aa1d4b4fc0b1e1e05a9aa150eb1471a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MinCostArborescence</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a7e8813f46384642dc4348622a966461a</anchor>
      <arglist>(const Digraph &amp;digraph, const CostMap &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MinCostArborescence</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a322a9f09bc8ca050537f92270b93957b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MinCostArborescence &amp;</type>
      <name>arborescenceMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a4ca9693e035b544f115fd28740ff9b32</anchor>
      <arglist>(ArborescenceMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>MinCostArborescence &amp;</type>
      <name>predMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a3419e79c5d19a90e3314c35c9e098515</anchor>
      <arglist>(PredMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const ArborescenceMap &amp;</type>
      <name>arborescenceMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ad79488d9740c404ac06f297c97c59e23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>arborescenceCost</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>afdfaefc8ece3b6337f32f1f5ce6d3cc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arborescence</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a2f0de1079bb015a8dc8f0f462c84cef8</anchor>
      <arglist>(Arc arc) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>pred</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>abb208f63803bf5335ab93b5f13d9f371</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ac32547e2e8937ec1f059662ae7d07161</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a4162531c1c9e5d543a55a0dcdb8f8183</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dualNum</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a2e78f68324e425964784d3e76407547f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dualValue</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a7d209104eac16d2b63b33ef2eecf7f6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dualValue</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ad422afae57d4ad38e8cffbb29384be83</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dualSize</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a60559a0eeb3be242bd16b3edf5a1597a</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a8208ca7e6b5405b60a9ae85a6f6394d4</anchor>
      <arglist>(Node source)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MinCostArborescence&lt; Digraph, CostMap, SetPredMapTraits&lt; T &gt; &gt;</name>
    <filename>a03805.html</filename>
    <member kind="function">
      <type>const ArborescenceMap &amp;</type>
      <name>arborescenceMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ad79488d9740c404ac06f297c97c59e23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>arborescenceCost</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>afdfaefc8ece3b6337f32f1f5ce6d3cc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arborescence</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a2f0de1079bb015a8dc8f0f462c84cef8</anchor>
      <arglist>(Arc arc) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>pred</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>abb208f63803bf5335ab93b5f13d9f371</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ac32547e2e8937ec1f059662ae7d07161</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a4162531c1c9e5d543a55a0dcdb8f8183</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dualNum</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a2e78f68324e425964784d3e76407547f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dualValue</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a7d209104eac16d2b63b33ef2eecf7f6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dualValue</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ad422afae57d4ad38e8cffbb29384be83</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dualSize</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a60559a0eeb3be242bd16b3edf5a1597a</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a8208ca7e6b5405b60a9ae85a6f6394d4</anchor>
      <arglist>(Node source)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
    <member kind="typedef">
      <type>SetPredMapTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>aa6928feef02be4f2a184775d19dc6373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CostMap</type>
      <name>CostMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a4394ecf7ca38a61b918f4e4ff3d3c9c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Value</type>
      <name>Value</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a1c7478783a00413767196fd8d82ad8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::PredMap</type>
      <name>PredMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ad1a405d28d1b2733ec664409307be04f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::ArborescenceMap</type>
      <name>ArborescenceMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>aa1d4b4fc0b1e1e05a9aa150eb1471a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MinCostArborescence</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a7e8813f46384642dc4348622a966461a</anchor>
      <arglist>(const Digraph &amp;digraph, const CostMap &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MinCostArborescence</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a322a9f09bc8ca050537f92270b93957b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MinCostArborescence &amp;</type>
      <name>arborescenceMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a4ca9693e035b544f115fd28740ff9b32</anchor>
      <arglist>(ArborescenceMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>MinCostArborescence &amp;</type>
      <name>predMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a3419e79c5d19a90e3314c35c9e098515</anchor>
      <arglist>(PredMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const ArborescenceMap &amp;</type>
      <name>arborescenceMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ad79488d9740c404ac06f297c97c59e23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PredMap &amp;</type>
      <name>predMap</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a42ad65af26e47f9ef140b0c612570e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>arborescenceCost</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>afdfaefc8ece3b6337f32f1f5ce6d3cc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arborescence</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a2f0de1079bb015a8dc8f0f462c84cef8</anchor>
      <arglist>(Arc arc) const</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>pred</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>abb208f63803bf5335ab93b5f13d9f371</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ac32547e2e8937ec1f059662ae7d07161</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processed</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a4162531c1c9e5d543a55a0dcdb8f8183</anchor>
      <arglist>(Node node) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dualNum</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a2e78f68324e425964784d3e76407547f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dualValue</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a7d209104eac16d2b63b33ef2eecf7f6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>dualValue</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ad422afae57d4ad38e8cffbb29384be83</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dualSize</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a60559a0eeb3be242bd16b3edf5a1597a</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a8208ca7e6b5405b60a9ae85a6f6394d4</anchor>
      <arglist>(Node source)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>processNextNode</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>adba758047d7378b8a06320d29ce170d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>queueSize</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>aaa5f62cfe07c16d8cf53f4450aae61e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyQueue</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a3acf4a164dd4089dc8727da6194b145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03805.html</anchorfile>
      <anchor>ae3f0682c90a4e8a23c259943e899402e</anchor>
      <arglist>(Node s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::MinCostArborescenceDefaultTraits</name>
    <filename>a03801.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a03801.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CM</type>
      <name>CostMap</name>
      <anchorfile>a03801.html</anchorfile>
      <anchor>a0e4fe3b3bd126f464294f661c36a61d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CostMap::Value</type>
      <name>Value</name>
      <anchorfile>a03801.html</anchorfile>
      <anchor>a27a2ae8fda0566f686c0dda8668521e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::template ArcMap&lt; bool &gt;</type>
      <name>ArborescenceMap</name>
      <anchorfile>a03801.html</anchorfile>
      <anchor>ae8f0298807da399a43d45454dfffa284</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::template NodeMap&lt; typename Digraph::Arc &gt;</type>
      <name>PredMap</name>
      <anchorfile>a03801.html</anchorfile>
      <anchor>a2f311e3024ce1a50c00ffc291bce8e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArborescenceMap *</type>
      <name>createArborescenceMap</name>
      <anchorfile>a03801.html</anchorfile>
      <anchor>a8f0cf18871b7513ccab683de17ca12eb</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PredMap *</type>
      <name>createPredMap</name>
      <anchorfile>a03801.html</anchorfile>
      <anchor>a5a1853d9d7d8464c6e4215b441f12496</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::GomoryHu::MinCutEdgeIt</name>
    <filename>a02733.html</filename>
    <member kind="function">
      <type></type>
      <name>MinCutEdgeIt</name>
      <anchorfile>a02733.html</anchorfile>
      <anchor>a7462ab82ac3c02f3b6e73b37ebc9eeed</anchor>
      <arglist>(GomoryHu const &amp;gomory, const Node &amp;s, const Node &amp;t, bool side=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator typename Graph::Arc</name>
      <anchorfile>a02733.html</anchorfile>
      <anchor>ab1feb35ab889ab5e90875b451dfda762</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator typename Graph::Edge</name>
      <anchorfile>a02733.html</anchorfile>
      <anchor>a9eb05103a0a425b291cdb9c07f13269f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MinCutEdgeIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a02733.html</anchorfile>
      <anchor>ad55c346699bf86b8b24c89b03c9ad43d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Graph::Arc</type>
      <name>operator++</name>
      <anchorfile>a02733.html</anchorfile>
      <anchor>ad262fcc0a3a1a4759f00f42ac0260646</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::GomoryHu::MinCutNodeIt</name>
    <filename>a02729.html</filename>
    <member kind="function">
      <type></type>
      <name>MinCutNodeIt</name>
      <anchorfile>a02729.html</anchorfile>
      <anchor>aaea2c4b8a4f9d05eeaf5e11cc26e81e7</anchor>
      <arglist>(GomoryHu const &amp;gomory, const Node &amp;s, const Node &amp;t, bool side=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator typename Graph::Node</name>
      <anchorfile>a02729.html</anchorfile>
      <anchor>a0ffc3c8b5aead41b956e08bc6ae4af41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MinCutNodeIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a02729.html</anchorfile>
      <anchor>af7c6603223a0d6426a548bf4529fa7a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Graph::Node</type>
      <name>operator++</name>
      <anchorfile>a02729.html</anchorfile>
      <anchor>ad839066a44bc207d648e5f0623601565</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::MipSkeleton</name>
    <filename>a03421.html</filename>
    <base>lemon::MipSolver</base>
    <base>lemon::SkeletonSolverBase</base>
    <member kind="function">
      <type></type>
      <name>MipSkeleton</name>
      <anchorfile>a03421.html</anchorfile>
      <anchor>a4e33e7af142273f190acd7dfcb5ad77b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MipSkeleton *</type>
      <name>newSolver</name>
      <anchorfile>a03421.html</anchorfile>
      <anchor>a71415c216b75fde7f6cfc7d9ef103af2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MipSkeleton *</type>
      <name>cloneSolver</name>
      <anchorfile>a03421.html</anchorfile>
      <anchor>ae276cc123cad5ef19cd5234fdeef0848</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SolveExitStatus</type>
      <name>_solve</name>
      <anchorfile>a03421.html</anchorfile>
      <anchor>a05bc99cbe46a5d442c2039f21ab5ac00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Value</type>
      <name>_getSol</name>
      <anchorfile>a03421.html</anchorfile>
      <anchor>ad87252472f957d0b1d9a9867e25e879d</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Value</type>
      <name>_getSolValue</name>
      <anchorfile>a03421.html</anchorfile>
      <anchor>a16c2aca9c3172efa43872abc17dc14ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ProblemType</type>
      <name>_getType</name>
      <anchorfile>a03421.html</anchorfile>
      <anchor>a9c72f0a2ad7eecbd26ab56b593b618e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char *</type>
      <name>_solverName</name>
      <anchorfile>a03421.html</anchorfile>
      <anchor>adc90ed40485b9a06dcfc7e01ca6a0e60</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::MipSolver</name>
    <filename>a03409.html</filename>
    <base virtualness="virtual">lemon::LpBase</base>
    <member kind="function">
      <type>SolveExitStatus</type>
      <name>solve</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a1963be740c5f32bb76dfc9df4c2de376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ColTypes</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a2abb63446fb6107f8e2f4dbe9de2e082</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REAL</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a2abb63446fb6107f8e2f4dbe9de2e082a053cb139f4b2333482449705c529b1e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTEGER</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a2abb63446fb6107f8e2f4dbe9de2e082a5a063e265d2ac903b6808e9f6e73ec46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colType</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>aa7e3fcdb8e8840d5a4ce7a74a143de8c</anchor>
      <arglist>(Col c, ColTypes col_type)</arglist>
    </member>
    <member kind="function">
      <type>ColTypes</type>
      <name>colType</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a34d1d3c3561abc8cd18d6e42811f7b64</anchor>
      <arglist>(Col c) const</arglist>
    </member>
    <member kind="function">
      <type>ProblemType</type>
      <name>type</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a09ae0127bb57300deb860fe7c3f1fc30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>sol</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a2abfaec1680d112900dd969368f648ae</anchor>
      <arglist>(Col c) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>sol</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a68e130a5d449c670b74fb231c3d896a0</anchor>
      <arglist>(const Expr &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>solValue</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a5920749cdc54e5756ed879180e60ec5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ProblemType</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNDEFINED</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea605159e8a4c32319fd69b5d151369d93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2884fa43446c0cbc9c7a9b74d41d7483</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEASIBLE</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea03f919221217f95d21a593a7120165e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2579881e7c83261bc21bafb5a5c92cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBOUNDED</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea6c65123d1b5b01632a477661055b01ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNDEFINED</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea605159e8a4c32319fd69b5d151369d93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2884fa43446c0cbc9c7a9b74d41d7483</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEASIBLE</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea03f919221217f95d21a593a7120165e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2579881e7c83261bc21bafb5a5c92cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBOUNDED</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea6c65123d1b5b01632a477661055b01ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REAL</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a2abb63446fb6107f8e2f4dbe9de2e082a053cb139f4b2333482449705c529b1e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTEGER</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a2abb63446fb6107f8e2f4dbe9de2e082a5a063e265d2ac903b6808e9f6e73ec46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MipSolver *</type>
      <name>newSolver</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>ad14b234174aeb1168ee9169136b66367</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MipSolver *</type>
      <name>cloneSolver</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a36358eade1031f6be344751a8fd16437</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>SolveExitStatus</type>
      <name>solve</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a1963be740c5f32bb76dfc9df4c2de376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ProblemType</type>
      <name>type</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a09ae0127bb57300deb860fe7c3f1fc30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>sol</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a2abfaec1680d112900dd969368f648ae</anchor>
      <arglist>(Col c) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>sol</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a68e130a5d449c670b74fb231c3d896a0</anchor>
      <arglist>(const Expr &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>solValue</name>
      <anchorfile>a03409.html</anchorfile>
      <anchor>a5920749cdc54e5756ed879180e60ec5a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::MulMap</name>
    <filename>a03489.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>MapBase&lt; M1::Key, M1::Value &gt;</base>
    <member kind="typedef">
      <type>M1::Key</type>
      <name>Key</name>
      <anchorfile>a03489.html</anchorfile>
      <anchor>ac16c774bd2b82a45854c3ac66248de01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M1::Value</type>
      <name>Value</name>
      <anchorfile>a03489.html</anchorfile>
      <anchor>a087615b851ee4b1f01463e4589205d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MulMap</name>
      <anchorfile>a03489.html</anchorfile>
      <anchor>aab3ad71e03084dd7fb88dab99170b62d</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03489.html</anchorfile>
      <anchor>a8de1b13f44fab45faa8daa93027f9df2</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>MulMap&lt; M1, M2 &gt;</type>
      <name>mulMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>gaf61fff11e845e77cbd7530b10b75aa17</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::NagamochiIbaraki</name>
    <filename>a03845.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processNextPhase</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>aa0c11094376b6650f3bf85b4bbceca59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>minCutValue</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a839608849d9d1218bf5d1c0854f19ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>minCutMap</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a86f34dc0d7ab98aa31c422b422236f55</anchor>
      <arglist>(CutMap &amp;cutMap) const</arglist>
    </member>
    <class kind="struct">lemon::NagamochiIbaraki::SetHeap</class>
    <class kind="struct">lemon::NagamochiIbaraki::SetStandardHeap</class>
    <class kind="struct">lemon::NagamochiIbaraki::SetUnitCapacity</class>
    <member kind="typedef">
      <type>Traits::Graph</type>
      <name>Graph</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>acb64462e8e57ffef211b89635b3e1748</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap</type>
      <name>CapacityMap</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a9eeec06f304c4b0e7ec59d26ea8698a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap::Value</type>
      <name>Value</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>aa6f382be2c1d9a8d3b5810f8395e877c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Heap</type>
      <name>Heap</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>ab4345a99641e219dc355bbf0efbcb0ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::HeapCrossRef</type>
      <name>HeapCrossRef</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>acda80d336c67c0b2df5f58ede2b0a02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NagamochiIbaraki</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>acda2c978e5e687a4d5e4383aaf4edebd</anchor>
      <arglist>(const Graph &amp;graph, const CapacityMap &amp;capacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NagamochiIbaraki</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a3e6c64516d45918b7b493c5ffa95346c</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NagamochiIbaraki</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a97a7f5d49c1acb0f8995a7dd5138cade</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NagamochiIbaraki &amp;</type>
      <name>heap</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a6fdeed46e8f3bf20f2875bc4ceef5e4c</anchor>
      <arglist>(Heap &amp;hp, HeapCrossRef &amp;cr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processNextPhase</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>aa0c11094376b6650f3bf85b4bbceca59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>minCutValue</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a839608849d9d1218bf5d1c0854f19ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>minCutMap</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a86f34dc0d7ab98aa31c422b422236f55</anchor>
      <arglist>(CutMap &amp;cutMap) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NagamochiIbaraki&lt; Graph, CapacityMap, SetHeapTraits&lt; H, RangeMap&lt; int &gt; &gt; &gt;</name>
    <filename>a03845.html</filename>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processNextPhase</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>aa0c11094376b6650f3bf85b4bbceca59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>minCutValue</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a839608849d9d1218bf5d1c0854f19ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>minCutMap</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a86f34dc0d7ab98aa31c422b422236f55</anchor>
      <arglist>(CutMap &amp;cutMap) const</arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Graph</type>
      <name>Graph</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>acb64462e8e57ffef211b89635b3e1748</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap</type>
      <name>CapacityMap</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a9eeec06f304c4b0e7ec59d26ea8698a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap::Value</type>
      <name>Value</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>aa6f382be2c1d9a8d3b5810f8395e877c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Heap</type>
      <name>Heap</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>ab4345a99641e219dc355bbf0efbcb0ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::HeapCrossRef</type>
      <name>HeapCrossRef</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>acda80d336c67c0b2df5f58ede2b0a02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NagamochiIbaraki</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>acda2c978e5e687a4d5e4383aaf4edebd</anchor>
      <arglist>(const Graph &amp;graph, const CapacityMap &amp;capacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NagamochiIbaraki</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a3e6c64516d45918b7b493c5ffa95346c</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NagamochiIbaraki</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a97a7f5d49c1acb0f8995a7dd5138cade</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NagamochiIbaraki &amp;</type>
      <name>heap</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a6fdeed46e8f3bf20f2875bc4ceef5e4c</anchor>
      <arglist>(Heap &amp;hp, HeapCrossRef &amp;cr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processNextPhase</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>aa0c11094376b6650f3bf85b4bbceca59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>minCutValue</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a839608849d9d1218bf5d1c0854f19ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>minCutMap</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a86f34dc0d7ab98aa31c422b422236f55</anchor>
      <arglist>(CutMap &amp;cutMap) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NagamochiIbaraki&lt; Graph, CapacityMap, SetStandardHeapTraits&lt; H, RangeMap&lt; int &gt; &gt; &gt;</name>
    <filename>a03845.html</filename>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processNextPhase</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>aa0c11094376b6650f3bf85b4bbceca59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>minCutValue</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a839608849d9d1218bf5d1c0854f19ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>minCutMap</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a86f34dc0d7ab98aa31c422b422236f55</anchor>
      <arglist>(CutMap &amp;cutMap) const</arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Graph</type>
      <name>Graph</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>acb64462e8e57ffef211b89635b3e1748</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap</type>
      <name>CapacityMap</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a9eeec06f304c4b0e7ec59d26ea8698a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap::Value</type>
      <name>Value</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>aa6f382be2c1d9a8d3b5810f8395e877c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Heap</type>
      <name>Heap</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>ab4345a99641e219dc355bbf0efbcb0ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::HeapCrossRef</type>
      <name>HeapCrossRef</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>acda80d336c67c0b2df5f58ede2b0a02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NagamochiIbaraki</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>acda2c978e5e687a4d5e4383aaf4edebd</anchor>
      <arglist>(const Graph &amp;graph, const CapacityMap &amp;capacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NagamochiIbaraki</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a3e6c64516d45918b7b493c5ffa95346c</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NagamochiIbaraki</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a97a7f5d49c1acb0f8995a7dd5138cade</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NagamochiIbaraki &amp;</type>
      <name>heap</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a6fdeed46e8f3bf20f2875bc4ceef5e4c</anchor>
      <arglist>(Heap &amp;hp, HeapCrossRef &amp;cr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processNextPhase</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>aa0c11094376b6650f3bf85b4bbceca59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>minCutValue</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a839608849d9d1218bf5d1c0854f19ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>minCutMap</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a86f34dc0d7ab98aa31c422b422236f55</anchor>
      <arglist>(CutMap &amp;cutMap) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NagamochiIbaraki&lt; Graph, CapacityMap, SetUnitCapacityTraits &gt;</name>
    <filename>a03845.html</filename>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processNextPhase</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>aa0c11094376b6650f3bf85b4bbceca59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>minCutValue</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a839608849d9d1218bf5d1c0854f19ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>minCutMap</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a86f34dc0d7ab98aa31c422b422236f55</anchor>
      <arglist>(CutMap &amp;cutMap) const</arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Graph</type>
      <name>Graph</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>acb64462e8e57ffef211b89635b3e1748</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap</type>
      <name>CapacityMap</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a9eeec06f304c4b0e7ec59d26ea8698a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap::Value</type>
      <name>Value</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>aa6f382be2c1d9a8d3b5810f8395e877c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Heap</type>
      <name>Heap</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>ab4345a99641e219dc355bbf0efbcb0ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::HeapCrossRef</type>
      <name>HeapCrossRef</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>acda80d336c67c0b2df5f58ede2b0a02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NagamochiIbaraki</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>acda2c978e5e687a4d5e4383aaf4edebd</anchor>
      <arglist>(const Graph &amp;graph, const CapacityMap &amp;capacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NagamochiIbaraki</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a3e6c64516d45918b7b493c5ffa95346c</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NagamochiIbaraki</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a97a7f5d49c1acb0f8995a7dd5138cade</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NagamochiIbaraki &amp;</type>
      <name>heap</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a6fdeed46e8f3bf20f2875bc4ceef5e4c</anchor>
      <arglist>(Heap &amp;hp, HeapCrossRef &amp;cr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processNextPhase</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>aa0c11094376b6650f3bf85b4bbceca59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>minCutValue</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a839608849d9d1218bf5d1c0854f19ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>minCutMap</name>
      <anchorfile>a03845.html</anchorfile>
      <anchor>a86f34dc0d7ab98aa31c422b422236f55</anchor>
      <arglist>(CutMap &amp;cutMap) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::NagamochiIbarakiDefaultTraits</name>
    <filename>a03841.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>CM::Value</type>
      <name>Value</name>
      <anchorfile>a03841.html</anchorfile>
      <anchor>ab9ec65e3dfb9c6ef5ac06f63fec0b8af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GR</type>
      <name>Graph</name>
      <anchorfile>a03841.html</anchorfile>
      <anchor>a2a51ae337b207f01f1c904f5eb2aa98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CM</type>
      <name>CapacityMap</name>
      <anchorfile>a03841.html</anchorfile>
      <anchor>aa445690c7204e6db4ddd20f5e865098b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::template NodeMap&lt; int &gt;</type>
      <name>HeapCrossRef</name>
      <anchorfile>a03841.html</anchorfile>
      <anchor>a6778ddccbd5e5e916667fdfb0b3280da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BinHeap&lt; Value, HeapCrossRef, std::greater&lt; Value &gt; &gt;</type>
      <name>Heap</name>
      <anchorfile>a03841.html</anchorfile>
      <anchor>a1a8701aa07ebac1b097e8b1be0f1701d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CapacityMap *</type>
      <name>createCapacityMap</name>
      <anchorfile>a03841.html</anchorfile>
      <anchor>a978cc65b810b0113a44e5978efe3ea64</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HeapCrossRef *</type>
      <name>createHeapCrossRef</name>
      <anchorfile>a03841.html</anchorfile>
      <anchor>ac7130868e9bc3a91f3c0853cbf68c4da</anchor>
      <arglist>(const Graph &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Heap *</type>
      <name>createHeap</name>
      <anchorfile>a03841.html</anchorfile>
      <anchor>a01816b6b724aa6d7f99d7ac19d549125</anchor>
      <arglist>(HeapCrossRef &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::NearestNeighborTsp</name>
    <filename>a03885.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>Cost</type>
      <name>run</name>
      <anchorfile>a03885.html</anchorfile>
      <anchor>af294138cc991668caa699c9255c8f136</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>tourCost</name>
      <anchorfile>a03885.html</anchorfile>
      <anchor>a5bd0e49b03ec84f7cecd696886d57140</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Node &gt; &amp;</type>
      <name>tourNodes</name>
      <anchorfile>a03885.html</anchorfile>
      <anchor>a3a84c614d8b1b1ab72deed6063a92004</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tourNodes</name>
      <anchorfile>a03885.html</anchorfile>
      <anchor>a91e89199ba4d6cad1ba3a3506c21ef6a</anchor>
      <arglist>(Iterator out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tour</name>
      <anchorfile>a03885.html</anchorfile>
      <anchor>a6b952e6a8fcc5212f789fafb24314af4</anchor>
      <arglist>(Path &amp;path) const</arglist>
    </member>
    <member kind="typedef">
      <type>CM</type>
      <name>CostMap</name>
      <anchorfile>a03885.html</anchorfile>
      <anchor>a0e4fe3b3bd126f464294f661c36a61d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CM::Value</type>
      <name>Cost</name>
      <anchorfile>a03885.html</anchorfile>
      <anchor>a1a1dfba092aeec4656ebceaf99ca8b22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NearestNeighborTsp</name>
      <anchorfile>a03885.html</anchorfile>
      <anchor>a92cd0b9a46a7aac11273f130dd7a7813</anchor>
      <arglist>(const FullGraph &amp;gr, const CostMap &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>run</name>
      <anchorfile>a03885.html</anchorfile>
      <anchor>af294138cc991668caa699c9255c8f136</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>tourCost</name>
      <anchorfile>a03885.html</anchorfile>
      <anchor>a5bd0e49b03ec84f7cecd696886d57140</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Node &gt; &amp;</type>
      <name>tourNodes</name>
      <anchorfile>a03885.html</anchorfile>
      <anchor>a3a84c614d8b1b1ab72deed6063a92004</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tourNodes</name>
      <anchorfile>a03885.html</anchorfile>
      <anchor>a91e89199ba4d6cad1ba3a3506c21ef6a</anchor>
      <arglist>(Iterator out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tour</name>
      <anchorfile>a03885.html</anchorfile>
      <anchor>a6b952e6a8fcc5212f789fafb24314af4</anchor>
      <arglist>(Path &amp;path) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::NegMap</name>
    <filename>a03513.html</filename>
    <templarg></templarg>
    <base>MapBase&lt; M::Key, M::Value &gt;</base>
    <member kind="typedef">
      <type>M::Key</type>
      <name>Key</name>
      <anchorfile>a03513.html</anchorfile>
      <anchor>a8c5e944591efa8f8f0d64cf81950abcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M::Value</type>
      <name>Value</name>
      <anchorfile>a03513.html</anchorfile>
      <anchor>a7054917e50868b3b4c3d0899fc4b422e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NegMap</name>
      <anchorfile>a03513.html</anchorfile>
      <anchor>a77e1df4d3a894decde69bbeb33fb1512</anchor>
      <arglist>(const M &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03513.html</anchorfile>
      <anchor>a8de1b13f44fab45faa8daa93027f9df2</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>NegMap&lt; M &gt;</type>
      <name>negMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>gac47c5a97a29055bfc88314591fdfdf42</anchor>
      <arglist>(const M &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::NegWriteMap</name>
    <filename>a03517.html</filename>
    <templarg></templarg>
    <base>MapBase&lt; M::Key, M::Value &gt;</base>
    <member kind="typedef">
      <type>M::Key</type>
      <name>Key</name>
      <anchorfile>a03517.html</anchorfile>
      <anchor>a8c5e944591efa8f8f0d64cf81950abcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M::Value</type>
      <name>Value</name>
      <anchorfile>a03517.html</anchorfile>
      <anchor>a7054917e50868b3b4c3d0899fc4b422e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NegWriteMap</name>
      <anchorfile>a03517.html</anchorfile>
      <anchor>aded98ea981ece293ceb6acd2909cc4c6</anchor>
      <arglist>(M &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03517.html</anchorfile>
      <anchor>a8de1b13f44fab45faa8daa93027f9df2</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03517.html</anchorfile>
      <anchor>a6ac83be911521f604e18f3df0d678213</anchor>
      <arglist>(const Key &amp;k, const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>NegWriteMap&lt; M &gt;</type>
      <name>negWriteMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>gaacce5676587f1d1e7c7d810cfd2e7ff1</anchor>
      <arglist>(M &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::NetworkSimplex</name>
    <filename>a03889.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>NetworkSimplex &amp;</type>
      <name>lowerMap</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>aa0198dc86458cf5d9893eaac3875faff</anchor>
      <arglist>(const LowerMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>NetworkSimplex &amp;</type>
      <name>upperMap</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a3d130a8189e0bed5939be2876b1183f1</anchor>
      <arglist>(const UpperMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>NetworkSimplex &amp;</type>
      <name>costMap</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>afa88624e168f246d882e8193fdf12f5b</anchor>
      <arglist>(const CostMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>NetworkSimplex &amp;</type>
      <name>supplyMap</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a3856a08752190c4b99f5e006e3b14c53</anchor>
      <arglist>(const SupplyMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>NetworkSimplex &amp;</type>
      <name>stSupply</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>ac622127c2be52342b9becb61ff28e56e</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t, Value k)</arglist>
    </member>
    <member kind="function">
      <type>NetworkSimplex &amp;</type>
      <name>supplyType</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a40c06e412dc08e6a541abbcf97385b1e</anchor>
      <arglist>(SupplyType supply_type)</arglist>
    </member>
    <member kind="function">
      <type>ProblemType</type>
      <name>run</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a591276ea8f1afbe9d24bd1c1d48b0f53</anchor>
      <arglist>(PivotRule pivot_rule=BLOCK_SEARCH)</arglist>
    </member>
    <member kind="function">
      <type>NetworkSimplex &amp;</type>
      <name>resetParams</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>aefce8a05d41659d7aaffb4cb47eeec43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NetworkSimplex &amp;</type>
      <name>reset</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a88086127469093e19a9a024bbf60c360</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Number</type>
      <name>totalCost</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a484c946e8ad38f8c0b419c84637140d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a1a77ac91887d3ea35df58e98b13e6fd4</anchor>
      <arglist>(const Arc &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flowMap</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>aa2ea9eb67aee0565ecdbaeb537eb8b46</anchor>
      <arglist>(FlowMap &amp;map) const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>potential</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>ac291424bc8234750625d26b984442150</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>potentialMap</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a0c1faa3dd3a44ffe90e51af832ec7804</anchor>
      <arglist>(PotentialMap &amp;map) const</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ProblemType</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2884fa43446c0cbc9c7a9b74d41d7483</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2579881e7c83261bc21bafb5a5c92cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBOUNDED</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea6c65123d1b5b01632a477661055b01ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SupplyType</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>ac860a45e09c68fb71f723d392c3161ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEQ</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>ac860a45e09c68fb71f723d392c3161aca99705e9593e3e5c078150b293c86561e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEQ</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>ac860a45e09c68fb71f723d392c3161aca5eba1d52e68e10fb2dafcb363cec49b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PivotRule</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a310d3a1fcfff1e099330ae372abc73c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FIRST_ELIGIBLE</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a310d3a1fcfff1e099330ae372abc73c2a7c31211b575a3beecd934538c4419b25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BEST_ELIGIBLE</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a310d3a1fcfff1e099330ae372abc73c2ac89b3377964fb28026f9b814f30c210b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BLOCK_SEARCH</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a310d3a1fcfff1e099330ae372abc73c2afa32a0f9c82dc3e2e1000b6086d3fc1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CANDIDATE_LIST</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a310d3a1fcfff1e099330ae372abc73c2a8d608c7bc486d1c56c7e5a5a6c6a616d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALTERING_LIST</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a310d3a1fcfff1e099330ae372abc73c2a76eceb36ac871a19d694999a965f877a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>Cost</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>adeb81a88e6bbaf933ca20ea3bbba7a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2884fa43446c0cbc9c7a9b74d41d7483</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMAL</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea2579881e7c83261bc21bafb5a5c92cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBOUNDED</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a4c669cb1cb4d98dfea944e9ceec7d33ea6c65123d1b5b01632a477661055b01ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEQ</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>ac860a45e09c68fb71f723d392c3161aca99705e9593e3e5c078150b293c86561e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEQ</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>ac860a45e09c68fb71f723d392c3161aca5eba1d52e68e10fb2dafcb363cec49b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FIRST_ELIGIBLE</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a310d3a1fcfff1e099330ae372abc73c2a7c31211b575a3beecd934538c4419b25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BEST_ELIGIBLE</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a310d3a1fcfff1e099330ae372abc73c2ac89b3377964fb28026f9b814f30c210b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BLOCK_SEARCH</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a310d3a1fcfff1e099330ae372abc73c2afa32a0f9c82dc3e2e1000b6086d3fc1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CANDIDATE_LIST</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a310d3a1fcfff1e099330ae372abc73c2a8d608c7bc486d1c56c7e5a5a6c6a616d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALTERING_LIST</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a310d3a1fcfff1e099330ae372abc73c2a76eceb36ac871a19d694999a965f877a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NetworkSimplex</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>aadcbd3709a402a8ba8d06b8c3d6504d4</anchor>
      <arglist>(const GR &amp;graph, bool arc_mixing=true)</arglist>
    </member>
    <member kind="function">
      <type>NetworkSimplex &amp;</type>
      <name>lowerMap</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>aa0198dc86458cf5d9893eaac3875faff</anchor>
      <arglist>(const LowerMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>NetworkSimplex &amp;</type>
      <name>upperMap</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a3d130a8189e0bed5939be2876b1183f1</anchor>
      <arglist>(const UpperMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>NetworkSimplex &amp;</type>
      <name>costMap</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>afa88624e168f246d882e8193fdf12f5b</anchor>
      <arglist>(const CostMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>NetworkSimplex &amp;</type>
      <name>supplyMap</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a3856a08752190c4b99f5e006e3b14c53</anchor>
      <arglist>(const SupplyMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>NetworkSimplex &amp;</type>
      <name>stSupply</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>ac622127c2be52342b9becb61ff28e56e</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t, Value k)</arglist>
    </member>
    <member kind="function">
      <type>NetworkSimplex &amp;</type>
      <name>supplyType</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a40c06e412dc08e6a541abbcf97385b1e</anchor>
      <arglist>(SupplyType supply_type)</arglist>
    </member>
    <member kind="function">
      <type>ProblemType</type>
      <name>run</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a591276ea8f1afbe9d24bd1c1d48b0f53</anchor>
      <arglist>(PivotRule pivot_rule=BLOCK_SEARCH)</arglist>
    </member>
    <member kind="function">
      <type>NetworkSimplex &amp;</type>
      <name>resetParams</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>aefce8a05d41659d7aaffb4cb47eeec43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NetworkSimplex &amp;</type>
      <name>reset</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a88086127469093e19a9a024bbf60c360</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Number</type>
      <name>totalCost</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a484c946e8ad38f8c0b419c84637140d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a1a77ac91887d3ea35df58e98b13e6fd4</anchor>
      <arglist>(const Arc &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flowMap</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>aa2ea9eb67aee0565ecdbaeb537eb8b46</anchor>
      <arglist>(FlowMap &amp;map) const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>potential</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>ac291424bc8234750625d26b984442150</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>potentialMap</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a0c1faa3dd3a44ffe90e51af832ec7804</anchor>
      <arglist>(PotentialMap &amp;map) const</arglist>
    </member>
    <member kind="variable">
      <type>const Value</type>
      <name>INF</name>
      <anchorfile>a03889.html</anchorfile>
      <anchor>a601ffd79f13610daacadd46f973507c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::NoCounter</name>
    <filename>a02165.html</filename>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::BpGraph::Node</name>
    <filename>a05105.html</filename>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>a05105.html</anchorfile>
      <anchor>a0d313fac56abd7ebe58a17f1530b879e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>a05105.html</anchorfile>
      <anchor>a7d0d5367c2bd0ffca74029c22845c3b4</anchor>
      <arglist>(const Node &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>a05105.html</anchorfile>
      <anchor>a9a0be9b2de82c808eb4e89a217e35f55</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a05105.html</anchorfile>
      <anchor>a62810f26c828582f9c0efd7daff5052b</anchor>
      <arglist>(Node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a05105.html</anchorfile>
      <anchor>a7f3464c6f5beec2180acf9992eda01f7</anchor>
      <arglist>(Node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a05105.html</anchorfile>
      <anchor>a02eb0814a3c1a8b0aeedbe8615398427</anchor>
      <arglist>(Node) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::Digraph::Node</name>
    <filename>a05185.html</filename>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>a05185.html</anchorfile>
      <anchor>a0d313fac56abd7ebe58a17f1530b879e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>a05185.html</anchorfile>
      <anchor>a7d0d5367c2bd0ffca74029c22845c3b4</anchor>
      <arglist>(const Node &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>a05185.html</anchorfile>
      <anchor>a9a0be9b2de82c808eb4e89a217e35f55</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a05185.html</anchorfile>
      <anchor>a62810f26c828582f9c0efd7daff5052b</anchor>
      <arglist>(Node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a05185.html</anchorfile>
      <anchor>a7f3464c6f5beec2180acf9992eda01f7</anchor>
      <arglist>(Node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a05185.html</anchorfile>
      <anchor>a02eb0814a3c1a8b0aeedbe8615398427</anchor>
      <arglist>(Node) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::Graph::Node</name>
    <filename>a05225.html</filename>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>a05225.html</anchorfile>
      <anchor>a0d313fac56abd7ebe58a17f1530b879e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>a05225.html</anchorfile>
      <anchor>a7d0d5367c2bd0ffca74029c22845c3b4</anchor>
      <arglist>(const Node &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>a05225.html</anchorfile>
      <anchor>a9a0be9b2de82c808eb4e89a217e35f55</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a05225.html</anchorfile>
      <anchor>a62810f26c828582f9c0efd7daff5052b</anchor>
      <arglist>(Node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a05225.html</anchorfile>
      <anchor>a7f3464c6f5beec2180acf9992eda01f7</anchor>
      <arglist>(Node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a05225.html</anchorfile>
      <anchor>a02eb0814a3c1a8b0aeedbe8615398427</anchor>
      <arglist>(Node) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::BpGraph::NodeIt</name>
    <filename>a05125.html</filename>
    <base>lemon::concepts::BpGraph::Node</base>
    <member kind="function">
      <type></type>
      <name>NodeIt</name>
      <anchorfile>a05125.html</anchorfile>
      <anchor>a986ea351c3f6f20b80e3c6224e5495cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeIt</name>
      <anchorfile>a05125.html</anchorfile>
      <anchor>aa97d7bb0a0a6d9abf3d4da3af90e0da8</anchor>
      <arglist>(const NodeIt &amp;n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeIt</name>
      <anchorfile>a05125.html</anchorfile>
      <anchor>ae4608fb56651c0a20495054ea7ae84e0</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeIt</name>
      <anchorfile>a05125.html</anchorfile>
      <anchor>adb36a44752ca94dcaf07398c390f4769</anchor>
      <arglist>(const BpGraph &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeIt</name>
      <anchorfile>a05125.html</anchorfile>
      <anchor>af3562a2d66ff8844dc06e8031a9bd011</anchor>
      <arglist>(const BpGraph &amp;, const Node &amp;)</arglist>
    </member>
    <member kind="function">
      <type>NodeIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a05125.html</anchorfile>
      <anchor>a745151a2b1ec6f321751d9291dcd4f79</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::Digraph::NodeIt</name>
    <filename>a05189.html</filename>
    <base>lemon::concepts::Digraph::Node</base>
    <member kind="function">
      <type></type>
      <name>NodeIt</name>
      <anchorfile>a05189.html</anchorfile>
      <anchor>a986ea351c3f6f20b80e3c6224e5495cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeIt</name>
      <anchorfile>a05189.html</anchorfile>
      <anchor>aa97d7bb0a0a6d9abf3d4da3af90e0da8</anchor>
      <arglist>(const NodeIt &amp;n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeIt</name>
      <anchorfile>a05189.html</anchorfile>
      <anchor>ae4608fb56651c0a20495054ea7ae84e0</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeIt</name>
      <anchorfile>a05189.html</anchorfile>
      <anchor>a412e8e22a87fd351f1876474d1d95a18</anchor>
      <arglist>(const Digraph &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeIt</name>
      <anchorfile>a05189.html</anchorfile>
      <anchor>a09534657364bfafe0ecc987f9b1fee83</anchor>
      <arglist>(const Digraph &amp;, const Node &amp;)</arglist>
    </member>
    <member kind="function">
      <type>NodeIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a05189.html</anchorfile>
      <anchor>a745151a2b1ec6f321751d9291dcd4f79</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::Graph::NodeIt</name>
    <filename>a05229.html</filename>
    <base>lemon::concepts::Graph::Node</base>
    <member kind="function">
      <type></type>
      <name>NodeIt</name>
      <anchorfile>a05229.html</anchorfile>
      <anchor>a986ea351c3f6f20b80e3c6224e5495cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeIt</name>
      <anchorfile>a05229.html</anchorfile>
      <anchor>aa97d7bb0a0a6d9abf3d4da3af90e0da8</anchor>
      <arglist>(const NodeIt &amp;n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeIt</name>
      <anchorfile>a05229.html</anchorfile>
      <anchor>ae4608fb56651c0a20495054ea7ae84e0</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeIt</name>
      <anchorfile>a05229.html</anchorfile>
      <anchor>a805994a5236afcfc7e900e14c18efb5d</anchor>
      <arglist>(const Graph &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeIt</name>
      <anchorfile>a05229.html</anchorfile>
      <anchor>abaa980899cf9405d7b65150755e9b6d4</anchor>
      <arglist>(const Graph &amp;, const Node &amp;)</arglist>
    </member>
    <member kind="function">
      <type>NodeIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a05229.html</anchorfile>
      <anchor>a745151a2b1ec6f321751d9291dcd4f79</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::BpGraph::NodeMap</name>
    <filename>a05157.html</filename>
    <templarg></templarg>
    <base>ReferenceMap&lt; Node, T, T &amp;, const T &amp; &gt;</base>
    <member kind="function">
      <type></type>
      <name>NodeMap</name>
      <anchorfile>a05157.html</anchorfile>
      <anchor>a0746f0cbcfa631b4b484867f3bccca44</anchor>
      <arglist>(const BpGraph &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeMap</name>
      <anchorfile>a05157.html</anchorfile>
      <anchor>abb3e162549c3b3b356601f4b4f5d8821</anchor>
      <arglist>(const BpGraph &amp;, T)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>NodeMap</name>
      <anchorfile>a05157.html</anchorfile>
      <anchor>af7e39537603ab1c0ec715d2ba2f8cbba</anchor>
      <arglist>(const NodeMap &amp;nm)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>NodeMap &amp;</type>
      <name>operator=</name>
      <anchorfile>a05157.html</anchorfile>
      <anchor>a81daaa705fbe016e49b917eb22b30943</anchor>
      <arglist>(const CMap &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::MappableDigraphComponent::NodeMap</name>
    <filename>a05421.html</filename>
    <templarg></templarg>
    <base>GraphMap&lt; MappableDigraphComponent, Node, V &gt;</base>
    <member kind="function">
      <type></type>
      <name>NodeMap</name>
      <anchorfile>a05421.html</anchorfile>
      <anchor>a06da3fde50cb6440a5b753c0ac7342ac</anchor>
      <arglist>(const MappableDigraphComponent &amp;digraph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeMap</name>
      <anchorfile>a05421.html</anchorfile>
      <anchor>a7c09fb299675aff0560c6c9b7638dccb</anchor>
      <arglist>(const MappableDigraphComponent &amp;digraph, const V &amp;value)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>NodeMap</name>
      <anchorfile>a05421.html</anchorfile>
      <anchor>af7e39537603ab1c0ec715d2ba2f8cbba</anchor>
      <arglist>(const NodeMap &amp;nm)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>NodeMap &amp;</type>
      <name>operator=</name>
      <anchorfile>a05421.html</anchorfile>
      <anchor>a81daaa705fbe016e49b917eb22b30943</anchor>
      <arglist>(const CMap &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::Graph::NodeMap</name>
    <filename>a05261.html</filename>
    <templarg></templarg>
    <base>ReferenceMap&lt; Node, T, T &amp;, const T &amp; &gt;</base>
    <member kind="function">
      <type></type>
      <name>NodeMap</name>
      <anchorfile>a05261.html</anchorfile>
      <anchor>a64623b25777e859cd446774b6c314c33</anchor>
      <arglist>(const Graph &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeMap</name>
      <anchorfile>a05261.html</anchorfile>
      <anchor>aa994ef92e61070970e4df539a5b92dc9</anchor>
      <arglist>(const Graph &amp;, T)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>NodeMap</name>
      <anchorfile>a05261.html</anchorfile>
      <anchor>af7e39537603ab1c0ec715d2ba2f8cbba</anchor>
      <arglist>(const NodeMap &amp;nm)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>NodeMap &amp;</type>
      <name>operator=</name>
      <anchorfile>a05261.html</anchorfile>
      <anchor>a81daaa705fbe016e49b917eb22b30943</anchor>
      <arglist>(const CMap &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::Digraph::NodeMap</name>
    <filename>a05209.html</filename>
    <templarg></templarg>
    <base>ReferenceMap&lt; Node, T, T &amp;, const T &amp; &gt;</base>
    <member kind="function">
      <type></type>
      <name>NodeMap</name>
      <anchorfile>a05209.html</anchorfile>
      <anchor>a7eba1602f2ea7506a81e8983db6063af</anchor>
      <arglist>(const Digraph &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeMap</name>
      <anchorfile>a05209.html</anchorfile>
      <anchor>aa626b2c1f7b1dca7ef781110339eaf07</anchor>
      <arglist>(const Digraph &amp;, T)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>NodeMap</name>
      <anchorfile>a05209.html</anchorfile>
      <anchor>af7e39537603ab1c0ec715d2ba2f8cbba</anchor>
      <arglist>(const NodeMap &amp;nm)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>NodeMap &amp;</type>
      <name>operator=</name>
      <anchorfile>a05209.html</anchorfile>
      <anchor>a81daaa705fbe016e49b917eb22b30943</anchor>
      <arglist>(const CMap &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::dim2::NormSquareMap</name>
    <filename>a02421.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>NormSquareMap</name>
      <anchorfile>a02421.html</anchorfile>
      <anchor>aaddccaa22b50c9fae82ab2d0e174f027</anchor>
      <arglist>(const M &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>NormSquareMap&lt; M &gt;</type>
      <name>normSquareMap</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>ga55234f3b00cf61ed7bf2a74cfd88fbfd</anchor>
      <arglist>(const M &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::NoTimeReport</name>
    <filename>a04337.html</filename>
    <member kind="function">
      <type></type>
      <name>NoTimeReport</name>
      <anchorfile>a04337.html</anchorfile>
      <anchor>afadca87f9c0f5ac66a2e9d129b048b24</anchor>
      <arglist>(std::string, std::ostream &amp;, bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoTimeReport</name>
      <anchorfile>a04337.html</anchorfile>
      <anchor>a8b3531073f0165921962368e43e52879</anchor>
      <arglist>(std::string, std::ostream &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoTimeReport</name>
      <anchorfile>a04337.html</anchorfile>
      <anchor>abf4a0472aacec05cbce3c0ee9a6facbe</anchor>
      <arglist>(std::string)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NoTimeReport</name>
      <anchorfile>a04337.html</anchorfile>
      <anchor>ad65b9018e923edec80720246bdc0d379</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::NotMap</name>
    <filename>a03541.html</filename>
    <templarg></templarg>
    <base>MapBase&lt; M::Key, bool &gt;</base>
    <member kind="typedef">
      <type>M::Key</type>
      <name>Key</name>
      <anchorfile>a03541.html</anchorfile>
      <anchor>a8c5e944591efa8f8f0d64cf81950abcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>Value</name>
      <anchorfile>a03541.html</anchorfile>
      <anchor>aaf2b2f1e7bba19591a125e352c5d7bda</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NotMap</name>
      <anchorfile>a03541.html</anchorfile>
      <anchor>a3214b2dda6a2ef1b4df34d5e18ef9684</anchor>
      <arglist>(const M &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03541.html</anchorfile>
      <anchor>a8de1b13f44fab45faa8daa93027f9df2</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>NotMap&lt; M &gt;</type>
      <name>notMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>gac32d5dbe669fc9a75c4ab8ee12db0c12</anchor>
      <arglist>(const M &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::NotWriteMap</name>
    <filename>a03545.html</filename>
    <templarg></templarg>
    <base>MapBase&lt; M::Key, bool &gt;</base>
    <member kind="typedef">
      <type>M::Key</type>
      <name>Key</name>
      <anchorfile>a03545.html</anchorfile>
      <anchor>a8c5e944591efa8f8f0d64cf81950abcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>Value</name>
      <anchorfile>a03545.html</anchorfile>
      <anchor>aaf2b2f1e7bba19591a125e352c5d7bda</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NotWriteMap</name>
      <anchorfile>a03545.html</anchorfile>
      <anchor>ab7b3cbfe44e63462d1977bb7557260aa</anchor>
      <arglist>(M &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03545.html</anchorfile>
      <anchor>a8de1b13f44fab45faa8daa93027f9df2</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03545.html</anchorfile>
      <anchor>a01004ab61d918108487eb1fa915a1408</anchor>
      <arglist>(const Key &amp;k, bool v)</arglist>
    </member>
    <member kind="function">
      <type>NotWriteMap&lt; M &gt;</type>
      <name>notWriteMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>gac156aa2d3b004c46cd1189aa5459f6e4</anchor>
      <arglist>(M &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::NullMap</name>
    <filename>a03429.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>lemon::MapBase</base>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a03429.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a03429.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03429.html</anchorfile>
      <anchor>a2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03429.html</anchorfile>
      <anchor>a46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type>NullMap&lt; K, V &gt;</type>
      <name>nullMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gacabbe73018c55fcda9e77e4450a2742f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::Opt2Tsp</name>
    <filename>a03917.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>Cost</type>
      <name>run</name>
      <anchorfile>a03917.html</anchorfile>
      <anchor>af294138cc991668caa699c9255c8f136</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>run</name>
      <anchorfile>a03917.html</anchorfile>
      <anchor>a19dc306ee06da146b5872adadc5980a1</anchor>
      <arglist>(const Path &amp;tour)</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>run</name>
      <anchorfile>a03917.html</anchorfile>
      <anchor>af895c4f9862fefe2cba76d7edcb2f659</anchor>
      <arglist>(const std::vector&lt; Node &gt; &amp;tour)</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>tourCost</name>
      <anchorfile>a03917.html</anchorfile>
      <anchor>a5bd0e49b03ec84f7cecd696886d57140</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Node &gt; &amp;</type>
      <name>tourNodes</name>
      <anchorfile>a03917.html</anchorfile>
      <anchor>a3a84c614d8b1b1ab72deed6063a92004</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tourNodes</name>
      <anchorfile>a03917.html</anchorfile>
      <anchor>a91e89199ba4d6cad1ba3a3506c21ef6a</anchor>
      <arglist>(Iterator out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tour</name>
      <anchorfile>a03917.html</anchorfile>
      <anchor>a6b952e6a8fcc5212f789fafb24314af4</anchor>
      <arglist>(Path &amp;path) const</arglist>
    </member>
    <member kind="typedef">
      <type>CM</type>
      <name>CostMap</name>
      <anchorfile>a03917.html</anchorfile>
      <anchor>a0e4fe3b3bd126f464294f661c36a61d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CM::Value</type>
      <name>Cost</name>
      <anchorfile>a03917.html</anchorfile>
      <anchor>a1a1dfba092aeec4656ebceaf99ca8b22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Opt2Tsp</name>
      <anchorfile>a03917.html</anchorfile>
      <anchor>a599e51b10a8dbbeab4d200827ffc1d27</anchor>
      <arglist>(const FullGraph &amp;gr, const CostMap &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>run</name>
      <anchorfile>a03917.html</anchorfile>
      <anchor>af294138cc991668caa699c9255c8f136</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>run</name>
      <anchorfile>a03917.html</anchorfile>
      <anchor>a19dc306ee06da146b5872adadc5980a1</anchor>
      <arglist>(const Path &amp;tour)</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>run</name>
      <anchorfile>a03917.html</anchorfile>
      <anchor>af895c4f9862fefe2cba76d7edcb2f659</anchor>
      <arglist>(const std::vector&lt; Node &gt; &amp;tour)</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>tourCost</name>
      <anchorfile>a03917.html</anchorfile>
      <anchor>a5bd0e49b03ec84f7cecd696886d57140</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Node &gt; &amp;</type>
      <name>tourNodes</name>
      <anchorfile>a03917.html</anchorfile>
      <anchor>a3a84c614d8b1b1ab72deed6063a92004</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tourNodes</name>
      <anchorfile>a03917.html</anchorfile>
      <anchor>a91e89199ba4d6cad1ba3a3506c21ef6a</anchor>
      <arglist>(Iterator out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tour</name>
      <anchorfile>a03917.html</anchorfile>
      <anchor>a6b952e6a8fcc5212f789fafb24314af4</anchor>
      <arglist>(Path &amp;path) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::Orienter</name>
    <filename>a01553.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Graph</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>a2a51ae337b207f01f1c904f5eb2aa98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DM</type>
      <name>DirectionMap</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>a039bf501bb852a36dd281ca096295e4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Orienter</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>ab2c793dd60c1389f60cb7ac1751395ac</anchor>
      <arglist>(GR &amp;graph, DM &amp;direction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverseArc</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>a6ac584128e0ad8f56eb1e98dc6e25988</anchor>
      <arglist>(const Arc &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Orienter&lt; const GR, DM &gt;</type>
      <name>orienter</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>gaf0baa7971373781e810c9b8855cb63c6</anchor>
      <arglist>(const GR &amp;graph, DM &amp;direction)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::OrMap</name>
    <filename>a03537.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>MapBase&lt; M1::Key, bool &gt;</base>
    <member kind="typedef">
      <type>M1::Key</type>
      <name>Key</name>
      <anchorfile>a03537.html</anchorfile>
      <anchor>ac16c774bd2b82a45854c3ac66248de01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>Value</name>
      <anchorfile>a03537.html</anchorfile>
      <anchor>aaf2b2f1e7bba19591a125e352c5d7bda</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrMap</name>
      <anchorfile>a03537.html</anchorfile>
      <anchor>acb8ad38827ee87a102f1dde2bf01b5be</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03537.html</anchorfile>
      <anchor>a8de1b13f44fab45faa8daa93027f9df2</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>OrMap&lt; M1, M2 &gt;</type>
      <name>orMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga06463d7799cefda558eaec8392160529</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::BpGraph::OutArcIt</name>
    <filename>a05149.html</filename>
    <base>lemon::concepts::BpGraph::Arc</base>
    <member kind="function">
      <type></type>
      <name>OutArcIt</name>
      <anchorfile>a05149.html</anchorfile>
      <anchor>a63481864a724a2879e46fa4f4202a743</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutArcIt</name>
      <anchorfile>a05149.html</anchorfile>
      <anchor>a471d9e55da47e420563ab67c82641476</anchor>
      <arglist>(const OutArcIt &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutArcIt</name>
      <anchorfile>a05149.html</anchorfile>
      <anchor>ae66c85834955281519f2c62b2e202785</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutArcIt</name>
      <anchorfile>a05149.html</anchorfile>
      <anchor>a39051610bfedc748afc9274d0bd41f3d</anchor>
      <arglist>(const BpGraph &amp;n, const Node &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutArcIt</name>
      <anchorfile>a05149.html</anchorfile>
      <anchor>a4015a89b8560d2b0dcea6e17d798d688</anchor>
      <arglist>(const BpGraph &amp;, const Arc &amp;)</arglist>
    </member>
    <member kind="function">
      <type>OutArcIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a05149.html</anchorfile>
      <anchor>ae220200f09a52e317d02403d5d2c8a16</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::Graph::OutArcIt</name>
    <filename>a05253.html</filename>
    <base>lemon::concepts::Graph::Arc</base>
    <member kind="function">
      <type></type>
      <name>OutArcIt</name>
      <anchorfile>a05253.html</anchorfile>
      <anchor>a63481864a724a2879e46fa4f4202a743</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutArcIt</name>
      <anchorfile>a05253.html</anchorfile>
      <anchor>a471d9e55da47e420563ab67c82641476</anchor>
      <arglist>(const OutArcIt &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutArcIt</name>
      <anchorfile>a05253.html</anchorfile>
      <anchor>ae66c85834955281519f2c62b2e202785</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutArcIt</name>
      <anchorfile>a05253.html</anchorfile>
      <anchor>a00d18a0ac564c38da9fc99a1baedf14c</anchor>
      <arglist>(const Graph &amp;n, const Node &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutArcIt</name>
      <anchorfile>a05253.html</anchorfile>
      <anchor>aff32060a435b7ffe67a17a7736e9127f</anchor>
      <arglist>(const Graph &amp;, const Arc &amp;)</arglist>
    </member>
    <member kind="function">
      <type>OutArcIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a05253.html</anchorfile>
      <anchor>ae220200f09a52e317d02403d5d2c8a16</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::Digraph::OutArcIt</name>
    <filename>a05197.html</filename>
    <base>lemon::concepts::Digraph::Arc</base>
    <member kind="function">
      <type></type>
      <name>OutArcIt</name>
      <anchorfile>a05197.html</anchorfile>
      <anchor>a63481864a724a2879e46fa4f4202a743</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutArcIt</name>
      <anchorfile>a05197.html</anchorfile>
      <anchor>a471d9e55da47e420563ab67c82641476</anchor>
      <arglist>(const OutArcIt &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutArcIt</name>
      <anchorfile>a05197.html</anchorfile>
      <anchor>ae66c85834955281519f2c62b2e202785</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutArcIt</name>
      <anchorfile>a05197.html</anchorfile>
      <anchor>a2538bac8a29dcbf54eaf04617f03d2cd</anchor>
      <arglist>(const Digraph &amp;, const Node &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutArcIt</name>
      <anchorfile>a05197.html</anchorfile>
      <anchor>a32f5b45bd9852040f6de8066cfd816d7</anchor>
      <arglist>(const Digraph &amp;, const Arc &amp;)</arglist>
    </member>
    <member kind="function">
      <type>OutArcIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a05197.html</anchorfile>
      <anchor>ae220200f09a52e317d02403d5d2c8a16</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::OutDegMap</name>
    <filename>a03673.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Graph</name>
      <anchorfile>a03673.html</anchorfile>
      <anchor>a2a51ae337b207f01f1c904f5eb2aa98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::Node</type>
      <name>Key</name>
      <anchorfile>a03673.html</anchorfile>
      <anchor>a0835dd1b238d00fbb4cea5cd42df661f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Value</name>
      <anchorfile>a03673.html</anchorfile>
      <anchor>a8940a046b717a18878ab9de4ba32a0b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutDegMap</name>
      <anchorfile>a03673.html</anchorfile>
      <anchor>ac231c2cc4864b04ef7f6ba9da5b4d2a6</anchor>
      <arglist>(const Digraph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator[]</name>
      <anchorfile>a03673.html</anchorfile>
      <anchor>aef3e6b029c0ce112c64c34a44824439c</anchor>
      <arglist>(const Key &amp;key) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::PairingHeap</name>
    <filename>a03925.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumeration">
      <type></type>
      <name>State</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_HEAP</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a213759402d071be3f66f8cf86641bb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRE_HEAP</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a12f201f9d13d106e81658dad7e7c9c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POST_HEAP</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8acd215e97251c1085a8b299c068e7172d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IM</type>
      <name>ItemIntMap</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>ac00a2d6f039b6e8ffc0641530bdf5304</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PR</type>
      <name>Prio</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>a644810a55913c9e8b24511758574d6d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ItemIntMap::Key</type>
      <name>Item</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>a70025b32b600038ee2981a3deab1a783</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CMP</type>
      <name>Compare</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>a937d59343e7b08b620805162c2e52ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_HEAP</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a213759402d071be3f66f8cf86641bb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRE_HEAP</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a12f201f9d13d106e81658dad7e7c9c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POST_HEAP</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8acd215e97251c1085a8b299c068e7172d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PairingHeap</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>a35e0a0d3dae0346c0bc15e833855467d</anchor>
      <arglist>(ItemIntMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PairingHeap</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>a2463e9bc4129fd30fbee90a748d7cffa</anchor>
      <arglist>(ItemIntMap &amp;map, const Compare &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>a644718bb2fb240de962dc3c9a1fdf0dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>a2afbafcc371d28f515a05b42d1c76ac2</anchor>
      <arglist>(const Item &amp;item, const Prio &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>ab2a94f4be01dadf3bd9248a3749f1c78</anchor>
      <arglist>(const Item &amp;item, const Prio &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>top</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>a3c68736e00411448ff7acf175015cc1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Prio &amp;</type>
      <name>prio</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>ac37393276dc1d55a8990b8dd9eb40410</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Prio &amp;</type>
      <name>operator[]</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>a6646115656af82327c2b7e883071771d</anchor>
      <arglist>(const Item &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>a312e7f6c761a199c1369fbe651e084f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>ab71f9a526f9dfa9ded1fdd78189c3e37</anchor>
      <arglist>(const Item &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrease</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>a86c83bf851da9aa34fa47659abd2820b</anchor>
      <arglist>(Item item, const Prio &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increase</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>ac905557ff91bf880f50d6fff29ac9634</anchor>
      <arglist>(Item item, const Prio &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>state</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>ac849c1efcb5d7c12a1419f97d669f7cb</anchor>
      <arglist>(const Item &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>state</name>
      <anchorfile>a03925.html</anchorfile>
      <anchor>a7d0ca230d438efaad53833701d9cb262</anchor>
      <arglist>(const Item &amp;i, State st)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::Palette</name>
    <filename>a01917.html</filename>
    <base>MapBase&lt; int, Color &gt;</base>
    <member kind="function">
      <type></type>
      <name>Palette</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a0e6feeba9d414592568f3e816b62f280</anchor>
      <arglist>(bool have_white=false, int num=-1)</arglist>
    </member>
    <member kind="function">
      <type>Color &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>adabf831f19d4e9576fb5484afc4a2b4d</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const Color &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a71814d0591ff6636fb0e55031f6c02f2</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>ad4e5772fa6874dde74565b5f84a07e98</anchor>
      <arglist>(int i, const Color &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a77e076addeb00430edb72da3f9b134b0</anchor>
      <arglist>(const Color &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a4deacfe482590ac13be466b2ff5f347d</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::Path</name>
    <filename>a05573.html</filename>
    <templarg></templarg>
    <class kind="class">lemon::concepts::Path::ArcIt</class>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a05573.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::Arc</type>
      <name>Arc</name>
      <anchorfile>a05573.html</anchorfile>
      <anchor>aa8ea0a3f0dead55bd6038b930df40763</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Path</name>
      <anchorfile>a05573.html</anchorfile>
      <anchor>aaa44fef284bec9041f7eb22b921c6174</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Path</name>
      <anchorfile>a05573.html</anchorfile>
      <anchor>a2a1d39ea09b69ad40e1b13dd88d38942</anchor>
      <arglist>(const CPath &amp;cpath)</arglist>
    </member>
    <member kind="function">
      <type>Path &amp;</type>
      <name>operator=</name>
      <anchorfile>a05573.html</anchorfile>
      <anchor>aaa1e0d74e399d731d95f15cc0c29c3a3</anchor>
      <arglist>(const CPath &amp;cpath)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a05573.html</anchorfile>
      <anchor>a91213974fa3ac3959b1c355a9e588f8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a05573.html</anchorfile>
      <anchor>a644718bb2fb240de962dc3c9a1fdf0dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a05573.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::Path</name>
    <filename>a03933.html</filename>
    <templarg></templarg>
    <class kind="class">lemon::Path::ArcIt</class>
    <member kind="function">
      <type></type>
      <name>Path</name>
      <anchorfile>a03933.html</anchorfile>
      <anchor>aaa44fef284bec9041f7eb22b921c6174</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Path</name>
      <anchorfile>a03933.html</anchorfile>
      <anchor>ab208fc8a7522d2a091f70d73f46e2ae9</anchor>
      <arglist>(const Path &amp;cpath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Path</name>
      <anchorfile>a03933.html</anchorfile>
      <anchor>a2a1d39ea09b69ad40e1b13dd88d38942</anchor>
      <arglist>(const CPath &amp;cpath)</arglist>
    </member>
    <member kind="function">
      <type>Path &amp;</type>
      <name>operator=</name>
      <anchorfile>a03933.html</anchorfile>
      <anchor>afea910903e1178268f7c2aef70467d5c</anchor>
      <arglist>(const Path &amp;cpath)</arglist>
    </member>
    <member kind="function">
      <type>Path &amp;</type>
      <name>operator=</name>
      <anchorfile>a03933.html</anchorfile>
      <anchor>aaa1e0d74e399d731d95f15cc0c29c3a3</anchor>
      <arglist>(const CPath &amp;cpath)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a03933.html</anchorfile>
      <anchor>a91213974fa3ac3959b1c355a9e588f8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a03933.html</anchorfile>
      <anchor>a644718bb2fb240de962dc3c9a1fdf0dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a03933.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Arc &amp;</type>
      <name>nth</name>
      <anchorfile>a03933.html</anchorfile>
      <anchor>afc37a5f2af03aa246ccfb006e7ab9d48</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>ArcIt</type>
      <name>nthIt</name>
      <anchorfile>a03933.html</anchorfile>
      <anchor>a7a7c490cf0513671eac500a9c3db6d7b</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>const Arc &amp;</type>
      <name>front</name>
      <anchorfile>a03933.html</anchorfile>
      <anchor>a285e23e52adb15740e888caaf60f5497</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFront</name>
      <anchorfile>a03933.html</anchorfile>
      <anchor>a3c4a7c086d4884b898681043173b2152</anchor>
      <arglist>(const Arc &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseFront</name>
      <anchorfile>a03933.html</anchorfile>
      <anchor>a320672c73f9043f74530d5b2e65d5f6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Arc &amp;</type>
      <name>back</name>
      <anchorfile>a03933.html</anchorfile>
      <anchor>a6e80101a14ddf5a057be550605cf675b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBack</name>
      <anchorfile>a03933.html</anchorfile>
      <anchor>a7de8be578587027ac5fda4e89a016f4d</anchor>
      <arglist>(const Arc &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseBack</name>
      <anchorfile>a03933.html</anchorfile>
      <anchor>a8a5e7d5f5c01f29344ec6d80d3a38e4d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::PathDumper</name>
    <filename>a05593.html</filename>
    <templarg></templarg>
    <class kind="class">lemon::concepts::PathDumper::ArcIt</class>
    <class kind="class">lemon::concepts::PathDumper::RevArcIt</class>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a05593.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Digraph::Arc</type>
      <name>Arc</name>
      <anchorfile>a05593.html</anchorfile>
      <anchor>aa8ea0a3f0dead55bd6038b930df40763</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>False</type>
      <name>RevPathTag</name>
      <anchorfile>a05593.html</anchorfile>
      <anchor>a747b77ad858f28fae6dcfa1cd13c6915</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a05593.html</anchorfile>
      <anchor>a91213974fa3ac3959b1c355a9e588f8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a05593.html</anchorfile>
      <anchor>a644718bb2fb240de962dc3c9a1fdf0dc</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::PathNodeIt</name>
    <filename>a04009.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>PathNodeIt</name>
      <anchorfile>a04009.html</anchorfile>
      <anchor>acec47d873e115073fc9745d186ff012f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PathNodeIt</name>
      <anchorfile>a04009.html</anchorfile>
      <anchor>a6fb8b1bcfaec0fc9824717bf51e01acc</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PathNodeIt</name>
      <anchorfile>a04009.html</anchorfile>
      <anchor>a0885125d0105b43832ff3b92dee6ff16</anchor>
      <arglist>(const Digraph &amp;digraph, const Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PathNodeIt</name>
      <anchorfile>a04009.html</anchorfile>
      <anchor>acf9a6360e9a9397a59a790ce851e2c18</anchor>
      <arglist>(const Digraph &amp;digraph, const Path &amp;path, const Node &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Node</name>
      <anchorfile>a04009.html</anchorfile>
      <anchor>a11d0699af4659b67aae9342df58bf004</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PathNodeIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a04009.html</anchorfile>
      <anchor>aca942aedc1d9d4f5c5c2518b39dea1c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a04009.html</anchorfile>
      <anchor>a216d70b5e28622780a0fc96ebc7607d2</anchor>
      <arglist>(const PathNodeIt &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a04009.html</anchorfile>
      <anchor>af278f7dfa462a487b355056e2d794eae</anchor>
      <arglist>(const PathNodeIt &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a04009.html</anchorfile>
      <anchor>a5de0eaea5f43956484f7411fc487bf29</anchor>
      <arglist>(const PathNodeIt &amp;n) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::PlanarColoring</name>
    <filename>a04049.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Graph::template NodeMap&lt; int &gt;</type>
      <name>IndexMap</name>
      <anchorfile>a04049.html</anchorfile>
      <anchor>a6907267346218aecfb17901180e59fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ComposeMap&lt; Palette, IndexMap &gt;</type>
      <name>ColorMap</name>
      <anchorfile>a04049.html</anchorfile>
      <anchor>a617c5c71f1fe86ac4a17a7410ba0d5f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlanarColoring</name>
      <anchorfile>a04049.html</anchorfile>
      <anchor>aa3639b51b442097557465c29afdf6a00</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>IndexMap</type>
      <name>colorIndexMap</name>
      <anchorfile>a04049.html</anchorfile>
      <anchor>aa1b676e03ff270492358f953540aa4db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColorMap</type>
      <name>colorMap</name>
      <anchorfile>a04049.html</anchorfile>
      <anchor>a464f44e32ceda9bf39a2cb84793b9925</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>colorIndex</name>
      <anchorfile>a04049.html</anchorfile>
      <anchor>a4938ed17a7b8d9af65da60932386f900</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>color</name>
      <anchorfile>a04049.html</anchorfile>
      <anchor>a9bb8452c64e6f3d0b24c483e0bac90b0</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>runSixColoring</name>
      <anchorfile>a04049.html</anchorfile>
      <anchor>a9723deb9ac964200756aa2c6f63fe537</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runFiveColoring</name>
      <anchorfile>a04049.html</anchorfile>
      <anchor>a5b9bdb0fb9342ab0dbc425aa2b7d7c22</anchor>
      <arglist>(const EmbeddingMap &amp;embedding)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>runFiveColoring</name>
      <anchorfile>a04049.html</anchorfile>
      <anchor>a8acc51beaf88313c0139dc465f945bea</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::PlanarDrawing</name>
    <filename>a04041.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>dim2::Point&lt; int &gt;</type>
      <name>Point</name>
      <anchorfile>a04041.html</anchorfile>
      <anchor>ad0e38dcc5f660513182d58fef5759546</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::template NodeMap&lt; Point &gt;</type>
      <name>PointMap</name>
      <anchorfile>a04041.html</anchorfile>
      <anchor>a9d3517efcf96a24258a02e06de14d24e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlanarDrawing</name>
      <anchorfile>a04041.html</anchorfile>
      <anchor>a1dcbfde15c25c8d7afc843af77656a0b</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a04041.html</anchorfile>
      <anchor>a149ad6701e3e2414cb566bb414029841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a04041.html</anchorfile>
      <anchor>aaf8a71844d10e9cb9996617a6be3231f</anchor>
      <arglist>(const EmbeddingMap &amp;embedding)</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator[]</name>
      <anchorfile>a04041.html</anchorfile>
      <anchor>aebf38aadc4fa7a3b23fa5aaeea4c5a69</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>const PointMap &amp;</type>
      <name>coords</name>
      <anchorfile>a04041.html</anchorfile>
      <anchor>a14de0dc22a7efa117a924fb4f744cf1e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::PlanarEmbedding</name>
    <filename>a04037.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Graph::template ArcMap&lt; Arc &gt;</type>
      <name>EmbeddingMap</name>
      <anchorfile>a04037.html</anchorfile>
      <anchor>a16408eaf7e4c1a9ee5ac1371b1eb0976</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlanarEmbedding</name>
      <anchorfile>a04037.html</anchorfile>
      <anchor>ae983a6e43cc2f7ffc5f2fa6e8451cbb9</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a04037.html</anchorfile>
      <anchor>adeb98a8f0ea24546742e1b993d6732d5</anchor>
      <arglist>(bool kuratowski=true)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>next</name>
      <anchorfile>a04037.html</anchorfile>
      <anchor>a888cee44a3e9f2abd20be3c915e5697c</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>const EmbeddingMap &amp;</type>
      <name>embeddingMap</name>
      <anchorfile>a04037.html</anchorfile>
      <anchor>ab07f06c63ed6f2f9f8f2fd1d2e03b3a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>kuratowski</name>
      <anchorfile>a04037.html</anchorfile>
      <anchor>a6d508c7a7438cde389663e1aef8b20b9</anchor>
      <arglist>(const Edge &amp;edge) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::dim2::Point</name>
    <filename>a02397.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>ae08c5f0c5b4c75a3e0f33dada5f2fcba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a3162fb50e7b7cd26fe1d2800525779f3</anchor>
      <arglist>(T a, T b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a2a322a02b87eab70bf5d7d1f6e1b8842</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a5df67b48b429477de88b82ef06ec13be</anchor>
      <arglist>(int idx) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>abe96c88c6e71f75951fd3625cb5bcde7</anchor>
      <arglist>(const Point&lt; TT &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>normSquare</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>aafcf85f76335fa9d352eb4b731189c7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>ad54bef7b607263200a84b35da544902f</anchor>
      <arglist>(const Point&lt; T &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a70e2bd6a1cd9f63691426e3a59c23677</anchor>
      <arglist>(const Point&lt; T &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a5fbf8dcc45005bc420eb5d23d511c9cd</anchor>
      <arglist>(const T &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>aa790e91303048d21d3d9483d541f461c</anchor>
      <arglist>(const T &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>acdca1684db1351d7141e8f4974296dab</anchor>
      <arglist>(const Point&lt; T &gt; &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>aa9d488d9b9a9721e67d31cdfe7c4f7db</anchor>
      <arglist>(const Point&lt; T &gt; &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a516cb158b440f84140cf84a7d87d87da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>acc39fdb6910ff9c0d8dbdeff981c9430</anchor>
      <arglist>(const Point&lt; T &gt; &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a84eb3c6702764232131ddc4fc10d9626</anchor>
      <arglist>(const T &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>ac9e8882a50f6a9f2cc31156360471739</anchor>
      <arglist>(const T &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a1a14a8acc68bd19aa8b627cbce107157</anchor>
      <arglist>(const Point&lt; T &gt; &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>ac87b7ac7133b595bfc52b114f499a141</anchor>
      <arglist>(Point u) const</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>x</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a9a4f74af87a76a4c3dcb729cb0e68f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>y</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a1cb2b5ea04251d543e49356ef54eb853</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>makePoint</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>gaecc91205bbef122826613af7d8ef7c10</anchor>
      <arglist>(const T &amp;x, const T &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>ga762dc161f1356814820d95a6c3ebb394</anchor>
      <arglist>(const T &amp;u, const Point&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>ga22e95035881a7964352c5eb9b46a3ca5</anchor>
      <arglist>(std::istream &amp;is, Point&lt; T &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>ga70027f9df22e7e13aa89877de52d1064</anchor>
      <arglist>(std::ostream &amp;os, const Point&lt; T &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>rot90</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>gaf827f37672f98e93c11ea37f3fc078e3</anchor>
      <arglist>(const Point&lt; T &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>rot180</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>ga1837137f4a27eeda082094710fbb3201</anchor>
      <arglist>(const Point&lt; T &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>rot270</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>ga98212a9b188bc640993e7fdb274cd7a3</anchor>
      <arglist>(const Point&lt; T &gt; &amp;z)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Point&lt; double &gt;</name>
    <filename>a02397.html</filename>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>ae08c5f0c5b4c75a3e0f33dada5f2fcba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a3162fb50e7b7cd26fe1d2800525779f3</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>abe96c88c6e71f75951fd3625cb5bcde7</anchor>
      <arglist>(const Point&lt; TT &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a2a322a02b87eab70bf5d7d1f6e1b8842</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a5df67b48b429477de88b82ef06ec13be</anchor>
      <arglist>(int idx) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>normSquare</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>aafcf85f76335fa9d352eb4b731189c7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; double &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>ad54bef7b607263200a84b35da544902f</anchor>
      <arglist>(const Point&lt; double &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; double &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a70e2bd6a1cd9f63691426e3a59c23677</anchor>
      <arglist>(const Point&lt; double &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; double &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a5fbf8dcc45005bc420eb5d23d511c9cd</anchor>
      <arglist>(const double &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; double &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>aa790e91303048d21d3d9483d541f461c</anchor>
      <arglist>(const double &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator*</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>acdca1684db1351d7141e8f4974296dab</anchor>
      <arglist>(const Point&lt; double &gt; &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; double &gt;</type>
      <name>operator*</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a84eb3c6702764232131ddc4fc10d9626</anchor>
      <arglist>(const double &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; double &gt;</type>
      <name>operator+</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>aa9d488d9b9a9721e67d31cdfe7c4f7db</anchor>
      <arglist>(const Point&lt; double &gt; &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; double &gt;</type>
      <name>operator-</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a516cb158b440f84140cf84a7d87d87da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; double &gt;</type>
      <name>operator-</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>acc39fdb6910ff9c0d8dbdeff981c9430</anchor>
      <arglist>(const Point&lt; double &gt; &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; double &gt;</type>
      <name>operator/</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>ac9e8882a50f6a9f2cc31156360471739</anchor>
      <arglist>(const double &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a1a14a8acc68bd19aa8b627cbce107157</anchor>
      <arglist>(const Point&lt; double &gt; &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>ac87b7ac7133b595bfc52b114f499a141</anchor>
      <arglist>(Point u) const</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a9a4f74af87a76a4c3dcb729cb0e68f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a1cb2b5ea04251d543e49356ef54eb853</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Point&lt; double &gt;</type>
      <name>operator*</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>ga762dc161f1356814820d95a6c3ebb394</anchor>
      <arglist>(const double &amp;u, const Point&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; double &gt;</type>
      <name>makePoint</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>gaecc91205bbef122826613af7d8ef7c10</anchor>
      <arglist>(const double &amp;x, const double &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>ga22e95035881a7964352c5eb9b46a3ca5</anchor>
      <arglist>(std::istream &amp;is, Point&lt; double &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>ga70027f9df22e7e13aa89877de52d1064</anchor>
      <arglist>(std::ostream &amp;os, const Point&lt; double &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; double &gt;</type>
      <name>rot90</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>gaf827f37672f98e93c11ea37f3fc078e3</anchor>
      <arglist>(const Point&lt; double &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; double &gt;</type>
      <name>rot180</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>ga1837137f4a27eeda082094710fbb3201</anchor>
      <arglist>(const Point&lt; double &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; double &gt;</type>
      <name>rot270</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>ga98212a9b188bc640993e7fdb274cd7a3</anchor>
      <arglist>(const Point&lt; double &gt; &amp;z)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::PotentialDifferenceMap</name>
    <filename>a03681.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR::Arc</type>
      <name>Key</name>
      <anchorfile>a03681.html</anchorfile>
      <anchor>a1b9ec95bf71a770498c3f39011dc7584</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POT::Value</type>
      <name>Value</name>
      <anchorfile>a03681.html</anchorfile>
      <anchor>aaf7ce360ed8d2e75550a849ba1f1d6f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PotentialDifferenceMap</name>
      <anchorfile>a03681.html</anchorfile>
      <anchor>a626fe962c4c170ddc2df7c15f3e23101</anchor>
      <arglist>(const GR &amp;gr, const POT &amp;potential)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03681.html</anchorfile>
      <anchor>ab70e8ad15e551b4a3abbdb81c86db7e7</anchor>
      <arglist>(const Key &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>PotentialDifferenceMap&lt; GR, POT &gt;</type>
      <name>potentialDifferenceMap</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga1817fbea6492f6effbb2f97f1f063349</anchor>
      <arglist>(const GR &amp;gr, const POT &amp;potential)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::Preflow</name>
    <filename>a04057.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aa454c6e3c5afc6b287b892a9a7eafd65</anchor>
      <arglist>(const FlowMap &amp;flowMap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startFirstPhase</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aecbfdfd060020b8d84e202b78a345e8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startSecondPhase</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a5fce99cb4a842b1941dbfe4518a05251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runMinCut</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aba782387e4460a7c34c9227fafb53697</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flowValue</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>ad3279fc2ec83194c2bb611d9d4a33a8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a78a9b58c8fbb38efb1f99ce8009f99ec</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>minCut</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>adb2ed0e37aa5a581482ff978d90b4e8d</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minCutMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aa733020852cfccc000f117f9e7479846</anchor>
      <arglist>(CutMap &amp;cutMap) const</arglist>
    </member>
    <class kind="struct">lemon::Preflow::SetElevator</class>
    <class kind="struct">lemon::Preflow::SetFlowMap</class>
    <class kind="struct">lemon::Preflow::SetStandardElevator</class>
    <member kind="typedef">
      <type>TR</type>
      <name>Traits</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aa6928feef02be4f2a184775d19dc6373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap</type>
      <name>CapacityMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a9eeec06f304c4b0e7ec59d26ea8698a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Value</type>
      <name>Value</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a1c7478783a00413767196fd8d82ad8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::FlowMap</type>
      <name>FlowMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>acbaaf29d0c8168790ab0da45dad92c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Elevator</type>
      <name>Elevator</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a078a395cce67cc7938d85be25aa74718</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Tolerance</type>
      <name>Tolerance</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a926a96c583959d256c1316a2aca3ce22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Preflow</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>abb9534957b62032a1e5dea5e3ccad75e</anchor>
      <arglist>(const Digraph &amp;digraph, const CapacityMap &amp;capacity, Node source, Node target)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Preflow</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aae9e836f55f8d8db0bc72c67e17ef572</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Preflow &amp;</type>
      <name>capacityMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a9b7ca5903950236a26e5fa32593e505f</anchor>
      <arglist>(const CapacityMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Preflow &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a3434242e32c2a3e201e6d43638ff6177</anchor>
      <arglist>(FlowMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Preflow &amp;</type>
      <name>source</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a0d6e4c5d67ec721cbb7362f5dab94106</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>Preflow &amp;</type>
      <name>target</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a14481b7125441edac1f572b9931ec444</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>Preflow &amp;</type>
      <name>elevator</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>acc28831f6c4aef33f7c47a30bbb093cd</anchor>
      <arglist>(Elevator &amp;elevator)</arglist>
    </member>
    <member kind="function">
      <type>const Elevator &amp;</type>
      <name>elevator</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a960c4f9b0d5af901c6b37bec96f24de3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Preflow &amp;</type>
      <name>tolerance</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a967e0e131fa859a777927c55ac3ef35b</anchor>
      <arglist>(const Tolerance &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const Tolerance &amp;</type>
      <name>tolerance</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aec76cbbff18f655dd34a7020418965bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aa454c6e3c5afc6b287b892a9a7eafd65</anchor>
      <arglist>(const FlowMap &amp;flowMap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startFirstPhase</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aecbfdfd060020b8d84e202b78a345e8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startSecondPhase</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a5fce99cb4a842b1941dbfe4518a05251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runMinCut</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aba782387e4460a7c34c9227fafb53697</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flowValue</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>ad3279fc2ec83194c2bb611d9d4a33a8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a78a9b58c8fbb38efb1f99ce8009f99ec</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>minCut</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>adb2ed0e37aa5a581482ff978d90b4e8d</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minCutMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aa733020852cfccc000f117f9e7479846</anchor>
      <arglist>(CutMap &amp;cutMap) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Preflow&lt; Digraph, CapacityMap, SetElevatorTraits&lt; T &gt; &gt;</name>
    <filename>a04057.html</filename>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flowValue</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>ad3279fc2ec83194c2bb611d9d4a33a8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a78a9b58c8fbb38efb1f99ce8009f99ec</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>minCut</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>adb2ed0e37aa5a581482ff978d90b4e8d</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minCutMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aa733020852cfccc000f117f9e7479846</anchor>
      <arglist>(CutMap &amp;cutMap) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aa454c6e3c5afc6b287b892a9a7eafd65</anchor>
      <arglist>(const FlowMap &amp;flowMap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startFirstPhase</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aecbfdfd060020b8d84e202b78a345e8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startSecondPhase</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a5fce99cb4a842b1941dbfe4518a05251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runMinCut</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aba782387e4460a7c34c9227fafb53697</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>SetElevatorTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aa6928feef02be4f2a184775d19dc6373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap</type>
      <name>CapacityMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a9eeec06f304c4b0e7ec59d26ea8698a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Value</type>
      <name>Value</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a1c7478783a00413767196fd8d82ad8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::FlowMap</type>
      <name>FlowMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>acbaaf29d0c8168790ab0da45dad92c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Elevator</type>
      <name>Elevator</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a078a395cce67cc7938d85be25aa74718</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Tolerance</type>
      <name>Tolerance</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a926a96c583959d256c1316a2aca3ce22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Preflow</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>abb9534957b62032a1e5dea5e3ccad75e</anchor>
      <arglist>(const Digraph &amp;digraph, const CapacityMap &amp;capacity, Node source, Node target)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Preflow</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aae9e836f55f8d8db0bc72c67e17ef572</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Preflow &amp;</type>
      <name>capacityMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a9b7ca5903950236a26e5fa32593e505f</anchor>
      <arglist>(const CapacityMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Preflow &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a3434242e32c2a3e201e6d43638ff6177</anchor>
      <arglist>(FlowMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Preflow &amp;</type>
      <name>source</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a0d6e4c5d67ec721cbb7362f5dab94106</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>Preflow &amp;</type>
      <name>target</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a14481b7125441edac1f572b9931ec444</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>Preflow &amp;</type>
      <name>elevator</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>acc28831f6c4aef33f7c47a30bbb093cd</anchor>
      <arglist>(Elevator &amp;elevator)</arglist>
    </member>
    <member kind="function">
      <type>const Elevator &amp;</type>
      <name>elevator</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a960c4f9b0d5af901c6b37bec96f24de3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Preflow &amp;</type>
      <name>tolerance</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a967e0e131fa859a777927c55ac3ef35b</anchor>
      <arglist>(const Tolerance &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const Tolerance &amp;</type>
      <name>tolerance</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aec76cbbff18f655dd34a7020418965bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flowValue</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>ad3279fc2ec83194c2bb611d9d4a33a8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a78a9b58c8fbb38efb1f99ce8009f99ec</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>minCut</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>adb2ed0e37aa5a581482ff978d90b4e8d</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minCutMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aa733020852cfccc000f117f9e7479846</anchor>
      <arglist>(CutMap &amp;cutMap) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aa454c6e3c5afc6b287b892a9a7eafd65</anchor>
      <arglist>(const FlowMap &amp;flowMap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startFirstPhase</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aecbfdfd060020b8d84e202b78a345e8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startSecondPhase</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a5fce99cb4a842b1941dbfe4518a05251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runMinCut</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aba782387e4460a7c34c9227fafb53697</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Preflow&lt; Digraph, CapacityMap, SetFlowMapTraits&lt; T &gt; &gt;</name>
    <filename>a04057.html</filename>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flowValue</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>ad3279fc2ec83194c2bb611d9d4a33a8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a78a9b58c8fbb38efb1f99ce8009f99ec</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>minCut</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>adb2ed0e37aa5a581482ff978d90b4e8d</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minCutMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aa733020852cfccc000f117f9e7479846</anchor>
      <arglist>(CutMap &amp;cutMap) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aa454c6e3c5afc6b287b892a9a7eafd65</anchor>
      <arglist>(const FlowMap &amp;flowMap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startFirstPhase</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aecbfdfd060020b8d84e202b78a345e8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startSecondPhase</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a5fce99cb4a842b1941dbfe4518a05251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runMinCut</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aba782387e4460a7c34c9227fafb53697</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>SetFlowMapTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aa6928feef02be4f2a184775d19dc6373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap</type>
      <name>CapacityMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a9eeec06f304c4b0e7ec59d26ea8698a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Value</type>
      <name>Value</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a1c7478783a00413767196fd8d82ad8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::FlowMap</type>
      <name>FlowMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>acbaaf29d0c8168790ab0da45dad92c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Elevator</type>
      <name>Elevator</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a078a395cce67cc7938d85be25aa74718</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Tolerance</type>
      <name>Tolerance</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a926a96c583959d256c1316a2aca3ce22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Preflow</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>abb9534957b62032a1e5dea5e3ccad75e</anchor>
      <arglist>(const Digraph &amp;digraph, const CapacityMap &amp;capacity, Node source, Node target)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Preflow</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aae9e836f55f8d8db0bc72c67e17ef572</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Preflow &amp;</type>
      <name>capacityMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a9b7ca5903950236a26e5fa32593e505f</anchor>
      <arglist>(const CapacityMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Preflow &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a3434242e32c2a3e201e6d43638ff6177</anchor>
      <arglist>(FlowMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Preflow &amp;</type>
      <name>source</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a0d6e4c5d67ec721cbb7362f5dab94106</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>Preflow &amp;</type>
      <name>target</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a14481b7125441edac1f572b9931ec444</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>Preflow &amp;</type>
      <name>elevator</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>acc28831f6c4aef33f7c47a30bbb093cd</anchor>
      <arglist>(Elevator &amp;elevator)</arglist>
    </member>
    <member kind="function">
      <type>const Elevator &amp;</type>
      <name>elevator</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a960c4f9b0d5af901c6b37bec96f24de3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Preflow &amp;</type>
      <name>tolerance</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a967e0e131fa859a777927c55ac3ef35b</anchor>
      <arglist>(const Tolerance &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const Tolerance &amp;</type>
      <name>tolerance</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aec76cbbff18f655dd34a7020418965bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flowValue</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>ad3279fc2ec83194c2bb611d9d4a33a8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a78a9b58c8fbb38efb1f99ce8009f99ec</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>minCut</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>adb2ed0e37aa5a581482ff978d90b4e8d</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minCutMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aa733020852cfccc000f117f9e7479846</anchor>
      <arglist>(CutMap &amp;cutMap) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aa454c6e3c5afc6b287b892a9a7eafd65</anchor>
      <arglist>(const FlowMap &amp;flowMap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startFirstPhase</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aecbfdfd060020b8d84e202b78a345e8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startSecondPhase</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a5fce99cb4a842b1941dbfe4518a05251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runMinCut</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aba782387e4460a7c34c9227fafb53697</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Preflow&lt; Digraph, CapacityMap, SetStandardElevatorTraits&lt; T &gt; &gt;</name>
    <filename>a04057.html</filename>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flowValue</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>ad3279fc2ec83194c2bb611d9d4a33a8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a78a9b58c8fbb38efb1f99ce8009f99ec</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>minCut</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>adb2ed0e37aa5a581482ff978d90b4e8d</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minCutMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aa733020852cfccc000f117f9e7479846</anchor>
      <arglist>(CutMap &amp;cutMap) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aa454c6e3c5afc6b287b892a9a7eafd65</anchor>
      <arglist>(const FlowMap &amp;flowMap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startFirstPhase</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aecbfdfd060020b8d84e202b78a345e8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startSecondPhase</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a5fce99cb4a842b1941dbfe4518a05251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runMinCut</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aba782387e4460a7c34c9227fafb53697</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>SetStandardElevatorTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aa6928feef02be4f2a184775d19dc6373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CapacityMap</type>
      <name>CapacityMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a9eeec06f304c4b0e7ec59d26ea8698a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Value</type>
      <name>Value</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a1c7478783a00413767196fd8d82ad8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::FlowMap</type>
      <name>FlowMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>acbaaf29d0c8168790ab0da45dad92c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Elevator</type>
      <name>Elevator</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a078a395cce67cc7938d85be25aa74718</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Tolerance</type>
      <name>Tolerance</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a926a96c583959d256c1316a2aca3ce22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Preflow</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>abb9534957b62032a1e5dea5e3ccad75e</anchor>
      <arglist>(const Digraph &amp;digraph, const CapacityMap &amp;capacity, Node source, Node target)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Preflow</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aae9e836f55f8d8db0bc72c67e17ef572</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Preflow &amp;</type>
      <name>capacityMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a9b7ca5903950236a26e5fa32593e505f</anchor>
      <arglist>(const CapacityMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Preflow &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a3434242e32c2a3e201e6d43638ff6177</anchor>
      <arglist>(FlowMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Preflow &amp;</type>
      <name>source</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a0d6e4c5d67ec721cbb7362f5dab94106</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>Preflow &amp;</type>
      <name>target</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a14481b7125441edac1f572b9931ec444</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>Preflow &amp;</type>
      <name>elevator</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>acc28831f6c4aef33f7c47a30bbb093cd</anchor>
      <arglist>(Elevator &amp;elevator)</arglist>
    </member>
    <member kind="function">
      <type>const Elevator &amp;</type>
      <name>elevator</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a960c4f9b0d5af901c6b37bec96f24de3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Preflow &amp;</type>
      <name>tolerance</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a967e0e131fa859a777927c55ac3ef35b</anchor>
      <arglist>(const Tolerance &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const Tolerance &amp;</type>
      <name>tolerance</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aec76cbbff18f655dd34a7020418965bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flowValue</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>ad3279fc2ec83194c2bb611d9d4a33a8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>flow</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a78a9b58c8fbb38efb1f99ce8009f99ec</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>minCut</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>adb2ed0e37aa5a581482ff978d90b4e8d</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minCutMap</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aa733020852cfccc000f117f9e7479846</anchor>
      <arglist>(CutMap &amp;cutMap) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aa454c6e3c5afc6b287b892a9a7eafd65</anchor>
      <arglist>(const FlowMap &amp;flowMap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startFirstPhase</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aecbfdfd060020b8d84e202b78a345e8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startSecondPhase</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a5fce99cb4a842b1941dbfe4518a05251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runMinCut</name>
      <anchorfile>a04057.html</anchorfile>
      <anchor>aba782387e4460a7c34c9227fafb53697</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::PreflowDefaultTraits</name>
    <filename>a04053.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a04053.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CAP</type>
      <name>CapacityMap</name>
      <anchorfile>a04053.html</anchorfile>
      <anchor>a10f68c1f869f7e1be967acfbd9750290</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CapacityMap::Value</type>
      <name>Value</name>
      <anchorfile>a04053.html</anchorfile>
      <anchor>af751c878eda966b90fa4fdf5f1915eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GR::ArcMap&lt; Value &gt;</type>
      <name>FlowMap</name>
      <anchorfile>a04053.html</anchorfile>
      <anchor>a96d8e23f3aa7e1f5c97c91eae139de3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lemon::Elevator&lt; GR, GR::Node &gt;</type>
      <name>Elevator</name>
      <anchorfile>a04053.html</anchorfile>
      <anchor>af3390aa8ccdc072ceee447dcb2f33145</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lemon::Tolerance&lt; Value &gt;</type>
      <name>Tolerance</name>
      <anchorfile>a04053.html</anchorfile>
      <anchor>ac8d81c6484d646b8881c72707f2527d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FlowMap *</type>
      <name>createFlowMap</name>
      <anchorfile>a04053.html</anchorfile>
      <anchor>afd79e520abbe90ea86b8013071afb57b</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Elevator *</type>
      <name>createElevator</name>
      <anchorfile>a04053.html</anchorfile>
      <anchor>a899dadca634616cbf6500efbc71610e5</anchor>
      <arglist>(const Digraph &amp;digraph, int max_level)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::RadixHeap::PriorityUnderflowError</name>
    <filename>a04093.html</filename>
    <base>lemon::Exception</base>
  </compound>
  <compound kind="class">
    <name>lemon::QuadHeap</name>
    <filename>a04085.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumeration">
      <type></type>
      <name>State</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_HEAP</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a213759402d071be3f66f8cf86641bb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRE_HEAP</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a12f201f9d13d106e81658dad7e7c9c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POST_HEAP</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8acd215e97251c1085a8b299c068e7172d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IM</type>
      <name>ItemIntMap</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>ac00a2d6f039b6e8ffc0641530bdf5304</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PR</type>
      <name>Prio</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>a644810a55913c9e8b24511758574d6d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ItemIntMap::Key</type>
      <name>Item</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>a70025b32b600038ee2981a3deab1a783</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Item, Prio &gt;</type>
      <name>Pair</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>a616fe456bc4c8eddf813c4f5665e1180</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CMP</type>
      <name>Compare</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>a937d59343e7b08b620805162c2e52ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_HEAP</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a213759402d071be3f66f8cf86641bb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRE_HEAP</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a12f201f9d13d106e81658dad7e7c9c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POST_HEAP</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8acd215e97251c1085a8b299c068e7172d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuadHeap</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>a1e4789b516725925e96744e0c67a2f90</anchor>
      <arglist>(ItemIntMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuadHeap</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>a791328236563411c33eac2b983c08f19</anchor>
      <arglist>(ItemIntMap &amp;map, const Compare &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>a644718bb2fb240de962dc3c9a1fdf0dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>a5b654214309b6f25fceeec04e2b1a016</anchor>
      <arglist>(const Pair &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>ad34f576dafc84f8969e2fecd67cd3a15</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>top</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>a3c68736e00411448ff7acf175015cc1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Prio</type>
      <name>prio</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>aa453ea5d0eb1b666a14a104659ae49dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>a312e7f6c761a199c1369fbe651e084f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>a5fe7eab02681c7735ba173c879de1681</anchor>
      <arglist>(const Item &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>Prio</type>
      <name>operator[]</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>ac85c63b4ab780fbfb4b986b60dd87481</anchor>
      <arglist>(const Item &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>a35c06441ccfac0ed04762113a102e6b3</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrease</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>a301fdc87288afdebf379ae043cf66cd4</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increase</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>a958836bae38b188956bcf1345c63eac4</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>state</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>a9e18a6f6555eb8d1bc8d37c951a440f6</anchor>
      <arglist>(const Item &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>state</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>a7d0ca230d438efaad53833701d9cb262</anchor>
      <arglist>(const Item &amp;i, State st)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a04085.html</anchorfile>
      <anchor>aa3d169f66b376619ebb1825f6c027482</anchor>
      <arglist>(const Item &amp;i, const Item &amp;j)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::RadixHeap</name>
    <filename>a04089.html</filename>
    <templarg></templarg>
    <class kind="class">lemon::RadixHeap::PriorityUnderflowError</class>
    <member kind="enumeration">
      <type></type>
      <name>State</name>
      <anchorfile>a04089.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_HEAP</name>
      <anchorfile>a04089.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a213759402d071be3f66f8cf86641bb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRE_HEAP</name>
      <anchorfile>a04089.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a12f201f9d13d106e81658dad7e7c9c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POST_HEAP</name>
      <anchorfile>a04089.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8acd215e97251c1085a8b299c068e7172d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IM</type>
      <name>ItemIntMap</name>
      <anchorfile>a04089.html</anchorfile>
      <anchor>ac00a2d6f039b6e8ffc0641530bdf5304</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Prio</name>
      <anchorfile>a04089.html</anchorfile>
      <anchor>a828e2232d3e40c141ccc0aa4eb6a960e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ItemIntMap::Key</type>
      <name>Item</name>
      <anchorfile>a04089.html</anchorfile>
      <anchor>a70025b32b600038ee2981a3deab1a783</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_HEAP</name>
      <anchorfile>a04089.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a213759402d071be3f66f8cf86641bb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRE_HEAP</name>
      <anchorfile>a04089.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a12f201f9d13d106e81658dad7e7c9c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POST_HEAP</name>
      <anchorfile>a04089.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8acd215e97251c1085a8b299c068e7172d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RadixHeap</name>
      <anchorfile>a04089.html</anchorfile>
      <anchor>a3cb7922e49ab222db12ffc23800aebc0</anchor>
      <arglist>(ItemIntMap &amp;map, int minimum=0, int capacity=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a04089.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a04089.html</anchorfile>
      <anchor>a644718bb2fb240de962dc3c9a1fdf0dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a04089.html</anchorfile>
      <anchor>a84fa6f2f25e630948d098a6230ff1795</anchor>
      <arglist>(int minimum=0, int capacity=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a04089.html</anchorfile>
      <anchor>ad34f576dafc84f8969e2fecd67cd3a15</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>top</name>
      <anchorfile>a04089.html</anchorfile>
      <anchor>a3c68736e00411448ff7acf175015cc1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Prio</type>
      <name>prio</name>
      <anchorfile>a04089.html</anchorfile>
      <anchor>aa453ea5d0eb1b666a14a104659ae49dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>a04089.html</anchorfile>
      <anchor>a312e7f6c761a199c1369fbe651e084f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a04089.html</anchorfile>
      <anchor>a5fe7eab02681c7735ba173c879de1681</anchor>
      <arglist>(const Item &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>Prio</type>
      <name>operator[]</name>
      <anchorfile>a04089.html</anchorfile>
      <anchor>ac85c63b4ab780fbfb4b986b60dd87481</anchor>
      <arglist>(const Item &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a04089.html</anchorfile>
      <anchor>a35c06441ccfac0ed04762113a102e6b3</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrease</name>
      <anchorfile>a04089.html</anchorfile>
      <anchor>a301fdc87288afdebf379ae043cf66cd4</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increase</name>
      <anchorfile>a04089.html</anchorfile>
      <anchor>a958836bae38b188956bcf1345c63eac4</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>state</name>
      <anchorfile>a04089.html</anchorfile>
      <anchor>a9e18a6f6555eb8d1bc8d37c951a440f6</anchor>
      <arglist>(const Item &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>state</name>
      <anchorfile>a04089.html</anchorfile>
      <anchor>a7d0ca230d438efaad53833701d9cb262</anchor>
      <arglist>(const Item &amp;i, State st)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::Random</name>
    <filename>a04149.html</filename>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>aa0cd23a16025cfeef7b8810eeb2a5d36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a68d070cccabd77b93a742cc9bbe56572</anchor>
      <arglist>(Number seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a89d448f90181f96ca00367401cf43312</anchor>
      <arglist>(Iterator begin, Iterator end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>af1ba64a55666953d210a357ffd756bf5</anchor>
      <arglist>(const Random &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Random &amp;</type>
      <name>operator=</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>ae07ab74cd27370d349856ec4cec76636</anchor>
      <arglist>(const Random &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>ad01e178fc7f3e4641de11c534f9ac2bd</anchor>
      <arglist>(Number seed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>afc25659ce0a404ff3e737f571ff27cde</anchor>
      <arglist>(Iterator begin, Iterator end)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seed</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>ae1156b8d9e442e441de700f93387143d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seedFromFile</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a8979ee04f314da77eeb0ae6c41099f37</anchor>
      <arglist>(const std::string &amp;file=&quot;/dev/urandom&quot;, int offset=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seedFromTime</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>ad51cc770b46c582ed9c749aae3c16ff7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Number</type>
      <name>real</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a2c271bc79969bbf01cce90955106ee00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a8ba58318b0e39bc2e453dd4dcac1f00f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>af8bac0a1d7352cde11539b6eff1a9586</anchor>
      <arglist>(double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a6b23b0cb075fcf514a070e3b52a177d7</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>Number</type>
      <name>integer</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>af2d2e5834fa6c5b56a4a3a87e6d699cd</anchor>
      <arglist>(Number b)</arglist>
    </member>
    <member kind="function">
      <type>Number</type>
      <name>integer</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a46a68176640b792cecf2d70367bb4022</anchor>
      <arglist>(Number a, Number b)</arglist>
    </member>
    <member kind="function">
      <type>Number</type>
      <name>operator[]</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>afe7327546bdc51bc0e4b8cca2ed86d97</anchor>
      <arglist>(Number b)</arglist>
    </member>
    <member kind="function">
      <type>Number</type>
      <name>uinteger</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a22e78cd16badfb5f4ea22ee6aad527b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Number</type>
      <name>integer</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a3af689ffef2ff57165f69d94d1aa6c96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boolean</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a54a211ac234172119d7ee8f89cb53750</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boolean</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>af8d119e90f605fb7776372bc083e0ec7</anchor>
      <arglist>(double p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gauss</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a61ccd72f7e2d2f65912807eda4c8643c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gauss</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a56f2cac96664ba4cd0c6f4190e9982d4</anchor>
      <arglist>(double mean, double std_dev)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lognormal</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a8271908f36362e4fac31dc5e98b7ad96</anchor>
      <arglist>(double n_mean, double n_std_dev)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lognormal</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a526688ca8edd8f4bcad89c5bb89ee91b</anchor>
      <arglist>(const std::pair&lt; double, double &gt; &amp;params)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>lognormalParamsFromMD</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>abd25cd785c5560b0bd89895dfad522cd</anchor>
      <arglist>(double mean, double std_dev)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lognormalMD</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>ad2b1e1b11a298b3cbdcc9207ebeca6b2</anchor>
      <arglist>(double mean, double std_dev)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>exponential</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a09fcc5d10338daea8484d7ab76307a64</anchor>
      <arglist>(double lambda=1.0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gamma</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>afeefca159809b5989ff2916d6c23b0f6</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gamma</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>ad93f49275dfaf442e9f8104f17394b2f</anchor>
      <arglist>(double k, double theta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weibull</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>ac97b6292abddbc837251a1bcef58b3be</anchor>
      <arglist>(double k, double lambda)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pareto</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a36b13c3dbd28b5a3684b0f5393b89c43</anchor>
      <arglist>(double k, double x_min)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>poisson</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>aeef9d0d8d5af1d58208c767bd2947d9d</anchor>
      <arglist>(double lambda)</arglist>
    </member>
    <member kind="function">
      <type>dim2::Point&lt; double &gt;</type>
      <name>disc</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>abb3756a57ddd7ba851e502e7b279ba69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>dim2::Point&lt; double &gt;</type>
      <name>gauss2</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>ae3bc4202a01710ad288ed64b1e4b7cce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>dim2::Point&lt; double &gt;</type>
      <name>exponential2</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>af2fb3ecd150d233ab1eb49755e0e50db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>aa0cd23a16025cfeef7b8810eeb2a5d36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a68d070cccabd77b93a742cc9bbe56572</anchor>
      <arglist>(Number seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a89d448f90181f96ca00367401cf43312</anchor>
      <arglist>(Iterator begin, Iterator end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>af1ba64a55666953d210a357ffd756bf5</anchor>
      <arglist>(const Random &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Random &amp;</type>
      <name>operator=</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>ae07ab74cd27370d349856ec4cec76636</anchor>
      <arglist>(const Random &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>ad01e178fc7f3e4641de11c534f9ac2bd</anchor>
      <arglist>(Number seed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>afc25659ce0a404ff3e737f571ff27cde</anchor>
      <arglist>(Iterator begin, Iterator end)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seed</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>ae1156b8d9e442e441de700f93387143d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seedFromFile</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a8979ee04f314da77eeb0ae6c41099f37</anchor>
      <arglist>(const std::string &amp;file=&quot;/dev/urandom&quot;, int offset=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seedFromTime</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>ad51cc770b46c582ed9c749aae3c16ff7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Number</type>
      <name>real</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a2c271bc79969bbf01cce90955106ee00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a8ba58318b0e39bc2e453dd4dcac1f00f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>af8bac0a1d7352cde11539b6eff1a9586</anchor>
      <arglist>(double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a6b23b0cb075fcf514a070e3b52a177d7</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>Number</type>
      <name>integer</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>af2d2e5834fa6c5b56a4a3a87e6d699cd</anchor>
      <arglist>(Number b)</arglist>
    </member>
    <member kind="function">
      <type>Number</type>
      <name>integer</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a46a68176640b792cecf2d70367bb4022</anchor>
      <arglist>(Number a, Number b)</arglist>
    </member>
    <member kind="function">
      <type>Number</type>
      <name>operator[]</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>afe7327546bdc51bc0e4b8cca2ed86d97</anchor>
      <arglist>(Number b)</arglist>
    </member>
    <member kind="function">
      <type>Number</type>
      <name>uinteger</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a22e78cd16badfb5f4ea22ee6aad527b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Number</type>
      <name>integer</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a3af689ffef2ff57165f69d94d1aa6c96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boolean</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a54a211ac234172119d7ee8f89cb53750</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boolean</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>af8d119e90f605fb7776372bc083e0ec7</anchor>
      <arglist>(double p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gauss</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a61ccd72f7e2d2f65912807eda4c8643c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gauss</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a56f2cac96664ba4cd0c6f4190e9982d4</anchor>
      <arglist>(double mean, double std_dev)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lognormal</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a8271908f36362e4fac31dc5e98b7ad96</anchor>
      <arglist>(double n_mean, double n_std_dev)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lognormal</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a526688ca8edd8f4bcad89c5bb89ee91b</anchor>
      <arglist>(const std::pair&lt; double, double &gt; &amp;params)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>lognormalParamsFromMD</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>abd25cd785c5560b0bd89895dfad522cd</anchor>
      <arglist>(double mean, double std_dev)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lognormalMD</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>ad2b1e1b11a298b3cbdcc9207ebeca6b2</anchor>
      <arglist>(double mean, double std_dev)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>exponential</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a09fcc5d10338daea8484d7ab76307a64</anchor>
      <arglist>(double lambda=1.0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gamma</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>afeefca159809b5989ff2916d6c23b0f6</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gamma</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>ad93f49275dfaf442e9f8104f17394b2f</anchor>
      <arglist>(double k, double theta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weibull</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>ac97b6292abddbc837251a1bcef58b3be</anchor>
      <arglist>(double k, double lambda)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pareto</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>a36b13c3dbd28b5a3684b0f5393b89c43</anchor>
      <arglist>(double k, double x_min)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>poisson</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>aeef9d0d8d5af1d58208c767bd2947d9d</anchor>
      <arglist>(double lambda)</arglist>
    </member>
    <member kind="function">
      <type>dim2::Point&lt; double &gt;</type>
      <name>disc</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>abb3756a57ddd7ba851e502e7b279ba69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>dim2::Point&lt; double &gt;</type>
      <name>gauss2</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>ae3bc4202a01710ad288ed64b1e4b7cce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>dim2::Point&lt; double &gt;</type>
      <name>exponential2</name>
      <anchorfile>a04149.html</anchorfile>
      <anchor>af2fb3ecd150d233ab1eb49755e0e50db</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::RangeIdMap</name>
    <filename>a03589.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">lemon::RangeIdMap::InverseMap</class>
    <member kind="typedef">
      <type>GR</type>
      <name>Graph</name>
      <anchorfile>a03589.html</anchorfile>
      <anchor>a2a51ae337b207f01f1c904f5eb2aa98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>Item</name>
      <anchorfile>a03589.html</anchorfile>
      <anchor>ac4edd56c103a7549d76b3a6b5c7bdf6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a03589.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Value</name>
      <anchorfile>a03589.html</anchorfile>
      <anchor>a8940a046b717a18878ab9de4ba32a0b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RangeIdMap</name>
      <anchorfile>a03589.html</anchorfile>
      <anchor>a5186d7da8a6e71d0dd74806b043fc3a8</anchor>
      <arglist>(const Graph &amp;gr)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a03589.html</anchorfile>
      <anchor>a69622a843a8c7f05bf706cf80fad6951</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a03589.html</anchorfile>
      <anchor>af90921c6ed51125c78327455d73edb8a</anchor>
      <arglist>(const Item &amp;p, const Item &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator[]</name>
      <anchorfile>a03589.html</anchorfile>
      <anchor>a653b3c14aaa200597e665b0ae054b1a6</anchor>
      <arglist>(const Item &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>operator()</name>
      <anchorfile>a03589.html</anchorfile>
      <anchor>ae8e877c891daf9b45f24e06f66ea35d9</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>const InverseMap</type>
      <name>inverse</name>
      <anchorfile>a03589.html</anchorfile>
      <anchor>af61b3696d159355862516efbbe7a3a93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>a03589.html</anchorfile>
      <anchor>a8f19d579f2966225d0000e559d187a38</anchor>
      <arglist>(const Item &amp;item)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>a03589.html</anchorfile>
      <anchor>a26843673979cea029c22db6d5561cb37</anchor>
      <arglist>(const std::vector&lt; Item &gt; &amp;items)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>erase</name>
      <anchorfile>a03589.html</anchorfile>
      <anchor>a35bd4365da9b50a6366a56b11d5f2770</anchor>
      <arglist>(const Item &amp;item)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>erase</name>
      <anchorfile>a03589.html</anchorfile>
      <anchor>a7eb1154153f7d324cc5fdb4ca09d2684</anchor>
      <arglist>(const std::vector&lt; Item &gt; &amp;items)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>build</name>
      <anchorfile>a03589.html</anchorfile>
      <anchor>a9d887f6f043a4b7c3388ca7aba0b070c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>a03589.html</anchorfile>
      <anchor>aae048282c7011eedc2e0492f6421ea73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RangeIdMap&lt; GR, K &gt;</type>
      <name>rangeIdMap</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>gac058be03cd677659864d5ff0a240d8ca</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::RangeMap</name>
    <filename>a03449.html</filename>
    <templarg></templarg>
    <base>MapBase&lt; int, V &gt;</base>
    <member kind="typedef">
      <type>int</type>
      <name>Key</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>ac11959cb1c3b09fd9b188d07365c3031</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::reference</type>
      <name>Reference</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>aed67788dc2eb8e9e979fbbbcb89c5adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::const_reference</type>
      <name>ConstReference</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>a10a58ef4f080a86d304c7f001791b8e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RangeMap</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>a721cc8008a224e2d8ec682e70b93be33</anchor>
      <arglist>(int size=0, const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RangeMap</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>a07813b57930229a80f26ad69696ca342</anchor>
      <arglist>(const std::vector&lt; V1 &gt; &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RangeMap</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>a53f01f436ebad322e08f5774429224f0</anchor>
      <arglist>(const RangeMap&lt; V1 &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>af4b57d21919c42d55af03391f91a1c08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>af8911559a8f65e0f6cd045a549b5e29c</anchor>
      <arglist>(int size, const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>ad78f54d95302f2e1c40c9e69609d5646</anchor>
      <arglist>(const Key &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>ConstReference</type>
      <name>operator[]</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>a47334e4b93bd67b155870a7d95060b25</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>a6ac83be911521f604e18f3df0d678213</anchor>
      <arglist>(const Key &amp;k, const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RangeMap&lt; V &gt;</type>
      <name>rangeMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>ga16158762fc81f259cf1daf81d0471569</anchor>
      <arglist>(int size=0, const V &amp;value=V())</arglist>
    </member>
    <member kind="function">
      <type>RangeMap&lt; V &gt;</type>
      <name>rangeMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gab25738127ed9049a5205af0b2fdc9909</anchor>
      <arglist>(const std::vector&lt; V &gt; &amp;vector)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RangeMap&lt; BlossomData &gt;</name>
    <filename>a03449.html</filename>
    <base>MapBase&lt; int, BlossomData &gt;</base>
    <member kind="typedef">
      <type>int</type>
      <name>Key</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>ac11959cb1c3b09fd9b188d07365c3031</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BlossomData</type>
      <name>Value</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::reference</type>
      <name>Reference</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>aed67788dc2eb8e9e979fbbbcb89c5adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::const_reference</type>
      <name>ConstReference</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>a10a58ef4f080a86d304c7f001791b8e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RangeMap</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>a721cc8008a224e2d8ec682e70b93be33</anchor>
      <arglist>(int size=0, const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RangeMap</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>a07813b57930229a80f26ad69696ca342</anchor>
      <arglist>(const std::vector&lt; V1 &gt; &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RangeMap</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>a53f01f436ebad322e08f5774429224f0</anchor>
      <arglist>(const RangeMap&lt; V1 &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>af4b57d21919c42d55af03391f91a1c08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>af8911559a8f65e0f6cd045a549b5e29c</anchor>
      <arglist>(int size, const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>ad78f54d95302f2e1c40c9e69609d5646</anchor>
      <arglist>(const Key &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>ConstReference</type>
      <name>operator[]</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>a47334e4b93bd67b155870a7d95060b25</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>a6ac83be911521f604e18f3df0d678213</anchor>
      <arglist>(const Key &amp;k, const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RangeMap&lt; BlossomData &gt;</type>
      <name>rangeMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>ga16158762fc81f259cf1daf81d0471569</anchor>
      <arglist>(int size=0, const BlossomData &amp;value=BlossomData())</arglist>
    </member>
    <member kind="function">
      <type>RangeMap&lt; BlossomData &gt;</type>
      <name>rangeMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gab25738127ed9049a5205af0b2fdc9909</anchor>
      <arglist>(const std::vector&lt; BlossomData &gt; &amp;vector)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RangeMap&lt; NodeData &gt;</name>
    <filename>a03449.html</filename>
    <base>MapBase&lt; int, NodeData &gt;</base>
    <member kind="typedef">
      <type>int</type>
      <name>Key</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>ac11959cb1c3b09fd9b188d07365c3031</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NodeData</type>
      <name>Value</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::reference</type>
      <name>Reference</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>aed67788dc2eb8e9e979fbbbcb89c5adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::const_reference</type>
      <name>ConstReference</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>a10a58ef4f080a86d304c7f001791b8e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RangeMap</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>a721cc8008a224e2d8ec682e70b93be33</anchor>
      <arglist>(int size=0, const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RangeMap</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>a07813b57930229a80f26ad69696ca342</anchor>
      <arglist>(const std::vector&lt; V1 &gt; &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RangeMap</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>a53f01f436ebad322e08f5774429224f0</anchor>
      <arglist>(const RangeMap&lt; V1 &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>af4b57d21919c42d55af03391f91a1c08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>af8911559a8f65e0f6cd045a549b5e29c</anchor>
      <arglist>(int size, const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>ad78f54d95302f2e1c40c9e69609d5646</anchor>
      <arglist>(const Key &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>ConstReference</type>
      <name>operator[]</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>a47334e4b93bd67b155870a7d95060b25</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03449.html</anchorfile>
      <anchor>a6ac83be911521f604e18f3df0d678213</anchor>
      <arglist>(const Key &amp;k, const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RangeMap&lt; NodeData &gt;</type>
      <name>rangeMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>ga16158762fc81f259cf1daf81d0471569</anchor>
      <arglist>(int size=0, const NodeData &amp;value=NodeData())</arglist>
    </member>
    <member kind="function">
      <type>RangeMap&lt; NodeData &gt;</type>
      <name>rangeMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gab25738127ed9049a5205af0b2fdc9909</anchor>
      <arglist>(const std::vector&lt; NodeData &gt; &amp;vector)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::ReadMap</name>
    <filename>a05541.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReadMap&lt; Arc, T &gt;</name>
    <filename>a05541.html</filename>
    <member kind="typedef">
      <type>Arc</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReadMap&lt; Arc, V &gt;</name>
    <filename>a05541.html</filename>
    <member kind="typedef">
      <type>Arc</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReadMap&lt; Edge, T &gt;</name>
    <filename>a05541.html</filename>
    <member kind="typedef">
      <type>Edge</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReadMap&lt; Edge, V &gt;</name>
    <filename>a05541.html</filename>
    <member kind="typedef">
      <type>Edge</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReadMap&lt; K, V &gt;</name>
    <filename>a05541.html</filename>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReadMap&lt; Node, T &gt;</name>
    <filename>a05541.html</filename>
    <member kind="typedef">
      <type>Node</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReadMap&lt; Node, V &gt;</name>
    <filename>a05541.html</filename>
    <member kind="typedef">
      <type>Node</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::ReadWriteMap</name>
    <filename>a05557.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>lemon::concepts::ReadMap</base>
    <base>lemon::concepts::WriteMap</base>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReadWriteMap&lt; Arc, T &gt;</name>
    <filename>a05557.html</filename>
    <base>ReadMap&lt; Arc, T &gt;</base>
    <base>WriteMap&lt; Arc, T &gt;</base>
    <member kind="typedef">
      <type>Arc</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReadWriteMap&lt; Arc, V &gt;</name>
    <filename>a05557.html</filename>
    <base>ReadMap&lt; Arc, V &gt;</base>
    <base>WriteMap&lt; Arc, V &gt;</base>
    <member kind="typedef">
      <type>Arc</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReadWriteMap&lt; Edge, T &gt;</name>
    <filename>a05557.html</filename>
    <base>ReadMap&lt; Edge, T &gt;</base>
    <base>WriteMap&lt; Edge, T &gt;</base>
    <member kind="typedef">
      <type>Edge</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReadWriteMap&lt; Edge, V &gt;</name>
    <filename>a05557.html</filename>
    <base>ReadMap&lt; Edge, V &gt;</base>
    <base>WriteMap&lt; Edge, V &gt;</base>
    <member kind="typedef">
      <type>Edge</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReadWriteMap&lt; K, V &gt;</name>
    <filename>a05557.html</filename>
    <base>ReadMap&lt; K, V &gt;</base>
    <base>WriteMap&lt; K, V &gt;</base>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReadWriteMap&lt; Node, T &gt;</name>
    <filename>a05557.html</filename>
    <base>ReadMap&lt; Node, T &gt;</base>
    <base>WriteMap&lt; Node, T &gt;</base>
    <member kind="typedef">
      <type>Node</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReadWriteMap&lt; Node, V &gt;</name>
    <filename>a05557.html</filename>
    <base>ReadMap&lt; Node, V &gt;</base>
    <base>WriteMap&lt; Node, V &gt;</base>
    <member kind="typedef">
      <type>Node</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::BpGraph::RedNode</name>
    <filename>a05109.html</filename>
    <base>lemon::concepts::BpGraph::Node</base>
    <member kind="function">
      <type></type>
      <name>RedNode</name>
      <anchorfile>a05109.html</anchorfile>
      <anchor>a1d0c5663720a96de3baf8ca6d5ce638b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RedNode</name>
      <anchorfile>a05109.html</anchorfile>
      <anchor>ac21af2773baf1ddd44e984afae41851b</anchor>
      <arglist>(const RedNode &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RedNode</name>
      <anchorfile>a05109.html</anchorfile>
      <anchor>a092deee1bb02e7ee44b4d7426342e14b</anchor>
      <arglist>(Invalid)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::BaseBpGraphComponent::RedNode</name>
    <filename>a05309.html</filename>
    <base>lemon::concepts::GraphItem</base>
    <member kind="function">
      <type></type>
      <name>RedNode</name>
      <anchorfile>a05309.html</anchorfile>
      <anchor>a1d0c5663720a96de3baf8ca6d5ce638b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RedNode</name>
      <anchorfile>a05309.html</anchorfile>
      <anchor>ac21af2773baf1ddd44e984afae41851b</anchor>
      <arglist>(const RedNode &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RedNode</name>
      <anchorfile>a05309.html</anchorfile>
      <anchor>a092deee1bb02e7ee44b4d7426342e14b</anchor>
      <arglist>(Invalid)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::BpGraph::RedNodeIt</name>
    <filename>a05117.html</filename>
    <base>lemon::concepts::BpGraph::RedNode</base>
    <member kind="function">
      <type></type>
      <name>RedNodeIt</name>
      <anchorfile>a05117.html</anchorfile>
      <anchor>aa69a1a66ca5c8a5c2adb6aeb3884dc58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RedNodeIt</name>
      <anchorfile>a05117.html</anchorfile>
      <anchor>a16989697d8b8bafe9d225b5ad18c1be3</anchor>
      <arglist>(const RedNodeIt &amp;n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RedNodeIt</name>
      <anchorfile>a05117.html</anchorfile>
      <anchor>a670336c3cf59f324d0de859a3864d9ba</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RedNodeIt</name>
      <anchorfile>a05117.html</anchorfile>
      <anchor>ab4875bdd3f3d4a620433012ece168a38</anchor>
      <arglist>(const BpGraph &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RedNodeIt</name>
      <anchorfile>a05117.html</anchorfile>
      <anchor>a43f44ebf951b6858ddcba2341b7bbccb</anchor>
      <arglist>(const BpGraph &amp;, const RedNode &amp;)</arglist>
    </member>
    <member kind="function">
      <type>RedNodeIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a05117.html</anchorfile>
      <anchor>ad7659a37205d5cd4f68c17be6f6d0601</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::MappableBpGraphComponent::RedNodeMap</name>
    <filename>a05457.html</filename>
    <templarg></templarg>
    <base>GraphMap&lt; MappableBpGraphComponent, Node, V &gt;</base>
    <member kind="function">
      <type></type>
      <name>RedNodeMap</name>
      <anchorfile>a05457.html</anchorfile>
      <anchor>ad2f0ddefd007eb6f8a4f970f98b46c90</anchor>
      <arglist>(const MappableBpGraphComponent &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RedNodeMap</name>
      <anchorfile>a05457.html</anchorfile>
      <anchor>ad904741297ac581a0136f84b01689c94</anchor>
      <arglist>(const MappableBpGraphComponent &amp;graph, const V &amp;value)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>RedNodeMap</name>
      <anchorfile>a05457.html</anchorfile>
      <anchor>ae97bfb1f9a1fa057232d0caa3a944738</anchor>
      <arglist>(const RedNodeMap &amp;nm)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>RedNodeMap &amp;</type>
      <name>operator=</name>
      <anchorfile>a05457.html</anchorfile>
      <anchor>a570a17752aff01c7a48344eff04caecd</anchor>
      <arglist>(const CMap &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::BpGraph::RedNodeMap</name>
    <filename>a05161.html</filename>
    <templarg></templarg>
    <base>ReferenceMap&lt; Node, T, T &amp;, const T &amp; &gt;</base>
    <member kind="function">
      <type></type>
      <name>RedNodeMap</name>
      <anchorfile>a05161.html</anchorfile>
      <anchor>a92a56bab87b556b8819534a304b214ce</anchor>
      <arglist>(const BpGraph &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RedNodeMap</name>
      <anchorfile>a05161.html</anchorfile>
      <anchor>a5be4a2192f1042f4f93a911b820158a2</anchor>
      <arglist>(const BpGraph &amp;, T)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>RedNodeMap</name>
      <anchorfile>a05161.html</anchorfile>
      <anchor>ae97bfb1f9a1fa057232d0caa3a944738</anchor>
      <arglist>(const RedNodeMap &amp;nm)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>RedNodeMap &amp;</type>
      <name>operator=</name>
      <anchorfile>a05161.html</anchorfile>
      <anchor>a570a17752aff01c7a48344eff04caecd</anchor>
      <arglist>(const CMap &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::IterableIntMap::Reference</name>
    <filename>a03625.html</filename>
  </compound>
  <compound kind="class">
    <name>lemon::IterableBoolMap::Reference</name>
    <filename>a03601.html</filename>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::ReferenceMap</name>
    <filename>a05565.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>lemon::concepts::ReadWriteMap</base>
    <member kind="typedef">
      <type>True</type>
      <name>ReferenceMapTag</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga804d338ca2e0e71ef0572ec61ddefffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>Reference</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga6e8175a8d0f7ccdbabe88aea29e38777</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CR</type>
      <name>ConstReference</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>gaaaf1f16bcbee97f0cb6727e10901222b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga3fdb5b25c67b183083ebd86dba491e50</anchor>
      <arglist>(const Key &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ConstReference</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga684549455562e7ec9cf54817a68387d4</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga1eb01f50386db49765cdf4edbe951369</anchor>
      <arglist>(const Key &amp;k, const Value &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReferenceMap&lt; Arc, T, T &amp;, const T &amp; &gt;</name>
    <filename>a05565.html</filename>
    <base>ReadWriteMap&lt; Arc, T &gt;</base>
    <member kind="typedef">
      <type>True</type>
      <name>ReferenceMapTag</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga804d338ca2e0e71ef0572ec61ddefffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Arc</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>Reference</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga6e8175a8d0f7ccdbabe88aea29e38777</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>ConstReference</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>gaaaf1f16bcbee97f0cb6727e10901222b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga3fdb5b25c67b183083ebd86dba491e50</anchor>
      <arglist>(const Key &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ConstReference</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga684549455562e7ec9cf54817a68387d4</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga1eb01f50386db49765cdf4edbe951369</anchor>
      <arglist>(const Key &amp;k, const Value &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReferenceMap&lt; Arc, V, V &amp;, const V &amp; &gt;</name>
    <filename>a05565.html</filename>
    <base>ReadWriteMap&lt; Arc, V &gt;</base>
    <member kind="typedef">
      <type>True</type>
      <name>ReferenceMapTag</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga804d338ca2e0e71ef0572ec61ddefffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Arc</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V &amp;</type>
      <name>Reference</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga6e8175a8d0f7ccdbabe88aea29e38777</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const V &amp;</type>
      <name>ConstReference</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>gaaaf1f16bcbee97f0cb6727e10901222b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga3fdb5b25c67b183083ebd86dba491e50</anchor>
      <arglist>(const Key &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ConstReference</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga684549455562e7ec9cf54817a68387d4</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga1eb01f50386db49765cdf4edbe951369</anchor>
      <arglist>(const Key &amp;k, const Value &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReferenceMap&lt; Edge, T, T &amp;, const T &amp; &gt;</name>
    <filename>a05565.html</filename>
    <base>ReadWriteMap&lt; Edge, T &gt;</base>
    <member kind="typedef">
      <type>True</type>
      <name>ReferenceMapTag</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga804d338ca2e0e71ef0572ec61ddefffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Edge</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>Reference</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga6e8175a8d0f7ccdbabe88aea29e38777</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>ConstReference</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>gaaaf1f16bcbee97f0cb6727e10901222b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga3fdb5b25c67b183083ebd86dba491e50</anchor>
      <arglist>(const Key &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ConstReference</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga684549455562e7ec9cf54817a68387d4</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga1eb01f50386db49765cdf4edbe951369</anchor>
      <arglist>(const Key &amp;k, const Value &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReferenceMap&lt; Edge, V, V &amp;, const V &amp; &gt;</name>
    <filename>a05565.html</filename>
    <base>ReadWriteMap&lt; Edge, V &gt;</base>
    <member kind="typedef">
      <type>True</type>
      <name>ReferenceMapTag</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga804d338ca2e0e71ef0572ec61ddefffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Edge</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V &amp;</type>
      <name>Reference</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga6e8175a8d0f7ccdbabe88aea29e38777</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const V &amp;</type>
      <name>ConstReference</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>gaaaf1f16bcbee97f0cb6727e10901222b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga3fdb5b25c67b183083ebd86dba491e50</anchor>
      <arglist>(const Key &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ConstReference</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga684549455562e7ec9cf54817a68387d4</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga1eb01f50386db49765cdf4edbe951369</anchor>
      <arglist>(const Key &amp;k, const Value &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReferenceMap&lt; K, V, V &amp;, const V &amp; &gt;</name>
    <filename>a05565.html</filename>
    <base>ReadWriteMap&lt; K, V &gt;</base>
    <member kind="typedef">
      <type>True</type>
      <name>ReferenceMapTag</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga804d338ca2e0e71ef0572ec61ddefffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V &amp;</type>
      <name>Reference</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga6e8175a8d0f7ccdbabe88aea29e38777</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const V &amp;</type>
      <name>ConstReference</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>gaaaf1f16bcbee97f0cb6727e10901222b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga3fdb5b25c67b183083ebd86dba491e50</anchor>
      <arglist>(const Key &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ConstReference</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga684549455562e7ec9cf54817a68387d4</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga1eb01f50386db49765cdf4edbe951369</anchor>
      <arglist>(const Key &amp;k, const Value &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReferenceMap&lt; Node, T, T &amp;, const T &amp; &gt;</name>
    <filename>a05565.html</filename>
    <base>ReadWriteMap&lt; Node, T &gt;</base>
    <member kind="typedef">
      <type>True</type>
      <name>ReferenceMapTag</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga804d338ca2e0e71ef0572ec61ddefffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Node</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>Reference</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga6e8175a8d0f7ccdbabe88aea29e38777</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>ConstReference</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>gaaaf1f16bcbee97f0cb6727e10901222b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga3fdb5b25c67b183083ebd86dba491e50</anchor>
      <arglist>(const Key &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ConstReference</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga684549455562e7ec9cf54817a68387d4</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga1eb01f50386db49765cdf4edbe951369</anchor>
      <arglist>(const Key &amp;k, const Value &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReferenceMap&lt; Node, V, V &amp;, const V &amp; &gt;</name>
    <filename>a05565.html</filename>
    <base>ReadWriteMap&lt; Node, V &gt;</base>
    <member kind="typedef">
      <type>True</type>
      <name>ReferenceMapTag</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga804d338ca2e0e71ef0572ec61ddefffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Node</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V &amp;</type>
      <name>Reference</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga6e8175a8d0f7ccdbabe88aea29e38777</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const V &amp;</type>
      <name>ConstReference</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>gaaaf1f16bcbee97f0cb6727e10901222b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga3fdb5b25c67b183083ebd86dba491e50</anchor>
      <arglist>(const Key &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ConstReference</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga684549455562e7ec9cf54817a68387d4</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga1eb01f50386db49765cdf4edbe951369</anchor>
      <arglist>(const Key &amp;k, const Value &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ArgParser::RefType</name>
    <filename>a01641.html</filename>
    <member kind="function">
      <type></type>
      <name>RefType</name>
      <anchorfile>a01641.html</anchorfile>
      <anchor>a6cda207aa9b4110a1469a62e2e50b88b</anchor>
      <arglist>(const ArgParser &amp;p, const std::string &amp;n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a01641.html</anchorfile>
      <anchor>a9b3baad8c612d81b96e46f84d7e97580</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>a01641.html</anchorfile>
      <anchor>aec21c2daaac19676aa46134f63b471c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>a01641.html</anchorfile>
      <anchor>aabab268504345fcb036094bc7b5c4438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>a01641.html</anchorfile>
      <anchor>a4f4ea421e40bda08a2deca657f640fea</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ResidualDigraph::ResidualCapacity</name>
    <filename>a01569.html</filename>
    <member kind="typedef">
      <type>Arc</type>
      <name>Key</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a49324d309ab1fbcdfd1e07ecc5f48b39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CapacityMap::Value</type>
      <name>Value</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>af751c878eda966b90fa4fdf5f1915eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResidualCapacity</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>aa18fb5b24fd7da1fa4f38406019f16ca</anchor>
      <arglist>(const ResidualDigraph&lt; DGR, CM, FM, TL &gt; &amp;adaptor)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>aa9e534b5f9beb2209a62d576d5b0d529</anchor>
      <arglist>(const Arc &amp;a) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ResidualDigraph</name>
    <filename>a01565.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">lemon::ResidualDigraph::ResidualCapacity</class>
    <member kind="typedef">
      <type>DGR</type>
      <name>Digraph</name>
      <anchorfile>a01565.html</anchorfile>
      <anchor>a6435ad6a242e3d323a0dfffd053d9584</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CM</type>
      <name>CapacityMap</name>
      <anchorfile>a01565.html</anchorfile>
      <anchor>aa445690c7204e6db4ddd20f5e865098b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FM</type>
      <name>FlowMap</name>
      <anchorfile>a01565.html</anchorfile>
      <anchor>a2939a0a237c77039e7d80faa9eec9ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TL</type>
      <name>Tolerance</name>
      <anchorfile>a01565.html</anchorfile>
      <anchor>a5baae3db2e79c32027a17896b1204403</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResidualDigraph</name>
      <anchorfile>a01565.html</anchorfile>
      <anchor>aa70d15d1d33bf517fd1181d5320b2ec8</anchor>
      <arglist>(const DGR &amp;digraph, const CM &amp;capacity, FM &amp;flow, const TL &amp;tolerance=Tolerance())</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>residualCapacity</name>
      <anchorfile>a01565.html</anchorfile>
      <anchor>aa479969fccb0cb566380e01eddde1485</anchor>
      <arglist>(const Arc &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>augment</name>
      <anchorfile>a01565.html</anchorfile>
      <anchor>a57adbe495527a64f10d907d53cec4575</anchor>
      <arglist>(const Arc &amp;a, const Value &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>ResidualCapacity</type>
      <name>residualCapacity</name>
      <anchorfile>a01565.html</anchorfile>
      <anchor>a25d5cb520098cf0da9711a083fd42860</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>forward</name>
      <anchorfile>a01565.html</anchorfile>
      <anchor>a7e6872f27247ac469eca9bbec6faa4b9</anchor>
      <arglist>(const Arc &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>backward</name>
      <anchorfile>a01565.html</anchorfile>
      <anchor>afd7c3914c21d626a6bcb348ca1d158ef</anchor>
      <arglist>(const Arc &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Arc</type>
      <name>forward</name>
      <anchorfile>a01565.html</anchorfile>
      <anchor>a05a82dec247b71ac0a5b42b9f8581f39</anchor>
      <arglist>(const typename Digraph::Arc &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Arc</type>
      <name>backward</name>
      <anchorfile>a01565.html</anchorfile>
      <anchor>a434f8ac6881d17f56a29ae0053466bd9</anchor>
      <arglist>(const typename Digraph::Arc &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>ResidualDigraph&lt; DGR, CM, FM &gt;</type>
      <name>residualDigraph</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>ga16137e105dd234d7e29ff30aebb01a21</anchor>
      <arglist>(const DGR &amp;digraph, const CM &amp;capacity_map, FM &amp;flow_map)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::PathDumper::RevArcIt</name>
    <filename>a05601.html</filename>
    <member kind="function">
      <type></type>
      <name>RevArcIt</name>
      <anchorfile>a05601.html</anchorfile>
      <anchor>ac46e3052081d5657ff0e7526db165bc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RevArcIt</name>
      <anchorfile>a05601.html</anchorfile>
      <anchor>ac677c8e5033a8b0125f6a7c2e1c6d2c5</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RevArcIt</name>
      <anchorfile>a05601.html</anchorfile>
      <anchor>a8d8d20e4a92c9539aae154d524518a2e</anchor>
      <arglist>(const PathDumper &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Arc</name>
      <anchorfile>a05601.html</anchorfile>
      <anchor>a435e7990d5f173e02eda8dcb1be99bf4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RevArcIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a05601.html</anchorfile>
      <anchor>a63bf133c4b11c93307d474be1d880835</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a05601.html</anchorfile>
      <anchor>af275032c98c2d908287919a1b744a3ba</anchor>
      <arglist>(const RevArcIt &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a05601.html</anchorfile>
      <anchor>a3cc43310e6d86d2734aeef1a728bfe63</anchor>
      <arglist>(const RevArcIt &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a05601.html</anchorfile>
      <anchor>a2ca362136796bf5dc36313fa143d5a98</anchor>
      <arglist>(const RevArcIt &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ReverseDigraph</name>
    <filename>a01425.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>DGR</type>
      <name>Digraph</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6435ad6a242e3d323a0dfffd053d9584</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReverseDigraph</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1c19d8f05c205125bfc52b57d9115483</anchor>
      <arglist>(DGR &amp;digraph)</arglist>
    </member>
    <member kind="function">
      <type>ReverseDigraph&lt; const DGR &gt;</type>
      <name>reverseDigraph</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>ga79c1b665b375986e20577c316a2abd64</anchor>
      <arglist>(const DGR &amp;digraph)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::LpBase::Row</name>
    <filename>a03353.html</filename>
    <member kind="function">
      <type></type>
      <name>Row</name>
      <anchorfile>a03353.html</anchorfile>
      <anchor>abe1b058f05829f61c8f6615f83e2b7ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Row</name>
      <anchorfile>a03353.html</anchorfile>
      <anchor>aafee000c5e8b9efb815aded749b2ed28</anchor>
      <arglist>(const Invalid &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a03353.html</anchorfile>
      <anchor>afc0e5adec75a077ae6f3c94da9a369aa</anchor>
      <arglist>(Row r) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a03353.html</anchorfile>
      <anchor>a00866a2d53263dbf7f98e4b44b0e0555</anchor>
      <arglist>(Row r) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a03353.html</anchorfile>
      <anchor>a8a7292fb5e3320cc04d405a35dd0e87c</anchor>
      <arglist>(Row r) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::LpBase::RowIt</name>
    <filename>a03357.html</filename>
    <base>lemon::LpBase::Row</base>
    <member kind="function">
      <type></type>
      <name>RowIt</name>
      <anchorfile>a03357.html</anchorfile>
      <anchor>aa63559ada5687aa42b7db278d5c9bc36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowIt</name>
      <anchorfile>a03357.html</anchorfile>
      <anchor>a764ebc325a013cf3a42b5633990c1f69</anchor>
      <arglist>(const LpBase &amp;solver)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowIt</name>
      <anchorfile>a03357.html</anchorfile>
      <anchor>a3e23648dfcbb187c8609760fff95075c</anchor>
      <arglist>(const Invalid &amp;)</arglist>
    </member>
    <member kind="function">
      <type>RowIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a03357.html</anchorfile>
      <anchor>ad30aa1e690e8ca3e0dfcb0c0273e0b39</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::GridGraph::RowMap</name>
    <filename>a02825.html</filename>
    <member kind="typedef">
      <type>GridGraph::Node</type>
      <name>Key</name>
      <anchorfile>a02825.html</anchorfile>
      <anchor>a89610f8cffa34a4715c0730e05cb8751</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Value</name>
      <anchorfile>a02825.html</anchorfile>
      <anchor>a8940a046b717a18878ab9de4ba32a0b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowMap</name>
      <anchorfile>a02825.html</anchorfile>
      <anchor>a065a8779432e06c7faa1e2524fed51e1</anchor>
      <arglist>(const GridGraph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a02825.html</anchorfile>
      <anchor>a6bb5cd098260055648dc5219c8190b4b</anchor>
      <arglist>(Key key) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ScaleMap</name>
    <filename>a03505.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>MapBase&lt; M::Key, M::Value &gt;</base>
    <member kind="typedef">
      <type>M::Key</type>
      <name>Key</name>
      <anchorfile>a03505.html</anchorfile>
      <anchor>a8c5e944591efa8f8f0d64cf81950abcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M::Value</type>
      <name>Value</name>
      <anchorfile>a03505.html</anchorfile>
      <anchor>a7054917e50868b3b4c3d0899fc4b422e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScaleMap</name>
      <anchorfile>a03505.html</anchorfile>
      <anchor>a0b6202055fa4ee5ac6c956e9a35e4046</anchor>
      <arglist>(const M &amp;m, const C &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03505.html</anchorfile>
      <anchor>a8de1b13f44fab45faa8daa93027f9df2</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>ScaleMap&lt; M, C &gt;</type>
      <name>scaleMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga7ce03f4c101f1297901c5ce840543006</anchor>
      <arglist>(const M &amp;m, const C &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ScaleWriteMap</name>
    <filename>a03509.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>MapBase&lt; M::Key, M::Value &gt;</base>
    <member kind="typedef">
      <type>M::Key</type>
      <name>Key</name>
      <anchorfile>a03509.html</anchorfile>
      <anchor>a8c5e944591efa8f8f0d64cf81950abcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M::Value</type>
      <name>Value</name>
      <anchorfile>a03509.html</anchorfile>
      <anchor>a7054917e50868b3b4c3d0899fc4b422e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScaleWriteMap</name>
      <anchorfile>a03509.html</anchorfile>
      <anchor>a2834c89c1978860c3e99cd810af8e83e</anchor>
      <arglist>(M &amp;m, const C &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03509.html</anchorfile>
      <anchor>a8de1b13f44fab45faa8daa93027f9df2</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03509.html</anchorfile>
      <anchor>a6ac83be911521f604e18f3df0d678213</anchor>
      <arglist>(const Key &amp;k, const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ScaleWriteMap&lt; M, C &gt;</type>
      <name>scaleWriteMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga7e7cd505ab3725fdf5785746544eea66</anchor>
      <arglist>(M &amp;m, const C &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::SectionReader</name>
    <filename>a03137.html</filename>
    <member kind="function">
      <type>SectionReader &amp;</type>
      <name>sectionLines</name>
      <anchorfile>a03137.html</anchorfile>
      <anchor>a75de482c5db00c94c7ced5cbfb5fa4da</anchor>
      <arglist>(const std::string &amp;type, Functor functor)</arglist>
    </member>
    <member kind="function">
      <type>SectionReader &amp;</type>
      <name>sectionStream</name>
      <anchorfile>a03137.html</anchorfile>
      <anchor>a00ba764e5d7b9d62e4db6c96ec43684a</anchor>
      <arglist>(const std::string &amp;type, Functor functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03137.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SectionReader</name>
      <anchorfile>a03137.html</anchorfile>
      <anchor>ad2864b0251911b45ddb7198c16480b5b</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SectionReader</name>
      <anchorfile>a03137.html</anchorfile>
      <anchor>a010d719af4f7dee3d1fb4b94189fec28</anchor>
      <arglist>(const std::string &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SectionReader</name>
      <anchorfile>a03137.html</anchorfile>
      <anchor>a497d304493c028916e5e0c2439d5aadf</anchor>
      <arglist>(const char *fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SectionReader</name>
      <anchorfile>a03137.html</anchorfile>
      <anchor>a06ff4579ab6965f6e6bc29ad7ed3fb8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SectionReader &amp;</type>
      <name>sectionLines</name>
      <anchorfile>a03137.html</anchorfile>
      <anchor>a75de482c5db00c94c7ced5cbfb5fa4da</anchor>
      <arglist>(const std::string &amp;type, Functor functor)</arglist>
    </member>
    <member kind="function">
      <type>SectionReader &amp;</type>
      <name>sectionStream</name>
      <anchorfile>a03137.html</anchorfile>
      <anchor>a00ba764e5d7b9d62e4db6c96ec43684a</anchor>
      <arglist>(const std::string &amp;type, Functor functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03137.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SectionReader</type>
      <name>sectionReader</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>ga919ce27a20ac3228c90a85310a64fa4c</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>SectionReader</type>
      <name>sectionReader</name>
      <anchorfile>a03137.html</anchorfile>
      <anchor>adeb72981c0553e45dd6b5bc63e9c23e8</anchor>
      <arglist>(const std::string &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type>SectionReader</type>
      <name>sectionReader</name>
      <anchorfile>a03137.html</anchorfile>
      <anchor>a1375da7ad660a4fc871bd6ffab94a5d9</anchor>
      <arglist>(const char *fn)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::SectionWriter</name>
    <filename>a03213.html</filename>
    <member kind="function">
      <type>SectionWriter &amp;</type>
      <name>sectionLines</name>
      <anchorfile>a03213.html</anchorfile>
      <anchor>af6bef4811cb128a4f62077d0fabe5f85</anchor>
      <arglist>(const std::string &amp;type, Functor functor)</arglist>
    </member>
    <member kind="function">
      <type>SectionWriter &amp;</type>
      <name>sectionStream</name>
      <anchorfile>a03213.html</anchorfile>
      <anchor>af70c667d00b83869f00b28cd84668708</anchor>
      <arglist>(const std::string &amp;type, Functor functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03213.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>ostream</name>
      <anchorfile>a03213.html</anchorfile>
      <anchor>a0df4c16f48d0e3c9c5c0cd8a55d5b183</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SectionWriter</name>
      <anchorfile>a03213.html</anchorfile>
      <anchor>a50c0a7f10e3cb6d13b6fc2623b276c68</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SectionWriter</name>
      <anchorfile>a03213.html</anchorfile>
      <anchor>adf73bee6769d11d70550d9ed4e7cd024</anchor>
      <arglist>(const std::string &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SectionWriter</name>
      <anchorfile>a03213.html</anchorfile>
      <anchor>a428bbe8f1ff7af0ea09509cb4e37d05d</anchor>
      <arglist>(const char *fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SectionWriter</name>
      <anchorfile>a03213.html</anchorfile>
      <anchor>a2a9c8674573054e789efd12de05635e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SectionWriter &amp;</type>
      <name>sectionLines</name>
      <anchorfile>a03213.html</anchorfile>
      <anchor>af6bef4811cb128a4f62077d0fabe5f85</anchor>
      <arglist>(const std::string &amp;type, Functor functor)</arglist>
    </member>
    <member kind="function">
      <type>SectionWriter &amp;</type>
      <name>sectionStream</name>
      <anchorfile>a03213.html</anchorfile>
      <anchor>af70c667d00b83869f00b28cd84668708</anchor>
      <arglist>(const std::string &amp;type, Functor functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a03213.html</anchorfile>
      <anchor>a13a43e6d814de94978c515cb084873b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>ostream</name>
      <anchorfile>a03213.html</anchorfile>
      <anchor>a0df4c16f48d0e3c9c5c0cd8a55d5b183</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SectionWriter</type>
      <name>sectionWriter</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>ga6bc4578acf71f56b06729191b8463779</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>SectionWriter</type>
      <name>sectionWriter</name>
      <anchorfile>a03213.html</anchorfile>
      <anchor>af7c98afec48ac900d4af8e89c418ee17</anchor>
      <arglist>(const std::string &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type>SectionWriter</type>
      <name>sectionWriter</name>
      <anchorfile>a03213.html</anchorfile>
      <anchor>a1b3a56982483d38ab84cd05073a37c0e</anchor>
      <arglist>(const char *fn)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::MinCostArborescence::SetArborescenceMap</name>
    <filename>a03825.html</filename>
    <templarg></templarg>
    <base>MinCostArborescence&lt; Digraph, CostMap, SetArborescenceMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::MaxCardinalitySearch::SetCapacityMap</name>
    <filename>a03765.html</filename>
    <templarg></templarg>
    <base>MaxCardinalitySearch&lt; Digraph, CapacityMap, DefCapacityMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::MaxCardinalitySearch::SetCardinalityMap</name>
    <filename>a03773.html</filename>
    <templarg></templarg>
    <base>MaxCardinalitySearch&lt; Digraph, CapacityMap, DefCardinalityMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::BellmanFord::SetDistMap</name>
    <filename>a01673.html</filename>
    <templarg></templarg>
    <base>BellmanFord&lt; Digraph, LengthMap, SetDistMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Dfs::SetDistMap</name>
    <filename>a02217.html</filename>
    <templarg></templarg>
    <base>Dfs&lt; Digraph, SetDistMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Bfs::SetDistMap</name>
    <filename>a01733.html</filename>
    <templarg></templarg>
    <base>Bfs&lt; Digraph, SetDistMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Dijkstra::SetDistMap</name>
    <filename>a02325.html</filename>
    <templarg></templarg>
    <base>Dijkstra&lt; Digraph, LengthMap, SetDistMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Circulation::SetElevator</name>
    <filename>a01897.html</filename>
    <templarg></templarg>
    <base>Circulation&lt; Digraph, LowerMap, UpperMap, SupplyMap, SetElevatorTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Preflow::SetElevator</name>
    <filename>a04073.html</filename>
    <templarg></templarg>
    <base>Preflow&lt; Digraph, CapacityMap, SetElevatorTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::MaxFractionalMatching::SetElevator</name>
    <filename>a02621.html</filename>
    <templarg></templarg>
    <base>MaxFractionalMatching&lt; Graph, SetElevatorTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Preflow::SetFlowMap</name>
    <filename>a04065.html</filename>
    <templarg></templarg>
    <base>Preflow&lt; Digraph, CapacityMap, SetFlowMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::EdmondsKarp::SetFlowMap</name>
    <filename>a02561.html</filename>
    <templarg></templarg>
    <base>EdmondsKarp&lt; Digraph, CapacityMap, SetFlowMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Circulation::SetFlowMap</name>
    <filename>a01889.html</filename>
    <templarg></templarg>
    <base>Circulation&lt; Digraph, LowerMap, UpperMap, SupplyMap, SetFlowMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Suurballe::SetFlowMap</name>
    <filename>a04297.html</filename>
    <templarg></templarg>
    <base>Suurballe&lt; GR, LEN, SetFlowMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::MaxCardinalitySearch::SetHeap</name>
    <filename>a03789.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>MaxCardinalitySearch&lt; Digraph, CapacityMap, DefHeapTraits&lt; H, typename Digraph::template NodeMap&lt; int &gt; &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::NagamochiIbaraki::SetHeap</name>
    <filename>a03861.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>NagamochiIbaraki&lt; Graph, CapacityMap, SetHeapTraits&lt; H, RangeMap&lt; int &gt; &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Dijkstra::SetHeap</name>
    <filename>a02349.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dijkstra&lt; Digraph, LengthMap, SetHeapTraits&lt; H, typename Digraph::template NodeMap&lt; int &gt; &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::CapacityScaling::SetHeap</name>
    <filename>a01865.html</filename>
    <templarg></templarg>
    <base>CapacityScaling&lt; GR, V, C, SetHeapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Suurballe::SetHeap</name>
    <filename>a04321.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Suurballe&lt; GR, LEN, SetHeapTraits&lt; H, typename Digraph::template NodeMap&lt; int &gt; &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::HartmannOrlinMmc::SetLargeCost</name>
    <filename>a02873.html</filename>
    <templarg></templarg>
    <base>HartmannOrlinMmc&lt; GR, CM, SetLargeCostTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::HowardMmc::SetLargeCost</name>
    <filename>a02901.html</filename>
    <templarg></templarg>
    <base>HowardMmc&lt; GR, CM, SetLargeCostTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::CostScaling::SetLargeCost</name>
    <filename>a02149.html</filename>
    <templarg></templarg>
    <base>CostScaling&lt; GR, V, C, SetLargeCostTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::KarpMmc::SetLargeCost</name>
    <filename>a02981.html</filename>
    <templarg></templarg>
    <base>KarpMmc&lt; GR, CM, SetLargeCostTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::MaxFractionalMatching::SetMatchingMap</name>
    <filename>a02613.html</filename>
    <templarg></templarg>
    <base>MaxFractionalMatching&lt; Graph, SetMatchingMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::BellmanFord::SetOperationTraits</name>
    <filename>a01681.html</filename>
    <templarg></templarg>
    <base>BellmanFord&lt; Digraph, LengthMap, SetOperationTraitsTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Dijkstra::SetOperationTraits</name>
    <filename>a02365.html</filename>
    <templarg></templarg>
    <base>Dijkstra&lt; Digraph, LengthMap, SetOperationTraitsTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::KarpMmc::SetPath</name>
    <filename>a02989.html</filename>
    <templarg></templarg>
    <base>KarpMmc&lt; GR, CM, SetPathTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::HartmannOrlinMmc::SetPath</name>
    <filename>a02881.html</filename>
    <templarg></templarg>
    <base>HartmannOrlinMmc&lt; GR, CM, SetPathTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::HowardMmc::SetPath</name>
    <filename>a02909.html</filename>
    <templarg></templarg>
    <base>HowardMmc&lt; GR, CM, SetPathTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Suurballe::SetPath</name>
    <filename>a04313.html</filename>
    <templarg></templarg>
    <base>Suurballe&lt; GR, LEN, SetPathTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Suurballe::SetPotentialMap</name>
    <filename>a04305.html</filename>
    <templarg></templarg>
    <base>Suurballe&lt; GR, LEN, SetPotentialMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::BellmanFord::SetPredMap</name>
    <filename>a01665.html</filename>
    <templarg></templarg>
    <base>BellmanFord&lt; Digraph, LengthMap, SetPredMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::MinCostArborescence::SetPredMap</name>
    <filename>a03833.html</filename>
    <templarg></templarg>
    <base>MinCostArborescence&lt; Digraph, CostMap, SetPredMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Dijkstra::SetPredMap</name>
    <filename>a02317.html</filename>
    <templarg></templarg>
    <base>Dijkstra&lt; Digraph, LengthMap, SetPredMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Dfs::SetPredMap</name>
    <filename>a02209.html</filename>
    <templarg></templarg>
    <base>Dfs&lt; Digraph, SetPredMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Bfs::SetPredMap</name>
    <filename>a01725.html</filename>
    <templarg></templarg>
    <base>Bfs&lt; Digraph, SetPredMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Dfs::SetProcessedMap</name>
    <filename>a02233.html</filename>
    <templarg></templarg>
    <base>Dfs&lt; Digraph, SetProcessedMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::MaxCardinalitySearch::SetProcessedMap</name>
    <filename>a03781.html</filename>
    <templarg></templarg>
    <base>MaxCardinalitySearch&lt; Digraph, CapacityMap, DefProcessedMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Bfs::SetProcessedMap</name>
    <filename>a01749.html</filename>
    <templarg></templarg>
    <base>Bfs&lt; Digraph, SetProcessedMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Dijkstra::SetProcessedMap</name>
    <filename>a02333.html</filename>
    <templarg></templarg>
    <base>Dijkstra&lt; Digraph, LengthMap, SetProcessedMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::BfsVisit::SetReachedMap</name>
    <filename>a01809.html</filename>
    <templarg></templarg>
    <base>BfsVisit&lt; Digraph, Visitor, SetReachedMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Dfs::SetReachedMap</name>
    <filename>a02225.html</filename>
    <templarg></templarg>
    <base>Dfs&lt; Digraph, SetReachedMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Bfs::SetReachedMap</name>
    <filename>a01741.html</filename>
    <templarg></templarg>
    <base>Bfs&lt; Digraph, SetReachedMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::DfsVisit::SetReachedMap</name>
    <filename>a02293.html</filename>
    <templarg></templarg>
    <base>DfsVisit&lt; Digraph, Visitor, SetReachedMapTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::MaxFractionalMatching::SetStandardElevator</name>
    <filename>a02629.html</filename>
    <templarg></templarg>
    <base>MaxFractionalMatching&lt; Graph, SetStandardElevatorTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Preflow::SetStandardElevator</name>
    <filename>a04081.html</filename>
    <templarg></templarg>
    <base>Preflow&lt; Digraph, CapacityMap, SetStandardElevatorTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Circulation::SetStandardElevator</name>
    <filename>a01905.html</filename>
    <templarg></templarg>
    <base>Circulation&lt; Digraph, LowerMap, UpperMap, SupplyMap, SetStandardElevatorTraits&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Dijkstra::SetStandardHeap</name>
    <filename>a02357.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dijkstra&lt; Digraph, LengthMap, SetStandardHeapTraits&lt; H, typename Digraph::template NodeMap&lt; int &gt; &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::MaxCardinalitySearch::SetStandardHeap</name>
    <filename>a03797.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>MaxCardinalitySearch&lt; Digraph, CapacityMap, DefStandardHeapTraits&lt; H, typename Digraph::template NodeMap&lt; int &gt; &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::NagamochiIbaraki::SetStandardHeap</name>
    <filename>a03869.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>NagamochiIbaraki&lt; Graph, CapacityMap, SetStandardHeapTraits&lt; H, RangeMap&lt; int &gt; &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Dijkstra::SetStandardProcessedMap</name>
    <filename>a02341.html</filename>
    <base>Dijkstra&lt; Digraph, LengthMap, SetStandardProcessedMapTraits &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Bfs::SetStandardProcessedMap</name>
    <filename>a01757.html</filename>
    <base>Bfs&lt; Digraph, SetStandardProcessedMapTraits &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::Dfs::SetStandardProcessedMap</name>
    <filename>a02241.html</filename>
    <base>Dfs&lt; Digraph, SetStandardProcessedMapTraits &gt;</base>
  </compound>
  <compound kind="struct">
    <name>lemon::NagamochiIbaraki::SetUnitCapacity</name>
    <filename>a03853.html</filename>
    <base>NagamochiIbaraki&lt; Graph, CapacityMap, SetUnitCapacityTraits &gt;</base>
  </compound>
  <compound kind="class">
    <name>lemon::ShiftMap</name>
    <filename>a03497.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>MapBase&lt; M::Key, M::Value &gt;</base>
    <member kind="typedef">
      <type>M::Key</type>
      <name>Key</name>
      <anchorfile>a03497.html</anchorfile>
      <anchor>a8c5e944591efa8f8f0d64cf81950abcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M::Value</type>
      <name>Value</name>
      <anchorfile>a03497.html</anchorfile>
      <anchor>a7054917e50868b3b4c3d0899fc4b422e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShiftMap</name>
      <anchorfile>a03497.html</anchorfile>
      <anchor>a61298980a1e6c958993b583e99a973bb</anchor>
      <arglist>(const M &amp;m, const C &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03497.html</anchorfile>
      <anchor>a8de1b13f44fab45faa8daa93027f9df2</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>ShiftMap&lt; M, C &gt;</type>
      <name>shiftMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga840b730cb65a418b9d890c27dfa63a27</anchor>
      <arglist>(const M &amp;m, const C &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ShiftWriteMap</name>
    <filename>a03501.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>MapBase&lt; M::Key, M::Value &gt;</base>
    <member kind="typedef">
      <type>M::Key</type>
      <name>Key</name>
      <anchorfile>a03501.html</anchorfile>
      <anchor>a8c5e944591efa8f8f0d64cf81950abcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M::Value</type>
      <name>Value</name>
      <anchorfile>a03501.html</anchorfile>
      <anchor>a7054917e50868b3b4c3d0899fc4b422e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShiftWriteMap</name>
      <anchorfile>a03501.html</anchorfile>
      <anchor>ad6fc2174dc74be26fdd310c4657f6be8</anchor>
      <arglist>(M &amp;m, const C &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03501.html</anchorfile>
      <anchor>a8de1b13f44fab45faa8daa93027f9df2</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03501.html</anchorfile>
      <anchor>a6ac83be911521f604e18f3df0d678213</anchor>
      <arglist>(const Key &amp;k, const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ShiftWriteMap&lt; M, C &gt;</type>
      <name>shiftWriteMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga9c1611cd915bd96577b7f5e9607c834b</anchor>
      <arglist>(M &amp;m, const C &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::SimpleBucketHeap</name>
    <filename>a01841.html</filename>
    <templarg></templarg>
    <templarg>MIN</templarg>
    <member kind="enumeration">
      <type></type>
      <name>State</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_HEAP</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a213759402d071be3f66f8cf86641bb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRE_HEAP</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a12f201f9d13d106e81658dad7e7c9c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POST_HEAP</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8acd215e97251c1085a8b299c068e7172d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IM</type>
      <name>ItemIntMap</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>ac00a2d6f039b6e8ffc0641530bdf5304</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Prio</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a828e2232d3e40c141ccc0aa4eb6a960e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ItemIntMap::Key</type>
      <name>Item</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a70025b32b600038ee2981a3deab1a783</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Item, Prio &gt;</type>
      <name>Pair</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a616fe456bc4c8eddf813c4f5665e1180</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN_HEAP</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a213759402d071be3f66f8cf86641bb11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRE_HEAP</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8a12f201f9d13d106e81658dad7e7c9c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POST_HEAP</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a5d74787dedbc4e11c1ab15bf487e61f8acd215e97251c1085a8b299c068e7172d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleBucketHeap</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a9aaa89a3a16c544fc046e41ea0faf46b</anchor>
      <arglist>(ItemIntMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a644718bb2fb240de962dc3c9a1fdf0dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a5b654214309b6f25fceeec04e2b1a016</anchor>
      <arglist>(const Pair &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>ad34f576dafc84f8969e2fecd67cd3a15</anchor>
      <arglist>(const Item &amp;i, const Prio &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>top</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a3c68736e00411448ff7acf175015cc1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Prio</type>
      <name>prio</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>aa453ea5d0eb1b666a14a104659ae49dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a312e7f6c761a199c1369fbe651e084f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Prio</type>
      <name>operator[]</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>ac85c63b4ab780fbfb4b986b60dd87481</anchor>
      <arglist>(const Item &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>state</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a9e18a6f6555eb8d1bc8d37c951a440f6</anchor>
      <arglist>(const Item &amp;i) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::SimplePath</name>
    <filename>a03941.html</filename>
    <templarg></templarg>
    <class kind="class">lemon::SimplePath::ArcIt</class>
    <member kind="function">
      <type></type>
      <name>SimplePath</name>
      <anchorfile>a03941.html</anchorfile>
      <anchor>ad1c463cc944f26b376fd4531e6ffafef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimplePath</name>
      <anchorfile>a03941.html</anchorfile>
      <anchor>a2a727055147f05a18820e3c43aebf5b7</anchor>
      <arglist>(const SimplePath &amp;cpath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimplePath</name>
      <anchorfile>a03941.html</anchorfile>
      <anchor>a0576832d474b535a5891e22526b867f2</anchor>
      <arglist>(const CPath &amp;cpath)</arglist>
    </member>
    <member kind="function">
      <type>SimplePath &amp;</type>
      <name>operator=</name>
      <anchorfile>a03941.html</anchorfile>
      <anchor>a0ab510d6d47b918f0adc006421c288a4</anchor>
      <arglist>(const SimplePath &amp;cpath)</arglist>
    </member>
    <member kind="function">
      <type>SimplePath &amp;</type>
      <name>operator=</name>
      <anchorfile>a03941.html</anchorfile>
      <anchor>ae9b92095fb346ee20cb77211a3a9c9ca</anchor>
      <arglist>(const CPath &amp;cpath)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a03941.html</anchorfile>
      <anchor>a91213974fa3ac3959b1c355a9e588f8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a03941.html</anchorfile>
      <anchor>a644718bb2fb240de962dc3c9a1fdf0dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a03941.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Arc &amp;</type>
      <name>nth</name>
      <anchorfile>a03941.html</anchorfile>
      <anchor>afc37a5f2af03aa246ccfb006e7ab9d48</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>ArcIt</type>
      <name>nthIt</name>
      <anchorfile>a03941.html</anchorfile>
      <anchor>a7a7c490cf0513671eac500a9c3db6d7b</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>const Arc &amp;</type>
      <name>front</name>
      <anchorfile>a03941.html</anchorfile>
      <anchor>a285e23e52adb15740e888caaf60f5497</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Arc &amp;</type>
      <name>back</name>
      <anchorfile>a03941.html</anchorfile>
      <anchor>a6e80101a14ddf5a057be550605cf675b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBack</name>
      <anchorfile>a03941.html</anchorfile>
      <anchor>a7de8be578587027ac5fda4e89a016f4d</anchor>
      <arglist>(const Arc &amp;arc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseBack</name>
      <anchorfile>a03941.html</anchorfile>
      <anchor>a8a5e7d5f5c01f29344ec6d80d3a38e4d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::SkeletonSolverBase</name>
    <filename>a03413.html</filename>
    <base virtualness="virtual">lemon::LpBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>_addCol</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>a3e4122bd62080a37ffabaa0f7ee71a3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>_addRow</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>a63fe2e2764e33f96cff12ef717850bf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>_addRow</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>acb137e8347eb15d6eb3cac129cb1460e</anchor>
      <arglist>(Value l, ExprIterator b, ExprIterator e, Value u)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>_eraseCol</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>a8d9ae2ab8f081f2675ac1861d7b92539</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>_eraseRow</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>a7a88deb35973e379fe613b64fefd9df3</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>_getColName</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>a240699de7ec68613abee50c9de59d233</anchor>
      <arglist>(int col, std::string &amp;name) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>_setColName</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>ae9742b34c4c4f8421d24ae35b40165c8</anchor>
      <arglist>(int col, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>_colByName</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>ac1552313775ba6a148449c2cd8fe309d</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>_getRowName</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>abc597abd1dcfd368520208dbbfa8d75d</anchor>
      <arglist>(int row, std::string &amp;name) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>_setRowName</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>a32c0b5b3985527308084f26565a23375</anchor>
      <arglist>(int row, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>_rowByName</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>aafa040daa71c3843151fa06bb7b48f73</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>_setRowCoeffs</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>a86bcc074e1232efc1633cf70e595da73</anchor>
      <arglist>(int i, ExprIterator b, ExprIterator e)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>_getRowCoeffs</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>a8859eb3e50831f1ad6cad489bcf29885</anchor>
      <arglist>(int i, InsertIterator b) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>_setColCoeffs</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>aeafde598054ed90d572089322454f5a6</anchor>
      <arglist>(int i, ExprIterator b, ExprIterator e)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>_getColCoeffs</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>a06e1856871542576bfcc79b86a5b619b</anchor>
      <arglist>(int i, InsertIterator b) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>_setCoeff</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>a0f76d7b2ec4142034cb71d94a1f87dab</anchor>
      <arglist>(int row, int col, Value value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Value</type>
      <name>_getCoeff</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>afd2a30d9b61505c287a509ff0e0d77fa</anchor>
      <arglist>(int row, int col) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>_setColLowerBound</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>a6271da636bd2c7034f8502506532809e</anchor>
      <arglist>(int i, Value value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Value</type>
      <name>_getColLowerBound</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>ad89f4a7c66209ad0cf861ea1b6bf14a7</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>_setColUpperBound</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>acca7a1a24c08d2e4386a767bdabdeb08</anchor>
      <arglist>(int i, Value value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Value</type>
      <name>_getColUpperBound</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>a324e67d552d33f5276fdeb718033493a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>_setRowLowerBound</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>a826ed7e1b4ed98483dc828237007bbbf</anchor>
      <arglist>(int i, Value value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Value</type>
      <name>_getRowLowerBound</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>a2e0e61fea800ee1be0ea85010bf1d7ff</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>_setRowUpperBound</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>a854b5e280e4d6bd253f67dd1dfe69644</anchor>
      <arglist>(int i, Value value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Value</type>
      <name>_getRowUpperBound</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>a4dcb20946c44fba15806f86c7f455c0e</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>_setObjCoeffs</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>a290835cf8024c4138a97edc3df5ce1b1</anchor>
      <arglist>(ExprIterator b, ExprIterator e)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>_getObjCoeffs</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>ad25c324591f1751d93c9e3578b35d5ee</anchor>
      <arglist>(InsertIterator b) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>_setObjCoeff</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>a454737987b57b0808888de1f89ec1f60</anchor>
      <arglist>(int i, Value obj_coef)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Value</type>
      <name>_getObjCoeff</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>a30b107bb0fbb671c85d5154f5bc7bbe8</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>_setSense</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>a452e8c0672accb14f50a95d3247681d1</anchor>
      <arglist>(Sense)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Sense</type>
      <name>_getSense</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>a83c8d39382b3acf21c64bf6db2284e86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>_clear</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>ada6768be8b067492c3f7e6e7861091e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>_messageLevel</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>abf7ba538e76b92c679544a92fa538ba0</anchor>
      <arglist>(MessageLevel)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>_write</name>
      <anchorfile>a03413.html</anchorfile>
      <anchor>a5bf5b7e1fee94c5870be281f87ae7a44</anchor>
      <arglist>(std::string file, std::string format) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::SmartArcSet</name>
    <filename>a02509.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>SmartArcSet</name>
      <anchorfile>a02509.html</anchorfile>
      <anchor>a695e3ed4a0721ca1e24704aa26ebfff1</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>addArc</name>
      <anchorfile>a02509.html</anchorfile>
      <anchor>ab947ea03356504c5c4b3c8ebfed1516a</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a02509.html</anchorfile>
      <anchor>a315419f26d3c59fa143b49b90a019049</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::SmartBpGraph</name>
    <filename>a04245.html</filename>
    <class kind="class">lemon::SmartBpGraph::Snapshot</class>
    <member kind="function">
      <type></type>
      <name>SmartBpGraph</name>
      <anchorfile>a04245.html</anchorfile>
      <anchor>a88a0425d8168ea29a010c207b1620f5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RedNode</type>
      <name>addRedNode</name>
      <anchorfile>a04245.html</anchorfile>
      <anchor>a3a95276b83b5a39135c100a32e2be340</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BlueNode</type>
      <name>addBlueNode</name>
      <anchorfile>a04245.html</anchorfile>
      <anchor>aad169db9a3cf4752c8405f83099f6d47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Edge</type>
      <name>addEdge</name>
      <anchorfile>a04245.html</anchorfile>
      <anchor>a440cb16e73dafeae5a3dfdc984a8f8f3</anchor>
      <arglist>(RedNode u, BlueNode v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a04245.html</anchorfile>
      <anchor>a0175ae42450fd7acfd496967556d4503</anchor>
      <arglist>(Node n) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a04245.html</anchorfile>
      <anchor>a5d89bc9b43f4328c423b3f0c29558e55</anchor>
      <arglist>(Edge e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a04245.html</anchorfile>
      <anchor>ae066aa5f9c819ff677d498b096182aed</anchor>
      <arglist>(Arc a) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a04245.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserveNode</name>
      <anchorfile>a04245.html</anchorfile>
      <anchor>a28bb4df827e678ae549849be81d88def</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserveEdge</name>
      <anchorfile>a04245.html</anchorfile>
      <anchor>a0337d8e0a11c8d4d22de6265b526df1e</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SmartBpGraph</name>
      <anchorfile>a04245.html</anchorfile>
      <anchor>a76e0fd2791f18e8bd408bd4b96265514</anchor>
      <arglist>(const SmartBpGraph &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a04245.html</anchorfile>
      <anchor>a6475a287ad553b037100a12ef6a9eb2c</anchor>
      <arglist>(const SmartBpGraph &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::SmartDigraph</name>
    <filename>a04173.html</filename>
    <class kind="class">lemon::SmartDigraph::Snapshot</class>
    <member kind="function">
      <type></type>
      <name>SmartDigraph</name>
      <anchorfile>a04173.html</anchorfile>
      <anchor>a7fbeec3c0903b621368577f4a6802066</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>addNode</name>
      <anchorfile>a04173.html</anchorfile>
      <anchor>a96838566b12a6b04795db38688bad1a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>addArc</name>
      <anchorfile>a04173.html</anchorfile>
      <anchor>af90c0ea6fc0a0e7454657e710e8f4d0b</anchor>
      <arglist>(Node s, Node t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a04173.html</anchorfile>
      <anchor>a0175ae42450fd7acfd496967556d4503</anchor>
      <arglist>(Node n) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a04173.html</anchorfile>
      <anchor>ae066aa5f9c819ff677d498b096182aed</anchor>
      <arglist>(Arc a) const</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>split</name>
      <anchorfile>a04173.html</anchorfile>
      <anchor>a09a307979f5ac51cc21195285d485bbe</anchor>
      <arglist>(Node n, bool connect=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a04173.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserveNode</name>
      <anchorfile>a04173.html</anchorfile>
      <anchor>a28bb4df827e678ae549849be81d88def</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserveArc</name>
      <anchorfile>a04173.html</anchorfile>
      <anchor>a2489cbecb9d7ff5c9a0b2b5ee46818b5</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SmartDigraph</name>
      <anchorfile>a04173.html</anchorfile>
      <anchor>a4fd186151b026519546e7cfa7daae084</anchor>
      <arglist>(const SmartDigraph &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a04173.html</anchorfile>
      <anchor>a2f041f84a01a853d371869103f47fbd9</anchor>
      <arglist>(const SmartDigraph &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::SmartEdgeSet</name>
    <filename>a02541.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>SmartEdgeSet</name>
      <anchorfile>a02541.html</anchorfile>
      <anchor>aea25784c832ec83e58bb3e0019c507b3</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>Edge</type>
      <name>addEdge</name>
      <anchorfile>a02541.html</anchorfile>
      <anchor>a6192e97afb39b9e2ec4babc88a8aca5f</anchor>
      <arglist>(const Node &amp;u, const Node &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a02541.html</anchorfile>
      <anchor>a315419f26d3c59fa143b49b90a019049</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::SmartGraph</name>
    <filename>a04205.html</filename>
    <class kind="class">lemon::SmartGraph::Snapshot</class>
    <member kind="function">
      <type></type>
      <name>SmartGraph</name>
      <anchorfile>a04205.html</anchorfile>
      <anchor>a97519188f8091a7925f4a51402a439f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>addNode</name>
      <anchorfile>a04205.html</anchorfile>
      <anchor>a96838566b12a6b04795db38688bad1a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Edge</type>
      <name>addEdge</name>
      <anchorfile>a04205.html</anchorfile>
      <anchor>a1aa949747a3805ff966fd9adda94c380</anchor>
      <arglist>(Node u, Node v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a04205.html</anchorfile>
      <anchor>a0175ae42450fd7acfd496967556d4503</anchor>
      <arglist>(Node n) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a04205.html</anchorfile>
      <anchor>a5d89bc9b43f4328c423b3f0c29558e55</anchor>
      <arglist>(Edge e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a04205.html</anchorfile>
      <anchor>ae066aa5f9c819ff677d498b096182aed</anchor>
      <arglist>(Arc a) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a04205.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserveNode</name>
      <anchorfile>a04205.html</anchorfile>
      <anchor>a28bb4df827e678ae549849be81d88def</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserveEdge</name>
      <anchorfile>a04205.html</anchorfile>
      <anchor>a0337d8e0a11c8d4d22de6265b526df1e</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SmartGraph</name>
      <anchorfile>a04205.html</anchorfile>
      <anchor>a76cea0ca28eed58d2a963c1f60186789</anchor>
      <arglist>(const SmartGraph &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a04205.html</anchorfile>
      <anchor>a4c57d7f73f2bb09d8376f6d39ba6484c</anchor>
      <arglist>(const SmartGraph &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ListGraph::Snapshot</name>
    <filename>a03281.html</filename>
    <member kind="function">
      <type></type>
      <name>Snapshot</name>
      <anchorfile>a03281.html</anchorfile>
      <anchor>a8d35bcf9a5efab747b3b3603ac2861de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Snapshot</name>
      <anchorfile>a03281.html</anchorfile>
      <anchor>a5eda43082bb872005149e9710bed560f</anchor>
      <arglist>(ListGraph &amp;gr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>a03281.html</anchorfile>
      <anchor>a0a6eeea938e9dfc299f95cdd90ea40ec</anchor>
      <arglist>(ListGraph &amp;gr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a03281.html</anchorfile>
      <anchor>afd3595051be2709847c2de4352f27cf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a03281.html</anchorfile>
      <anchor>a315419f26d3c59fa143b49b90a019049</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::SmartBpGraph::Snapshot</name>
    <filename>a04249.html</filename>
    <member kind="function">
      <type></type>
      <name>Snapshot</name>
      <anchorfile>a04249.html</anchorfile>
      <anchor>a8d35bcf9a5efab747b3b3603ac2861de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Snapshot</name>
      <anchorfile>a04249.html</anchorfile>
      <anchor>af8a234cc6988858db1075aee8bf5f501</anchor>
      <arglist>(SmartBpGraph &amp;gr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>a04249.html</anchorfile>
      <anchor>aaaafec7c475dc93d5c8b7f64d560caa6</anchor>
      <arglist>(SmartBpGraph &amp;gr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a04249.html</anchorfile>
      <anchor>afd3595051be2709847c2de4352f27cf5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::SmartGraph::Snapshot</name>
    <filename>a04209.html</filename>
    <member kind="function">
      <type></type>
      <name>Snapshot</name>
      <anchorfile>a04209.html</anchorfile>
      <anchor>a8d35bcf9a5efab747b3b3603ac2861de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Snapshot</name>
      <anchorfile>a04209.html</anchorfile>
      <anchor>a667f7784438659f5a7914d5bd4b1f282</anchor>
      <arglist>(SmartGraph &amp;gr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>a04209.html</anchorfile>
      <anchor>aff48f6c5211c4f04c39c4b8f89775df1</anchor>
      <arglist>(SmartGraph &amp;gr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a04209.html</anchorfile>
      <anchor>afd3595051be2709847c2de4352f27cf5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::SmartDigraph::Snapshot</name>
    <filename>a04177.html</filename>
    <member kind="function">
      <type></type>
      <name>Snapshot</name>
      <anchorfile>a04177.html</anchorfile>
      <anchor>a8d35bcf9a5efab747b3b3603ac2861de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Snapshot</name>
      <anchorfile>a04177.html</anchorfile>
      <anchor>a63eb3ff1627707a3ce53c93397262f99</anchor>
      <arglist>(SmartDigraph &amp;gr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>a04177.html</anchorfile>
      <anchor>a109ad3e5adedeb40d32a60a6212c5c1b</anchor>
      <arglist>(SmartDigraph &amp;gr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a04177.html</anchorfile>
      <anchor>afd3595051be2709847c2de4352f27cf5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ListDigraph::Snapshot</name>
    <filename>a03241.html</filename>
    <member kind="function">
      <type></type>
      <name>Snapshot</name>
      <anchorfile>a03241.html</anchorfile>
      <anchor>a8d35bcf9a5efab747b3b3603ac2861de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Snapshot</name>
      <anchorfile>a03241.html</anchorfile>
      <anchor>a365be677d5eca587e41118d2574830db</anchor>
      <arglist>(ListDigraph &amp;gr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>a03241.html</anchorfile>
      <anchor>a28b169a59c705ee32e71a74ceaa2586a</anchor>
      <arglist>(ListDigraph &amp;gr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a03241.html</anchorfile>
      <anchor>afd3595051be2709847c2de4352f27cf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a03241.html</anchorfile>
      <anchor>a315419f26d3c59fa143b49b90a019049</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::ListBpGraph::Snapshot</name>
    <filename>a03329.html</filename>
    <member kind="function">
      <type></type>
      <name>Snapshot</name>
      <anchorfile>a03329.html</anchorfile>
      <anchor>a8d35bcf9a5efab747b3b3603ac2861de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Snapshot</name>
      <anchorfile>a03329.html</anchorfile>
      <anchor>aabe3eb54cddf05f08935f57416adbedf</anchor>
      <arglist>(ListBpGraph &amp;gr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>a03329.html</anchorfile>
      <anchor>a9d3f5d4232f0c7f3d7cffa4f4f82756f</anchor>
      <arglist>(ListBpGraph &amp;gr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a03329.html</anchorfile>
      <anchor>afd3595051be2709847c2de4352f27cf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a03329.html</anchorfile>
      <anchor>a315419f26d3c59fa143b49b90a019049</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::SoplexLp</name>
    <filename>a04253.html</filename>
    <base>lemon::LpSolver</base>
    <member kind="function">
      <type></type>
      <name>SoplexLp</name>
      <anchorfile>a04253.html</anchorfile>
      <anchor>a5f0bc2548006cf473f17dc3f9aa01efd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoplexLp</name>
      <anchorfile>a04253.html</anchorfile>
      <anchor>a661b9d88b07c1915e69d7df71006109f</anchor>
      <arglist>(const SoplexLp &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoplexLp</name>
      <anchorfile>a04253.html</anchorfile>
      <anchor>a651535f3d8d9e7ffaf8fe4ceb302ac25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoplexLp *</type>
      <name>newSolver</name>
      <anchorfile>a04253.html</anchorfile>
      <anchor>a1f6c621f6814f9534bad1ad736c84066</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SoplexLp *</type>
      <name>cloneSolver</name>
      <anchorfile>a04253.html</anchorfile>
      <anchor>a001a49b106cca8047913e5cd35518124</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::SourceMap</name>
    <filename>a03649.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR::Arc</type>
      <name>Key</name>
      <anchorfile>a03649.html</anchorfile>
      <anchor>a1b9ec95bf71a770498c3f39011dc7584</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GR::Node</type>
      <name>Value</name>
      <anchorfile>a03649.html</anchorfile>
      <anchor>a6916336d24762bcc49ad82b62e3638ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SourceMap</name>
      <anchorfile>a03649.html</anchorfile>
      <anchor>ae910d37157c386e1655004ae148ff5dd</anchor>
      <arglist>(const GR &amp;digraph)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03649.html</anchorfile>
      <anchor>ab70e8ad15e551b4a3abbdb81c86db7e7</anchor>
      <arglist>(const Key &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>SourceMap&lt; GR &gt;</type>
      <name>sourceMap</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga7e40f56fb58a47cf11acf45a53319196</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::SparseMap</name>
    <filename>a03453.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>lemon::MapBase</base>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a03453.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a03453.html</anchorfile>
      <anchor>a6c1768456283cc436140a9ffae849dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value &amp;</type>
      <name>Reference</name>
      <anchorfile>a03453.html</anchorfile>
      <anchor>ae36c42dfba46c6fd74d7d85a4fc27d57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Value &amp;</type>
      <name>ConstReference</name>
      <anchorfile>a03453.html</anchorfile>
      <anchor>a33899f17b36f4c01c39f333a0a6f989b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMap</name>
      <anchorfile>a03453.html</anchorfile>
      <anchor>a9237ea5d58e005fbe1b48632340f2039</anchor>
      <arglist>(const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMap</name>
      <anchorfile>a03453.html</anchorfile>
      <anchor>ae25633282c044d30fb7aba45563396a0</anchor>
      <arglist>(const std::map&lt; Key, V1, Comp1 &gt; &amp;map, const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMap</name>
      <anchorfile>a03453.html</anchorfile>
      <anchor>aaa667ec5b66e0d37252d3d60abb89db6</anchor>
      <arglist>(const SparseMap&lt; Key, V1, Comp1 &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a03453.html</anchorfile>
      <anchor>ad78f54d95302f2e1c40c9e69609d5646</anchor>
      <arglist>(const Key &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>ConstReference</type>
      <name>operator[]</name>
      <anchorfile>a03453.html</anchorfile>
      <anchor>a47334e4b93bd67b155870a7d95060b25</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a03453.html</anchorfile>
      <anchor>a6ac83be911521f604e18f3df0d678213</anchor>
      <arglist>(const Key &amp;k, const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAll</name>
      <anchorfile>a03453.html</anchorfile>
      <anchor>a745398d41d98d0e81a74af611430004f</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SparseMap&lt; K, V, Compare &gt;</type>
      <name>sparseMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>ga2bced372308b364deaa17683861a4e05</anchor>
      <arglist>(const V &amp;value=V())</arglist>
    </member>
    <member kind="function">
      <type>SparseMap&lt; K, V, Compare &gt;</type>
      <name>sparseMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gaea7a9a33e919f50b09b7e8fefdde7b32</anchor>
      <arglist>(const std::map&lt; K, V, Compare &gt; &amp;map, const V &amp;value=V())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::SplitNodes</name>
    <filename>a01601.html</filename>
    <templarg></templarg>
    <class kind="class">lemon::SplitNodes::CombinedArcMap</class>
    <class kind="class">lemon::SplitNodes::CombinedNodeMap</class>
    <member kind="function">
      <type></type>
      <name>SplitNodes</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a56f3680d312f11bc9ab3d92e707076a6</anchor>
      <arglist>(const DGR &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inNode</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a77de114f3028c8969526fd4b4e7ccb6d</anchor>
      <arglist>(const Node &amp;n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>outNode</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ac153d4477370e4ccd4a85fe68d448c1d</anchor>
      <arglist>(const Node &amp;n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>origArc</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ab8fc5ac8e1d333a751a2a4fceb94208b</anchor>
      <arglist>(const Arc &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>bindArc</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>afa9ff5bc582ba23c4d1ee971c622c1c1</anchor>
      <arglist>(const Arc &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Node</type>
      <name>inNode</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>aa75e68bdea87e2f7a9e0127fc038a138</anchor>
      <arglist>(const DigraphNode &amp;n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Node</type>
      <name>outNode</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a5b34aa374711534d2c56a2253e21c71b</anchor>
      <arglist>(const DigraphNode &amp;n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Arc</type>
      <name>arc</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a2e84b05c0825d772b21ededdfb7a83e1</anchor>
      <arglist>(const DigraphNode &amp;n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Arc</type>
      <name>arc</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>adeda0d2dde8caca551ceb4279023b291</anchor>
      <arglist>(const DigraphArc &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CombinedNodeMap&lt; IN, OUT &gt;</type>
      <name>combinedNodeMap</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>abd28849688d294002542a09b8f532f42</anchor>
      <arglist>(IN &amp;in_map, OUT &amp;out_map)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CombinedArcMap&lt; ArcMap, NodeMap &gt;</type>
      <name>combinedArcMap</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a7d0412a1028cfe284f40763a343698dd</anchor>
      <arglist>(ArcMap &amp;arc_map, NodeMap &amp;node_map)</arglist>
    </member>
    <member kind="function">
      <type>SplitNodes&lt; DGR &gt;</type>
      <name>splitNodes</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>gabf58921acaca2eb95d042e2d7440ac20</anchor>
      <arglist>(const DGR &amp;digraph)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::StaticDigraph</name>
    <filename>a04273.html</filename>
    <member kind="function">
      <type></type>
      <name>StaticDigraph</name>
      <anchorfile>a04273.html</anchorfile>
      <anchor>acb22e3239d9b109d2a6951626de2e7f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nodeNum</name>
      <anchorfile>a04273.html</anchorfile>
      <anchor>a150d74302d3b5274897d44b27ee79b6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>arcNum</name>
      <anchorfile>a04273.html</anchorfile>
      <anchor>afc6b72e37021f6a497e83e98418ed3b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build</name>
      <anchorfile>a04273.html</anchorfile>
      <anchor>a1dd9ee53316354c7bfc3e04ac7a9b763</anchor>
      <arglist>(const Digraph &amp;digraph, NodeRefMap &amp;nodeRef, ArcRefMap &amp;arcRef)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build</name>
      <anchorfile>a04273.html</anchorfile>
      <anchor>a2d222f9bb2f81c3cc007e11e7c650f0e</anchor>
      <arglist>(int n, ArcListIterator begin, ArcListIterator end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a04273.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Node</type>
      <name>node</name>
      <anchorfile>a04273.html</anchorfile>
      <anchor>a88302f17a67cc9c5299d7b39eb646178</anchor>
      <arglist>(int ix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Arc</type>
      <name>arc</name>
      <anchorfile>a04273.html</anchorfile>
      <anchor>a7cd8eada20a039a3a6bc4f6695dacf81</anchor>
      <arglist>(int ix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>index</name>
      <anchorfile>a04273.html</anchorfile>
      <anchor>a0822a1cdb568cfae93bfe5856555e302</anchor>
      <arglist>(Node node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>index</name>
      <anchorfile>a04273.html</anchorfile>
      <anchor>adf692cca098440f3a7975752dc0055a8</anchor>
      <arglist>(Arc arc)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::StaticPath</name>
    <filename>a03961.html</filename>
    <templarg></templarg>
    <class kind="class">lemon::StaticPath::ArcIt</class>
    <member kind="function">
      <type></type>
      <name>StaticPath</name>
      <anchorfile>a03961.html</anchorfile>
      <anchor>a64b9be3c43f4d02196741ece4eb8338f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StaticPath</name>
      <anchorfile>a03961.html</anchorfile>
      <anchor>a7dc7850181ac172d65320a188c26e150</anchor>
      <arglist>(const StaticPath &amp;cpath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StaticPath</name>
      <anchorfile>a03961.html</anchorfile>
      <anchor>adb22f061d46947d0b631b40829469e3d</anchor>
      <arglist>(const CPath &amp;cpath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StaticPath</name>
      <anchorfile>a03961.html</anchorfile>
      <anchor>a0843a4a3667350525ac3758cd357937e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StaticPath &amp;</type>
      <name>operator=</name>
      <anchorfile>a03961.html</anchorfile>
      <anchor>a0f9914e1b29446baaac0c58c8a075bc9</anchor>
      <arglist>(const StaticPath &amp;cpath)</arglist>
    </member>
    <member kind="function">
      <type>StaticPath &amp;</type>
      <name>operator=</name>
      <anchorfile>a03961.html</anchorfile>
      <anchor>a7cacebf7002f00dbaf222cca04d2635b</anchor>
      <arglist>(const CPath &amp;cpath)</arglist>
    </member>
    <member kind="function">
      <type>const Arc &amp;</type>
      <name>nth</name>
      <anchorfile>a03961.html</anchorfile>
      <anchor>afc37a5f2af03aa246ccfb006e7ab9d48</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>ArcIt</type>
      <name>nthIt</name>
      <anchorfile>a03961.html</anchorfile>
      <anchor>a7a7c490cf0513671eac500a9c3db6d7b</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a03961.html</anchorfile>
      <anchor>a91213974fa3ac3959b1c355a9e588f8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>empty</name>
      <anchorfile>a03961.html</anchorfile>
      <anchor>a78c28538faebd5f023cd4511df6ffee4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a03961.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Arc &amp;</type>
      <name>front</name>
      <anchorfile>a03961.html</anchorfile>
      <anchor>a285e23e52adb15740e888caaf60f5497</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Arc &amp;</type>
      <name>back</name>
      <anchorfile>a03961.html</anchorfile>
      <anchor>a6e80101a14ddf5a057be550605cf675b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::SubDigraph</name>
    <filename>a01453.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>DGR</type>
      <name>Digraph</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a6435ad6a242e3d323a0dfffd053d9584</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NF</type>
      <name>NodeFilterMap</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a4eb9c95d5fc082e8c24367f6534fdc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AF</type>
      <name>ArcFilterMap</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a059cdfd6d771a5bc57e8aaee120c3407</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubDigraph</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>aa586b064493ed16cd99bf22e5f6bcdd5</anchor>
      <arglist>(DGR &amp;digraph, NF &amp;node_filter, AF &amp;arc_filter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a3070f4604a7464bb8c2fb68085581d9c</anchor>
      <arglist>(const Node &amp;n, bool v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a494d1741a860ba072d870e488ace51cb</anchor>
      <arglist>(const Arc &amp;a, bool v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>status</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a3c03793419eff46552bdc7ab53d506f9</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>status</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>ad87ad1346b9e9300d94d7bbc65bca501</anchor>
      <arglist>(const Arc &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a7c5a4c09cafd0ec56be5c4e631cbc4dd</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a14c4b60be8bed7bae52159f264d21480</anchor>
      <arglist>(const Arc &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a8e109721033aa9fca373b1f5109bdeba</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>abe7bf35e0c9d7d7647b8e756fa7ee022</anchor>
      <arglist>(const Arc &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>SubDigraph&lt; const DGR, NF, AF &gt;</type>
      <name>subDigraph</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>ga4ecbcee43f13c2eaf1bedc4b2c8467ad</anchor>
      <arglist>(const DGR &amp;digraph, NF &amp;node_filter, AF &amp;arc_filter)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::SubGraph</name>
    <filename>a01489.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Graph</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a2a51ae337b207f01f1c904f5eb2aa98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NF</type>
      <name>NodeFilterMap</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a4eb9c95d5fc082e8c24367f6534fdc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EF</type>
      <name>EdgeFilterMap</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>ac2f0212f10cc7aa26b76d2a113e963c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubGraph</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>acafef764806c2916e10afb85630bedb5</anchor>
      <arglist>(GR &amp;graph, NF &amp;node_filter, EF &amp;edge_filter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a3070f4604a7464bb8c2fb68085581d9c</anchor>
      <arglist>(const Node &amp;n, bool v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a0af2c26dc2e39712a5e51883b52d231e</anchor>
      <arglist>(const Edge &amp;e, bool v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>status</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a3c03793419eff46552bdc7ab53d506f9</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>status</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a5ff7a86a357bfff42d52ea32b3e8550c</anchor>
      <arglist>(const Edge &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a7c5a4c09cafd0ec56be5c4e631cbc4dd</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a0acd289d290eb8616610f0840936a86d</anchor>
      <arglist>(const Edge &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a8e109721033aa9fca373b1f5109bdeba</anchor>
      <arglist>(const Node &amp;n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a1d0f88de550f130eccd15e2f0e2877b0</anchor>
      <arglist>(const Edge &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>SubGraph&lt; const GR, NF, EF &gt;</type>
      <name>subGraph</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>gad30bffcd2a193a2366b54593a98bf7a3</anchor>
      <arglist>(const GR &amp;graph, NF &amp;node_filter, EF &amp;edge_filter)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::SubMap</name>
    <filename>a03485.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>MapBase&lt; M1::Key, M1::Value &gt;</base>
    <member kind="typedef">
      <type>M1::Key</type>
      <name>Key</name>
      <anchorfile>a03485.html</anchorfile>
      <anchor>ac16c774bd2b82a45854c3ac66248de01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M1::Value</type>
      <name>Value</name>
      <anchorfile>a03485.html</anchorfile>
      <anchor>a087615b851ee4b1f01463e4589205d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubMap</name>
      <anchorfile>a03485.html</anchorfile>
      <anchor>ad1392c25e50f359abea9f21e249a83d1</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03485.html</anchorfile>
      <anchor>a8de1b13f44fab45faa8daa93027f9df2</anchor>
      <arglist>(const Key &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>SubMap&lt; M1, M2 &gt;</type>
      <name>subMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga6101bbe8a787e7bf7998d529632edcdd</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::Suurballe</name>
    <filename>a04285.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>int</type>
      <name>run</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a775a143b5042d2c415c51cd1ea8924af</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a3449f65c3633e80616102966e1af6bb4</anchor>
      <arglist>(const Node &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fullInit</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ae54bee7bc4907cf7d1eadfc3e29f6006</anchor>
      <arglist>(const Node &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>start</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a9d42cea8a927e065105207778790cc69</anchor>
      <arglist>(const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findFlow</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a7ed86f61c420946041091655b6cb9763</anchor>
      <arglist>(const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findPaths</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>add7bd37fa586f6ddfa0fbe28f0e9afc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>totalLength</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a48cfedf1d8b51899205c08a69ae1f671</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>flow</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a5153225e0ad3d6ea727b772431dd5c9f</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>potential</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>aa6ded7fec9c85f22b83d3d9e1c9eacad</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>const PotentialMap &amp;</type>
      <name>potentialMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a7e7bc54803aa7bcc31c06a15c2f42a3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pathNum</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a47d482290dc133712c332cf7715a3846</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>path</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a3889f911215349a27302dda98a408e20</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <class kind="struct">lemon::Suurballe::SetFlowMap</class>
    <class kind="struct">lemon::Suurballe::SetHeap</class>
    <class kind="struct">lemon::Suurballe::SetPath</class>
    <class kind="struct">lemon::Suurballe::SetPotentialMap</class>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LengthMap</type>
      <name>LengthMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ac1094a242a4e9be216f0623b0a7381c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Length</type>
      <name>Length</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>af78fd1105d3c3a1aaa8fe822c71aa5f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::FlowMap</type>
      <name>FlowMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ad8073740cadb33def80f529aaf1b902d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PotentialMap</type>
      <name>PotentialMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a8be8bf14a514c73f4db1fff1afa50fad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Path</type>
      <name>Path</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ad6d7757da799220a95281fbee4d3fb8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::HeapCrossRef</type>
      <name>HeapCrossRef</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a0dc498f33875179555a71ba9441c400a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Heap</type>
      <name>Heap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ab1e3f1c47cd4bffb15e3bbc452585f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR</type>
      <name>Traits</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Suurballe</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a31b52817725a0f1a2154d6e2b026274e</anchor>
      <arglist>(const Digraph &amp;graph, const LengthMap &amp;length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Suurballe</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a924d52afb136fc92220a5878bcc26523</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Suurballe &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ad5ca17abd16a49b8b1cdc9c415c086a4</anchor>
      <arglist>(FlowMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Suurballe &amp;</type>
      <name>potentialMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a1f9e7fc3cfeed3c7300017c7f00197bd</anchor>
      <arglist>(PotentialMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>run</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a775a143b5042d2c415c51cd1ea8924af</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a3449f65c3633e80616102966e1af6bb4</anchor>
      <arglist>(const Node &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fullInit</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ae54bee7bc4907cf7d1eadfc3e29f6006</anchor>
      <arglist>(const Node &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>start</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a9d42cea8a927e065105207778790cc69</anchor>
      <arglist>(const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findFlow</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a7ed86f61c420946041091655b6cb9763</anchor>
      <arglist>(const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findPaths</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>add7bd37fa586f6ddfa0fbe28f0e9afc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>totalLength</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a48cfedf1d8b51899205c08a69ae1f671</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>flow</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a5153225e0ad3d6ea727b772431dd5c9f</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>potential</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>aa6ded7fec9c85f22b83d3d9e1c9eacad</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>const PotentialMap &amp;</type>
      <name>potentialMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a7e7bc54803aa7bcc31c06a15c2f42a3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pathNum</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a47d482290dc133712c332cf7715a3846</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>path</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a3889f911215349a27302dda98a408e20</anchor>
      <arglist>(int i) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Suurballe&lt; GR, LEN, SetFlowMapTraits&lt; T &gt; &gt;</name>
    <filename>a04285.html</filename>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PotentialMap &amp;</type>
      <name>potentialMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a7e7bc54803aa7bcc31c06a15c2f42a3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>totalLength</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a48cfedf1d8b51899205c08a69ae1f671</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>flow</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a5153225e0ad3d6ea727b772431dd5c9f</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>potential</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>aa6ded7fec9c85f22b83d3d9e1c9eacad</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pathNum</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a47d482290dc133712c332cf7715a3846</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>path</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a3889f911215349a27302dda98a408e20</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>run</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a775a143b5042d2c415c51cd1ea8924af</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a3449f65c3633e80616102966e1af6bb4</anchor>
      <arglist>(const Node &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fullInit</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ae54bee7bc4907cf7d1eadfc3e29f6006</anchor>
      <arglist>(const Node &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>start</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a9d42cea8a927e065105207778790cc69</anchor>
      <arglist>(const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findFlow</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a7ed86f61c420946041091655b6cb9763</anchor>
      <arglist>(const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findPaths</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>add7bd37fa586f6ddfa0fbe28f0e9afc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LengthMap</type>
      <name>LengthMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ac1094a242a4e9be216f0623b0a7381c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Length</type>
      <name>Length</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>af78fd1105d3c3a1aaa8fe822c71aa5f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::FlowMap</type>
      <name>FlowMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ad8073740cadb33def80f529aaf1b902d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PotentialMap</type>
      <name>PotentialMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a8be8bf14a514c73f4db1fff1afa50fad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Path</type>
      <name>Path</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ad6d7757da799220a95281fbee4d3fb8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::HeapCrossRef</type>
      <name>HeapCrossRef</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a0dc498f33875179555a71ba9441c400a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Heap</type>
      <name>Heap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ab1e3f1c47cd4bffb15e3bbc452585f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetFlowMapTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Suurballe</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a31b52817725a0f1a2154d6e2b026274e</anchor>
      <arglist>(const Digraph &amp;graph, const LengthMap &amp;length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Suurballe</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a924d52afb136fc92220a5878bcc26523</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Suurballe &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ad5ca17abd16a49b8b1cdc9c415c086a4</anchor>
      <arglist>(FlowMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Suurballe &amp;</type>
      <name>potentialMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a1f9e7fc3cfeed3c7300017c7f00197bd</anchor>
      <arglist>(PotentialMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PotentialMap &amp;</type>
      <name>potentialMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a7e7bc54803aa7bcc31c06a15c2f42a3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>totalLength</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a48cfedf1d8b51899205c08a69ae1f671</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>flow</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a5153225e0ad3d6ea727b772431dd5c9f</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>potential</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>aa6ded7fec9c85f22b83d3d9e1c9eacad</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pathNum</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a47d482290dc133712c332cf7715a3846</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>path</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a3889f911215349a27302dda98a408e20</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>run</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a775a143b5042d2c415c51cd1ea8924af</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a3449f65c3633e80616102966e1af6bb4</anchor>
      <arglist>(const Node &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fullInit</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ae54bee7bc4907cf7d1eadfc3e29f6006</anchor>
      <arglist>(const Node &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>start</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a9d42cea8a927e065105207778790cc69</anchor>
      <arglist>(const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findFlow</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a7ed86f61c420946041091655b6cb9763</anchor>
      <arglist>(const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findPaths</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>add7bd37fa586f6ddfa0fbe28f0e9afc4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Suurballe&lt; GR, LEN, SetHeapTraits&lt; H, typename Digraph::template NodeMap&lt; int &gt; &gt; &gt;</name>
    <filename>a04285.html</filename>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PotentialMap &amp;</type>
      <name>potentialMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a7e7bc54803aa7bcc31c06a15c2f42a3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>totalLength</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a48cfedf1d8b51899205c08a69ae1f671</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>flow</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a5153225e0ad3d6ea727b772431dd5c9f</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>potential</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>aa6ded7fec9c85f22b83d3d9e1c9eacad</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pathNum</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a47d482290dc133712c332cf7715a3846</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>path</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a3889f911215349a27302dda98a408e20</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>run</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a775a143b5042d2c415c51cd1ea8924af</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a3449f65c3633e80616102966e1af6bb4</anchor>
      <arglist>(const Node &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fullInit</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ae54bee7bc4907cf7d1eadfc3e29f6006</anchor>
      <arglist>(const Node &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>start</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a9d42cea8a927e065105207778790cc69</anchor>
      <arglist>(const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findFlow</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a7ed86f61c420946041091655b6cb9763</anchor>
      <arglist>(const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findPaths</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>add7bd37fa586f6ddfa0fbe28f0e9afc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LengthMap</type>
      <name>LengthMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ac1094a242a4e9be216f0623b0a7381c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Length</type>
      <name>Length</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>af78fd1105d3c3a1aaa8fe822c71aa5f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::FlowMap</type>
      <name>FlowMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ad8073740cadb33def80f529aaf1b902d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PotentialMap</type>
      <name>PotentialMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a8be8bf14a514c73f4db1fff1afa50fad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Path</type>
      <name>Path</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ad6d7757da799220a95281fbee4d3fb8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::HeapCrossRef</type>
      <name>HeapCrossRef</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a0dc498f33875179555a71ba9441c400a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Heap</type>
      <name>Heap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ab1e3f1c47cd4bffb15e3bbc452585f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetHeapTraits&lt; H, typename Digraph::template NodeMap&lt; int &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Suurballe</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a31b52817725a0f1a2154d6e2b026274e</anchor>
      <arglist>(const Digraph &amp;graph, const LengthMap &amp;length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Suurballe</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a924d52afb136fc92220a5878bcc26523</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Suurballe &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ad5ca17abd16a49b8b1cdc9c415c086a4</anchor>
      <arglist>(FlowMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Suurballe &amp;</type>
      <name>potentialMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a1f9e7fc3cfeed3c7300017c7f00197bd</anchor>
      <arglist>(PotentialMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PotentialMap &amp;</type>
      <name>potentialMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a7e7bc54803aa7bcc31c06a15c2f42a3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>totalLength</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a48cfedf1d8b51899205c08a69ae1f671</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>flow</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a5153225e0ad3d6ea727b772431dd5c9f</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>potential</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>aa6ded7fec9c85f22b83d3d9e1c9eacad</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pathNum</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a47d482290dc133712c332cf7715a3846</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>path</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a3889f911215349a27302dda98a408e20</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>run</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a775a143b5042d2c415c51cd1ea8924af</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a3449f65c3633e80616102966e1af6bb4</anchor>
      <arglist>(const Node &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fullInit</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ae54bee7bc4907cf7d1eadfc3e29f6006</anchor>
      <arglist>(const Node &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>start</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a9d42cea8a927e065105207778790cc69</anchor>
      <arglist>(const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findFlow</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a7ed86f61c420946041091655b6cb9763</anchor>
      <arglist>(const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findPaths</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>add7bd37fa586f6ddfa0fbe28f0e9afc4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Suurballe&lt; GR, LEN, SetPathTraits&lt; T &gt; &gt;</name>
    <filename>a04285.html</filename>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PotentialMap &amp;</type>
      <name>potentialMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a7e7bc54803aa7bcc31c06a15c2f42a3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>totalLength</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a48cfedf1d8b51899205c08a69ae1f671</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>flow</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a5153225e0ad3d6ea727b772431dd5c9f</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>potential</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>aa6ded7fec9c85f22b83d3d9e1c9eacad</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pathNum</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a47d482290dc133712c332cf7715a3846</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>path</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a3889f911215349a27302dda98a408e20</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>run</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a775a143b5042d2c415c51cd1ea8924af</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a3449f65c3633e80616102966e1af6bb4</anchor>
      <arglist>(const Node &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fullInit</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ae54bee7bc4907cf7d1eadfc3e29f6006</anchor>
      <arglist>(const Node &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>start</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a9d42cea8a927e065105207778790cc69</anchor>
      <arglist>(const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findFlow</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a7ed86f61c420946041091655b6cb9763</anchor>
      <arglist>(const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findPaths</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>add7bd37fa586f6ddfa0fbe28f0e9afc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LengthMap</type>
      <name>LengthMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ac1094a242a4e9be216f0623b0a7381c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Length</type>
      <name>Length</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>af78fd1105d3c3a1aaa8fe822c71aa5f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::FlowMap</type>
      <name>FlowMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ad8073740cadb33def80f529aaf1b902d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PotentialMap</type>
      <name>PotentialMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a8be8bf14a514c73f4db1fff1afa50fad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Path</type>
      <name>Path</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ad6d7757da799220a95281fbee4d3fb8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::HeapCrossRef</type>
      <name>HeapCrossRef</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a0dc498f33875179555a71ba9441c400a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Heap</type>
      <name>Heap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ab1e3f1c47cd4bffb15e3bbc452585f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetPathTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Suurballe</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a31b52817725a0f1a2154d6e2b026274e</anchor>
      <arglist>(const Digraph &amp;graph, const LengthMap &amp;length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Suurballe</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a924d52afb136fc92220a5878bcc26523</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Suurballe &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ad5ca17abd16a49b8b1cdc9c415c086a4</anchor>
      <arglist>(FlowMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Suurballe &amp;</type>
      <name>potentialMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a1f9e7fc3cfeed3c7300017c7f00197bd</anchor>
      <arglist>(PotentialMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PotentialMap &amp;</type>
      <name>potentialMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a7e7bc54803aa7bcc31c06a15c2f42a3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>totalLength</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a48cfedf1d8b51899205c08a69ae1f671</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>flow</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a5153225e0ad3d6ea727b772431dd5c9f</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>potential</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>aa6ded7fec9c85f22b83d3d9e1c9eacad</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pathNum</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a47d482290dc133712c332cf7715a3846</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>path</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a3889f911215349a27302dda98a408e20</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>run</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a775a143b5042d2c415c51cd1ea8924af</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a3449f65c3633e80616102966e1af6bb4</anchor>
      <arglist>(const Node &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fullInit</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ae54bee7bc4907cf7d1eadfc3e29f6006</anchor>
      <arglist>(const Node &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>start</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a9d42cea8a927e065105207778790cc69</anchor>
      <arglist>(const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findFlow</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a7ed86f61c420946041091655b6cb9763</anchor>
      <arglist>(const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findPaths</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>add7bd37fa586f6ddfa0fbe28f0e9afc4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Suurballe&lt; GR, LEN, SetPotentialMapTraits&lt; T &gt; &gt;</name>
    <filename>a04285.html</filename>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PotentialMap &amp;</type>
      <name>potentialMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a7e7bc54803aa7bcc31c06a15c2f42a3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>totalLength</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a48cfedf1d8b51899205c08a69ae1f671</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>flow</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a5153225e0ad3d6ea727b772431dd5c9f</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>potential</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>aa6ded7fec9c85f22b83d3d9e1c9eacad</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pathNum</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a47d482290dc133712c332cf7715a3846</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>path</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a3889f911215349a27302dda98a408e20</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>run</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a775a143b5042d2c415c51cd1ea8924af</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a3449f65c3633e80616102966e1af6bb4</anchor>
      <arglist>(const Node &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fullInit</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ae54bee7bc4907cf7d1eadfc3e29f6006</anchor>
      <arglist>(const Node &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>start</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a9d42cea8a927e065105207778790cc69</anchor>
      <arglist>(const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findFlow</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a7ed86f61c420946041091655b6cb9763</anchor>
      <arglist>(const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findPaths</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>add7bd37fa586f6ddfa0fbe28f0e9afc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>TR::Digraph</type>
      <name>Digraph</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a750f38b47fd56ef715849c3bd77fbe77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::LengthMap</type>
      <name>LengthMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ac1094a242a4e9be216f0623b0a7381c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Length</type>
      <name>Length</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>af78fd1105d3c3a1aaa8fe822c71aa5f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::FlowMap</type>
      <name>FlowMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ad8073740cadb33def80f529aaf1b902d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::PotentialMap</type>
      <name>PotentialMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a8be8bf14a514c73f4db1fff1afa50fad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Path</type>
      <name>Path</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ad6d7757da799220a95281fbee4d3fb8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::HeapCrossRef</type>
      <name>HeapCrossRef</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a0dc498f33875179555a71ba9441c400a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TR::Heap</type>
      <name>Heap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ab1e3f1c47cd4bffb15e3bbc452585f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetPotentialMapTraits&lt; T &gt;</type>
      <name>Traits</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ab157e5452122f7a7f73dfda5ed931d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Suurballe</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a31b52817725a0f1a2154d6e2b026274e</anchor>
      <arglist>(const Digraph &amp;graph, const LengthMap &amp;length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Suurballe</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a924d52afb136fc92220a5878bcc26523</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Suurballe &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ad5ca17abd16a49b8b1cdc9c415c086a4</anchor>
      <arglist>(FlowMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Suurballe &amp;</type>
      <name>potentialMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a1f9e7fc3cfeed3c7300017c7f00197bd</anchor>
      <arglist>(PotentialMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>const FlowMap &amp;</type>
      <name>flowMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>af1ab5b570a8df5143cef404526ca9400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PotentialMap &amp;</type>
      <name>potentialMap</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a7e7bc54803aa7bcc31c06a15c2f42a3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>totalLength</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a48cfedf1d8b51899205c08a69ae1f671</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>flow</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a5153225e0ad3d6ea727b772431dd5c9f</anchor>
      <arglist>(const Arc &amp;arc) const</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>potential</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>aa6ded7fec9c85f22b83d3d9e1c9eacad</anchor>
      <arglist>(const Node &amp;node) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pathNum</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a47d482290dc133712c332cf7715a3846</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Path &amp;</type>
      <name>path</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a3889f911215349a27302dda98a408e20</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>run</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a775a143b5042d2c415c51cd1ea8924af</anchor>
      <arglist>(const Node &amp;s, const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a3449f65c3633e80616102966e1af6bb4</anchor>
      <arglist>(const Node &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fullInit</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>ae54bee7bc4907cf7d1eadfc3e29f6006</anchor>
      <arglist>(const Node &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>start</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a9d42cea8a927e065105207778790cc69</anchor>
      <arglist>(const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findFlow</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>a7ed86f61c420946041091655b6cb9763</anchor>
      <arglist>(const Node &amp;t, int k=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findPaths</name>
      <anchorfile>a04285.html</anchorfile>
      <anchor>add7bd37fa586f6ddfa0fbe28f0e9afc4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lemon::SuurballeDefaultTraits</name>
    <filename>a04281.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR</type>
      <name>Digraph</name>
      <anchorfile>a04281.html</anchorfile>
      <anchor>af108349b07bd3b361cfa1387c19395ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LEN</type>
      <name>LengthMap</name>
      <anchorfile>a04281.html</anchorfile>
      <anchor>a7398ca1da160bb30ee090866bbfc12ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LEN::Value</type>
      <name>Length</name>
      <anchorfile>a04281.html</anchorfile>
      <anchor>a2abaf94df6dfe75fe6be9efae81fe1b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GR::template ArcMap&lt; int &gt;</type>
      <name>FlowMap</name>
      <anchorfile>a04281.html</anchorfile>
      <anchor>a6186fb8564291b6d5117cd3038aca0e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GR::template NodeMap&lt; Length &gt;</type>
      <name>PotentialMap</name>
      <anchorfile>a04281.html</anchorfile>
      <anchor>af0bed8d9f51c8f28e44d70b78f87b4d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lemon::Path&lt; Digraph &gt;</type>
      <name>Path</name>
      <anchorfile>a04281.html</anchorfile>
      <anchor>a6989b0a22a99c251a2e7c99cf36605ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GR::template NodeMap&lt; int &gt;</type>
      <name>HeapCrossRef</name>
      <anchorfile>a04281.html</anchorfile>
      <anchor>a2d93a11a420d38311b87175d53c631dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BinHeap&lt; Length, HeapCrossRef &gt;</type>
      <name>Heap</name>
      <anchorfile>a04281.html</anchorfile>
      <anchor>ab62c319b651cedf90fea66f723877b4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::TargetMap</name>
    <filename>a03653.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GR::Arc</type>
      <name>Key</name>
      <anchorfile>a03653.html</anchorfile>
      <anchor>a1b9ec95bf71a770498c3f39011dc7584</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GR::Node</type>
      <name>Value</name>
      <anchorfile>a03653.html</anchorfile>
      <anchor>a6916336d24762bcc49ad82b62e3638ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TargetMap</name>
      <anchorfile>a03653.html</anchorfile>
      <anchor>a231a3ef4b3f4db426e0068d99ef04031</anchor>
      <arglist>(const GR &amp;digraph)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03653.html</anchorfile>
      <anchor>ae31562ad07b3cbeaf808cf5fae63e015</anchor>
      <arglist>(const Key &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>TargetMap&lt; GR &gt;</type>
      <name>targetMap</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga76cedc40d120db6feb12f5ae6ea878ba</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::Timer</name>
    <filename>a04329.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a04329.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a04329.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>a04329.html</anchorfile>
      <anchor>a8c528baf37154d347366083f0f816846</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>halt</name>
      <anchorfile>a04329.html</anchorfile>
      <anchor>ade0430439247877006d7df950f94918a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>running</name>
      <anchorfile>a04329.html</anchorfile>
      <anchor>a6ed60de270944f49abc9787d2c59552c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restart</name>
      <anchorfile>a04329.html</anchorfile>
      <anchor>a22ee094ca3f45aa4156b97d34fe678bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>userTime</name>
      <anchorfile>a04329.html</anchorfile>
      <anchor>ae2426450381f1a4d4c221451b076c031</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>systemTime</name>
      <anchorfile>a04329.html</anchorfile>
      <anchor>a9cea278086f035ee936ac27f28305290</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cUserTime</name>
      <anchorfile>a04329.html</anchorfile>
      <anchor>ab3ed5ca82b4507a167cefe8f913cf85c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cSystemTime</name>
      <anchorfile>a04329.html</anchorfile>
      <anchor>a2c5afcc92616e544f5222c628d74a8df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>realTime</name>
      <anchorfile>a04329.html</anchorfile>
      <anchor>a57e0574e3056e75722cc56d491270712</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator TimeStamp</name>
      <anchorfile>a04329.html</anchorfile>
      <anchor>affee2ba403000e76bfef6f5d01b3816a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Timer</name>
      <anchorfile>a04329.html</anchorfile>
      <anchor>a7c4639dcdcc80169f9886b41077e106a</anchor>
      <arglist>(bool run=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a04329.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a04329.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>a04329.html</anchorfile>
      <anchor>a8c528baf37154d347366083f0f816846</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>halt</name>
      <anchorfile>a04329.html</anchorfile>
      <anchor>ade0430439247877006d7df950f94918a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>running</name>
      <anchorfile>a04329.html</anchorfile>
      <anchor>a6ed60de270944f49abc9787d2c59552c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restart</name>
      <anchorfile>a04329.html</anchorfile>
      <anchor>a22ee094ca3f45aa4156b97d34fe678bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>userTime</name>
      <anchorfile>a04329.html</anchorfile>
      <anchor>ae2426450381f1a4d4c221451b076c031</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>systemTime</name>
      <anchorfile>a04329.html</anchorfile>
      <anchor>a9cea278086f035ee936ac27f28305290</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cUserTime</name>
      <anchorfile>a04329.html</anchorfile>
      <anchor>ab3ed5ca82b4507a167cefe8f913cf85c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cSystemTime</name>
      <anchorfile>a04329.html</anchorfile>
      <anchor>a2c5afcc92616e544f5222c628d74a8df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>realTime</name>
      <anchorfile>a04329.html</anchorfile>
      <anchor>a57e0574e3056e75722cc56d491270712</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator TimeStamp</name>
      <anchorfile>a04329.html</anchorfile>
      <anchor>affee2ba403000e76bfef6f5d01b3816a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::TimeReport</name>
    <filename>a04333.html</filename>
    <base>lemon::Timer</base>
    <member kind="function">
      <type></type>
      <name>TimeReport</name>
      <anchorfile>a04333.html</anchorfile>
      <anchor>ab0a9d6a56eda7da48ed9c4a9ea31cc66</anchor>
      <arglist>(std::string title, std::ostream &amp;os=std::cerr, bool run=true, bool active=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TimeReport</name>
      <anchorfile>a04333.html</anchorfile>
      <anchor>a1ea3883865c76b665de24924840b23a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>active</name>
      <anchorfile>a04333.html</anchorfile>
      <anchor>ad9735e23cb0888fb98e1c5893aecff7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>active</name>
      <anchorfile>a04333.html</anchorfile>
      <anchor>ad7afc85c99104f2fc6cc0b1479684e86</anchor>
      <arglist>(bool a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::TimeStamp</name>
    <filename>a04325.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Format</name>
      <anchorfile>a04325.html</anchorfile>
      <anchor>ab4e88c89b3b7ea1735996cc4def22d58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMAL</name>
      <anchorfile>a04325.html</anchorfile>
      <anchor>ab4e88c89b3b7ea1735996cc4def22d58a50d1448013c6f17125caee18aa418af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SHORT</name>
      <anchorfile>a04325.html</anchorfile>
      <anchor>ab4e88c89b3b7ea1735996cc4def22d58a7a1fe3ba88f0c16cb494922948a9597d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMAL</name>
      <anchorfile>a04325.html</anchorfile>
      <anchor>ab4e88c89b3b7ea1735996cc4def22d58a50d1448013c6f17125caee18aa418af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SHORT</name>
      <anchorfile>a04325.html</anchorfile>
      <anchor>ab4e88c89b3b7ea1735996cc4def22d58a7a1fe3ba88f0c16cb494922948a9597d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stamp</name>
      <anchorfile>a04325.html</anchorfile>
      <anchor>a130b5680827b41a6316cf211b7b1dc08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeStamp</name>
      <anchorfile>a04325.html</anchorfile>
      <anchor>a1ae4a35dfcd8d6cd86ac79b723b463be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeStamp</name>
      <anchorfile>a04325.html</anchorfile>
      <anchor>ab653dbae07ad3594dcb2b3804df01da0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type>TimeStamp &amp;</type>
      <name>reset</name>
      <anchorfile>a04325.html</anchorfile>
      <anchor>a3c8a00141996e34136e2025bd9d2b10e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TimeStamp &amp;</type>
      <name>operator+=</name>
      <anchorfile>a04325.html</anchorfile>
      <anchor>adc75cb1de5387aab879cb9004f06a25e</anchor>
      <arglist>(const TimeStamp &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>TimeStamp</type>
      <name>operator+</name>
      <anchorfile>a04325.html</anchorfile>
      <anchor>a60628afc0b59995e53ea70aed982d1e3</anchor>
      <arglist>(const TimeStamp &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>TimeStamp &amp;</type>
      <name>operator-=</name>
      <anchorfile>a04325.html</anchorfile>
      <anchor>a7d6e8adcd702074cb50f8129541df576</anchor>
      <arglist>(const TimeStamp &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>TimeStamp</type>
      <name>operator-</name>
      <anchorfile>a04325.html</anchorfile>
      <anchor>ab5220d4df35156741db911752a598f16</anchor>
      <arglist>(const TimeStamp &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>TimeStamp &amp;</type>
      <name>operator*=</name>
      <anchorfile>a04325.html</anchorfile>
      <anchor>a1211cb3b2213896c0381b70e5f763ad4</anchor>
      <arglist>(double b)</arglist>
    </member>
    <member kind="function">
      <type>TimeStamp</type>
      <name>operator*</name>
      <anchorfile>a04325.html</anchorfile>
      <anchor>a0909075b55802e9c66f2419bdede7bb2</anchor>
      <arglist>(double b) const</arglist>
    </member>
    <member kind="function">
      <type>TimeStamp &amp;</type>
      <name>operator/=</name>
      <anchorfile>a04325.html</anchorfile>
      <anchor>a645205eb5cd5dd12d0a462ff44b713c4</anchor>
      <arglist>(double b)</arglist>
    </member>
    <member kind="function">
      <type>TimeStamp</type>
      <name>operator/</name>
      <anchorfile>a04325.html</anchorfile>
      <anchor>a39111b427d131adcb5603c942a890170</anchor>
      <arglist>(double b) const</arglist>
    </member>
    <member kind="function">
      <type>TimeStamp</type>
      <name>ellapsed</name>
      <anchorfile>a04325.html</anchorfile>
      <anchor>a245b051eda74a94ae527eaf97434c914</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>userTime</name>
      <anchorfile>a04325.html</anchorfile>
      <anchor>ae2426450381f1a4d4c221451b076c031</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>systemTime</name>
      <anchorfile>a04325.html</anchorfile>
      <anchor>a9cea278086f035ee936ac27f28305290</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cUserTime</name>
      <anchorfile>a04325.html</anchorfile>
      <anchor>ab3ed5ca82b4507a167cefe8f913cf85c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cSystemTime</name>
      <anchorfile>a04325.html</anchorfile>
      <anchor>a2c5afcc92616e544f5222c628d74a8df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>realTime</name>
      <anchorfile>a04325.html</anchorfile>
      <anchor>a57e0574e3056e75722cc56d491270712</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>format</name>
      <anchorfile>a04325.html</anchorfile>
      <anchor>ae94dc39f486a57a9724a3461c9c95d6f</anchor>
      <arglist>(Format f)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Format</type>
      <name>format</name>
      <anchorfile>a04325.html</anchorfile>
      <anchor>a984a2eab9671f6ce38992498a8a2d94d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00541.html</anchorfile>
      <anchor>ga7a8fc6a89c07865a42b13d6a2bbcbbcb</anchor>
      <arglist>(std::ostream &amp;os, const TimeStamp &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::Tolerance</name>
    <filename>a04341.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>less</name>
      <anchorfile>a04341.html</anchorfile>
      <anchor>a2a96b31f1a042a6b099f1252a7e88d8d</anchor>
      <arglist>(Value a, Value b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>different</name>
      <anchorfile>a04341.html</anchorfile>
      <anchor>a3347b4c48c20385af1e0a3bcae825a70</anchor>
      <arglist>(Value a, Value b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>positive</name>
      <anchorfile>a04341.html</anchorfile>
      <anchor>a48f208e5bc36bd09cb0e38c65bbc864d</anchor>
      <arglist>(Value a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>negative</name>
      <anchorfile>a04341.html</anchorfile>
      <anchor>a0f3a83e592e31a91b5ae73b221180c25</anchor>
      <arglist>(Value a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>nonZero</name>
      <anchorfile>a04341.html</anchorfile>
      <anchor>a9568ce99a273f6c593ff87ecdaae9c40</anchor>
      <arglist>(Value a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Value</type>
      <name>zero</name>
      <anchorfile>a04341.html</anchorfile>
      <anchor>af24efe5c6b0edcb586538222fb5b1024</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>less</name>
      <anchorfile>a04341.html</anchorfile>
      <anchor>a2a96b31f1a042a6b099f1252a7e88d8d</anchor>
      <arglist>(Value a, Value b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>different</name>
      <anchorfile>a04341.html</anchorfile>
      <anchor>a3347b4c48c20385af1e0a3bcae825a70</anchor>
      <arglist>(Value a, Value b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>positive</name>
      <anchorfile>a04341.html</anchorfile>
      <anchor>a48f208e5bc36bd09cb0e38c65bbc864d</anchor>
      <arglist>(Value a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>negative</name>
      <anchorfile>a04341.html</anchorfile>
      <anchor>a0f3a83e592e31a91b5ae73b221180c25</anchor>
      <arglist>(Value a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>nonZero</name>
      <anchorfile>a04341.html</anchorfile>
      <anchor>a9568ce99a273f6c593ff87ecdaae9c40</anchor>
      <arglist>(Value a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::Tolerance&lt; double &gt;</name>
    <filename>a04349.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>less</name>
      <anchorfile>a04349.html</anchorfile>
      <anchor>aa793f2ee44233bcc338541f5af31ed86</anchor>
      <arglist>(Value a, Value b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>different</name>
      <anchorfile>a04349.html</anchorfile>
      <anchor>a481baf2480ba3bbd8d6b84f883e8b782</anchor>
      <arglist>(Value a, Value b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>positive</name>
      <anchorfile>a04349.html</anchorfile>
      <anchor>a4af6cfdd82493a74ca0264551cfdff6d</anchor>
      <arglist>(Value a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>negative</name>
      <anchorfile>a04349.html</anchorfile>
      <anchor>a229faaac80e37278e8f3f93c69577e6f</anchor>
      <arglist>(Value a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nonZero</name>
      <anchorfile>a04349.html</anchorfile>
      <anchor>a1d5b3c52dfa40371489b54d05507e64c</anchor>
      <arglist>(Value a) const</arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Value</name>
      <anchorfile>a04349.html</anchorfile>
      <anchor>a566a00621638570a4186414035153a2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tolerance</name>
      <anchorfile>a04349.html</anchorfile>
      <anchor>a9fb4f4c61a9530cf159b6d73e0a1e74f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tolerance</name>
      <anchorfile>a04349.html</anchorfile>
      <anchor>a9945dec0f6e6f3cf19597b2f7fa313b1</anchor>
      <arglist>(double e)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>epsilon</name>
      <anchorfile>a04349.html</anchorfile>
      <anchor>aa03ac261dff915b3ecfaba003d02ff3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>epsilon</name>
      <anchorfile>a04349.html</anchorfile>
      <anchor>a7ddb109de0243aa3f74ba0e2fc79e42c</anchor>
      <arglist>(Value e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>less</name>
      <anchorfile>a04349.html</anchorfile>
      <anchor>aa793f2ee44233bcc338541f5af31ed86</anchor>
      <arglist>(Value a, Value b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>different</name>
      <anchorfile>a04349.html</anchorfile>
      <anchor>a481baf2480ba3bbd8d6b84f883e8b782</anchor>
      <arglist>(Value a, Value b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>positive</name>
      <anchorfile>a04349.html</anchorfile>
      <anchor>a4af6cfdd82493a74ca0264551cfdff6d</anchor>
      <arglist>(Value a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>negative</name>
      <anchorfile>a04349.html</anchorfile>
      <anchor>a229faaac80e37278e8f3f93c69577e6f</anchor>
      <arglist>(Value a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nonZero</name>
      <anchorfile>a04349.html</anchorfile>
      <anchor>a1d5b3c52dfa40371489b54d05507e64c</anchor>
      <arglist>(Value a) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Value</type>
      <name>defaultEpsilon</name>
      <anchorfile>a04349.html</anchorfile>
      <anchor>a786f69286455a315d2e866777f56e384</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>defaultEpsilon</name>
      <anchorfile>a04349.html</anchorfile>
      <anchor>a00e9ca3993439df8046386e963c17f96</anchor>
      <arglist>(Value e)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Value</type>
      <name>zero</name>
      <anchorfile>a04349.html</anchorfile>
      <anchor>af24efe5c6b0edcb586538222fb5b1024</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::Tolerance&lt; float &gt;</name>
    <filename>a04345.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>less</name>
      <anchorfile>a04345.html</anchorfile>
      <anchor>aa793f2ee44233bcc338541f5af31ed86</anchor>
      <arglist>(Value a, Value b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>different</name>
      <anchorfile>a04345.html</anchorfile>
      <anchor>a481baf2480ba3bbd8d6b84f883e8b782</anchor>
      <arglist>(Value a, Value b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>positive</name>
      <anchorfile>a04345.html</anchorfile>
      <anchor>a4af6cfdd82493a74ca0264551cfdff6d</anchor>
      <arglist>(Value a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>negative</name>
      <anchorfile>a04345.html</anchorfile>
      <anchor>a229faaac80e37278e8f3f93c69577e6f</anchor>
      <arglist>(Value a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nonZero</name>
      <anchorfile>a04345.html</anchorfile>
      <anchor>a1d5b3c52dfa40371489b54d05507e64c</anchor>
      <arglist>(Value a) const</arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>Value</name>
      <anchorfile>a04345.html</anchorfile>
      <anchor>a18cf6695002fb1308814915b24fb1c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tolerance</name>
      <anchorfile>a04345.html</anchorfile>
      <anchor>a9fb4f4c61a9530cf159b6d73e0a1e74f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tolerance</name>
      <anchorfile>a04345.html</anchorfile>
      <anchor>a1a95b75b6f3503b87ff886003df8503a</anchor>
      <arglist>(float e)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>epsilon</name>
      <anchorfile>a04345.html</anchorfile>
      <anchor>aa03ac261dff915b3ecfaba003d02ff3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>epsilon</name>
      <anchorfile>a04345.html</anchorfile>
      <anchor>a7ddb109de0243aa3f74ba0e2fc79e42c</anchor>
      <arglist>(Value e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>less</name>
      <anchorfile>a04345.html</anchorfile>
      <anchor>aa793f2ee44233bcc338541f5af31ed86</anchor>
      <arglist>(Value a, Value b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>different</name>
      <anchorfile>a04345.html</anchorfile>
      <anchor>a481baf2480ba3bbd8d6b84f883e8b782</anchor>
      <arglist>(Value a, Value b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>positive</name>
      <anchorfile>a04345.html</anchorfile>
      <anchor>a4af6cfdd82493a74ca0264551cfdff6d</anchor>
      <arglist>(Value a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>negative</name>
      <anchorfile>a04345.html</anchorfile>
      <anchor>a229faaac80e37278e8f3f93c69577e6f</anchor>
      <arglist>(Value a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nonZero</name>
      <anchorfile>a04345.html</anchorfile>
      <anchor>a1d5b3c52dfa40371489b54d05507e64c</anchor>
      <arglist>(Value a) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Value</type>
      <name>defaultEpsilon</name>
      <anchorfile>a04345.html</anchorfile>
      <anchor>a786f69286455a315d2e866777f56e384</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>defaultEpsilon</name>
      <anchorfile>a04345.html</anchorfile>
      <anchor>a00e9ca3993439df8046386e963c17f96</anchor>
      <arglist>(Value e)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Value</type>
      <name>zero</name>
      <anchorfile>a04345.html</anchorfile>
      <anchor>af24efe5c6b0edcb586538222fb5b1024</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::Tolerance&lt; long double &gt;</name>
    <filename>a04353.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>less</name>
      <anchorfile>a04353.html</anchorfile>
      <anchor>aa793f2ee44233bcc338541f5af31ed86</anchor>
      <arglist>(Value a, Value b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>different</name>
      <anchorfile>a04353.html</anchorfile>
      <anchor>a481baf2480ba3bbd8d6b84f883e8b782</anchor>
      <arglist>(Value a, Value b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>positive</name>
      <anchorfile>a04353.html</anchorfile>
      <anchor>a4af6cfdd82493a74ca0264551cfdff6d</anchor>
      <arglist>(Value a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>negative</name>
      <anchorfile>a04353.html</anchorfile>
      <anchor>a229faaac80e37278e8f3f93c69577e6f</anchor>
      <arglist>(Value a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nonZero</name>
      <anchorfile>a04353.html</anchorfile>
      <anchor>a1d5b3c52dfa40371489b54d05507e64c</anchor>
      <arglist>(Value a) const</arglist>
    </member>
    <member kind="typedef">
      <type>long double</type>
      <name>Value</name>
      <anchorfile>a04353.html</anchorfile>
      <anchor>a0b5c2e30f1eb10bc1d304bb91ec99a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tolerance</name>
      <anchorfile>a04353.html</anchorfile>
      <anchor>a9fb4f4c61a9530cf159b6d73e0a1e74f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tolerance</name>
      <anchorfile>a04353.html</anchorfile>
      <anchor>a4a809dde05056773bbf1414bf3bfa8bf</anchor>
      <arglist>(long double e)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>epsilon</name>
      <anchorfile>a04353.html</anchorfile>
      <anchor>aa03ac261dff915b3ecfaba003d02ff3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>epsilon</name>
      <anchorfile>a04353.html</anchorfile>
      <anchor>a7ddb109de0243aa3f74ba0e2fc79e42c</anchor>
      <arglist>(Value e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>less</name>
      <anchorfile>a04353.html</anchorfile>
      <anchor>aa793f2ee44233bcc338541f5af31ed86</anchor>
      <arglist>(Value a, Value b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>different</name>
      <anchorfile>a04353.html</anchorfile>
      <anchor>a481baf2480ba3bbd8d6b84f883e8b782</anchor>
      <arglist>(Value a, Value b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>positive</name>
      <anchorfile>a04353.html</anchorfile>
      <anchor>a4af6cfdd82493a74ca0264551cfdff6d</anchor>
      <arglist>(Value a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>negative</name>
      <anchorfile>a04353.html</anchorfile>
      <anchor>a229faaac80e37278e8f3f93c69577e6f</anchor>
      <arglist>(Value a) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nonZero</name>
      <anchorfile>a04353.html</anchorfile>
      <anchor>a1d5b3c52dfa40371489b54d05507e64c</anchor>
      <arglist>(Value a) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Value</type>
      <name>defaultEpsilon</name>
      <anchorfile>a04353.html</anchorfile>
      <anchor>a786f69286455a315d2e866777f56e384</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>defaultEpsilon</name>
      <anchorfile>a04353.html</anchorfile>
      <anchor>a00e9ca3993439df8046386e963c17f96</anchor>
      <arglist>(Value e)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Value</type>
      <name>zero</name>
      <anchorfile>a04353.html</anchorfile>
      <anchor>af24efe5c6b0edcb586538222fb5b1024</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::IterableBoolMap::TrueIt</name>
    <filename>a03605.html</filename>
    <member kind="function">
      <type></type>
      <name>TrueIt</name>
      <anchorfile>a03605.html</anchorfile>
      <anchor>ae2565f266cad731d0fb512b6bfd3034f</anchor>
      <arglist>(const IterableBoolMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrueIt</name>
      <anchorfile>a03605.html</anchorfile>
      <anchor>a3c57526c58374bb2384dd25bac804527</anchor>
      <arglist>(Invalid)</arglist>
    </member>
    <member kind="function">
      <type>TrueIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a03605.html</anchorfile>
      <anchor>a713377d14834dc4a8067c9da94242527</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::TrueMap</name>
    <filename>a03525.html</filename>
    <templarg></templarg>
    <base>MapBase&lt; K, bool &gt;</base>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a03525.html</anchorfile>
      <anchor>a2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>Value</name>
      <anchorfile>a03525.html</anchorfile>
      <anchor>aaf2b2f1e7bba19591a125e352c5d7bda</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a03525.html</anchorfile>
      <anchor>a2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>TrueMap&lt; K &gt;</type>
      <name>trueMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>ga58e5052d50110f3f5cb312b38c31b805</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::Undirector</name>
    <filename>a01533.html</filename>
    <templarg></templarg>
    <class kind="class">lemon::Undirector::CombinedArcMap</class>
    <member kind="typedef">
      <type>DGR</type>
      <name>Digraph</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a6435ad6a242e3d323a0dfffd053d9584</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Undirector</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>ab3b1215366b82b7585ffe3950ba8cb3f</anchor>
      <arglist>(DGR &amp;digraph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CombinedArcMap&lt; FW, BK &gt;</type>
      <name>combinedArcMap</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a679350be01d46c3627e6ce2185a54247</anchor>
      <arglist>(FW &amp;forward, BK &amp;backward)</arglist>
    </member>
    <member kind="function">
      <type>Undirector&lt; const DGR &gt;</type>
      <name>undirector</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>gaebf4f5d421ecb3a11161a2efca58bbd9</anchor>
      <arglist>(const DGR &amp;digraph)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Undirector&lt; const Digraph &gt;</name>
    <filename>a01533.html</filename>
    <member kind="typedef">
      <type>const Digraph</type>
      <name>Digraph</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a6435ad6a242e3d323a0dfffd053d9584</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Undirector</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>ab3b1215366b82b7585ffe3950ba8cb3f</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CombinedArcMap&lt; FW, BK &gt;</type>
      <name>combinedArcMap</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a679350be01d46c3627e6ce2185a54247</anchor>
      <arglist>(FW &amp;forward, BK &amp;backward)</arglist>
    </member>
    <member kind="function">
      <type>Undirector&lt; const const Digraph &gt;</type>
      <name>undirector</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>gaebf4f5d421ecb3a11161a2efca58bbd9</anchor>
      <arglist>(const const Digraph &amp;digraph)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::UnionFind</name>
    <filename>a04357.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>IM</type>
      <name>ItemIntMap</name>
      <anchorfile>a04357.html</anchorfile>
      <anchor>ac00a2d6f039b6e8ffc0641530bdf5304</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ItemIntMap::Key</type>
      <name>Item</name>
      <anchorfile>a04357.html</anchorfile>
      <anchor>a70025b32b600038ee2981a3deab1a783</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnionFind</name>
      <anchorfile>a04357.html</anchorfile>
      <anchor>a23eb9f42b64ad319bd13e7b39921f9e1</anchor>
      <arglist>(ItemIntMap &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchorfile>a04357.html</anchorfile>
      <anchor>a9208c8cfd1194fc80116f291ca20cc8a</anchor>
      <arglist>(const Item &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a04357.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a04357.html</anchorfile>
      <anchor>a68ecd7821136d47f859542f44ef40138</anchor>
      <arglist>(const Item &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>join</name>
      <anchorfile>a04357.html</anchorfile>
      <anchor>a5dffafed442e04c5a749b3790d35a888</anchor>
      <arglist>(const Item &amp;a, const Item &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a04357.html</anchorfile>
      <anchor>aedb3794e47f1fcb65a6902b79ea679d3</anchor>
      <arglist>(const Item &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::UnionFindEnum</name>
    <filename>a04361.html</filename>
    <templarg></templarg>
    <class kind="class">lemon::UnionFindEnum::ClassIt</class>
    <class kind="class">lemon::UnionFindEnum::ItemIt</class>
    <member kind="typedef">
      <type>IM</type>
      <name>ItemIntMap</name>
      <anchorfile>a04361.html</anchorfile>
      <anchor>ac00a2d6f039b6e8ffc0641530bdf5304</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ItemIntMap::Key</type>
      <name>Item</name>
      <anchorfile>a04361.html</anchorfile>
      <anchor>a70025b32b600038ee2981a3deab1a783</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a04361.html</anchorfile>
      <anchor>a59869ec643e4a302e58808739ad532ec</anchor>
      <arglist>(const Item &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a04361.html</anchorfile>
      <anchor>a1762b08b3b35b8b1a3d1f6d26f389fd1</anchor>
      <arglist>(const Item &amp;item, int cls)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a04361.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchorfile>a04361.html</anchorfile>
      <anchor>a9ca2e6cba218180f759b3fb54880f4a8</anchor>
      <arglist>(const Item &amp;item) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>join</name>
      <anchorfile>a04361.html</anchorfile>
      <anchor>ad536c4d31fc031687d301a8eff68699c</anchor>
      <arglist>(const Item &amp;a, const Item &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a04361.html</anchorfile>
      <anchor>ab76a35ebc7930229244a21c34914c272</anchor>
      <arglist>(int cls) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>a04361.html</anchorfile>
      <anchor>af63fdc55f882427953a7a8a348e49642</anchor>
      <arglist>(int cls)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a04361.html</anchorfile>
      <anchor>ab71f9a526f9dfa9ded1fdd78189c3e37</anchor>
      <arglist>(const Item &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>Item</type>
      <name>item</name>
      <anchorfile>a04361.html</anchorfile>
      <anchor>a3d19d234dbb32719a2edea613149bc6b</anchor>
      <arglist>(int cls) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseClass</name>
      <anchorfile>a04361.html</anchorfile>
      <anchor>a9cafaae8d2a6a124f500d5cd774c10fc</anchor>
      <arglist>(int cls)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::LpBase::UnsupportedFormatError</name>
    <filename>a03401.html</filename>
    <base>lemon::Exception</base>
  </compound>
  <compound kind="class">
    <name>lemon::CrossRefMap::ValueIt</name>
    <filename>a03581.html</filename>
    <member kind="function">
      <type></type>
      <name>ValueIt</name>
      <anchorfile>a03581.html</anchorfile>
      <anchor>a87715c49d6f9d7aecbb1d7ec75625704</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ValueIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a03581.html</anchorfile>
      <anchor>a95031ea64642e14bc65d96f342d60ebb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ValueIt</type>
      <name>operator++</name>
      <anchorfile>a03581.html</anchorfile>
      <anchor>acd00bd5cd097f229ec9ee15092b47eac</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator*</name>
      <anchorfile>a03581.html</anchorfile>
      <anchor>a94c2cb00389ca25a69e2534d50709feb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Value *</type>
      <name>operator-&gt;</name>
      <anchorfile>a03581.html</anchorfile>
      <anchor>a36f53fd2fa8118c4aaa2b0bcebfedde7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a03581.html</anchorfile>
      <anchor>a1dc1e942f880bcd14fad61150c0d161a</anchor>
      <arglist>(ValueIt jt) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a03581.html</anchorfile>
      <anchor>a3e23d3a0423e0f7130ffd430ca33b746</anchor>
      <arglist>(ValueIt jt) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::IterableValueMap::ValueIt</name>
    <filename>a03641.html</filename>
    <member kind="function">
      <type></type>
      <name>ValueIt</name>
      <anchorfile>a03641.html</anchorfile>
      <anchor>a87715c49d6f9d7aecbb1d7ec75625704</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ValueIt &amp;</type>
      <name>operator++</name>
      <anchorfile>a03641.html</anchorfile>
      <anchor>a95031ea64642e14bc65d96f342d60ebb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ValueIt</type>
      <name>operator++</name>
      <anchorfile>a03641.html</anchorfile>
      <anchor>acd00bd5cd097f229ec9ee15092b47eac</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator*</name>
      <anchorfile>a03641.html</anchorfile>
      <anchor>a94c2cb00389ca25a69e2534d50709feb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Value *</type>
      <name>operator-&gt;</name>
      <anchorfile>a03641.html</anchorfile>
      <anchor>a36f53fd2fa8118c4aaa2b0bcebfedde7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a03641.html</anchorfile>
      <anchor>a1dc1e942f880bcd14fad61150c0d161a</anchor>
      <arglist>(ValueIt jt) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a03641.html</anchorfile>
      <anchor>a3e23d3a0423e0f7130ffd430ca33b746</anchor>
      <arglist>(ValueIt jt) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::concepts::WriteMap</name>
    <filename>a05549.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriteMap</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga7988a5ffa9402369408447cb21be1123</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WriteMap&lt; Arc, T &gt;</name>
    <filename>a05549.html</filename>
    <member kind="typedef">
      <type>Arc</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriteMap</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga7988a5ffa9402369408447cb21be1123</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WriteMap&lt; Arc, V &gt;</name>
    <filename>a05549.html</filename>
    <member kind="typedef">
      <type>Arc</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriteMap</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga7988a5ffa9402369408447cb21be1123</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WriteMap&lt; Edge, T &gt;</name>
    <filename>a05549.html</filename>
    <member kind="typedef">
      <type>Edge</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriteMap</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga7988a5ffa9402369408447cb21be1123</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WriteMap&lt; Edge, V &gt;</name>
    <filename>a05549.html</filename>
    <member kind="typedef">
      <type>Edge</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriteMap</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga7988a5ffa9402369408447cb21be1123</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WriteMap&lt; K, V &gt;</name>
    <filename>a05549.html</filename>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriteMap</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga7988a5ffa9402369408447cb21be1123</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WriteMap&lt; Node, T &gt;</name>
    <filename>a05549.html</filename>
    <member kind="typedef">
      <type>Node</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriteMap</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga7988a5ffa9402369408447cb21be1123</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WriteMap&lt; Node, V &gt;</name>
    <filename>a05549.html</filename>
    <member kind="typedef">
      <type>Node</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriteMap</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga7988a5ffa9402369408447cb21be1123</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::dim2::XMap</name>
    <filename>a02405.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>XMap</name>
      <anchorfile>a02405.html</anchorfile>
      <anchor>a70c36f0d3b618043d829adc868b85072</anchor>
      <arglist>(M &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>XMap&lt; M &gt;</type>
      <name>xMap</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>gae41a8ab860bdbb63080b0e509c487c57</anchor>
      <arglist>(M &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lemon::dim2::YMap</name>
    <filename>a02413.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>YMap</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>ab5f6a5b671ba21e3dd3164a28c6d4d1f</anchor>
      <arglist>(M &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>YMap&lt; M &gt;</type>
      <name>yMap</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>ga4b8a44ffc54cb9a2db2517d2a17f18af</anchor>
      <arglist>(M &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>lemon</name>
    <filename>a00554.html</filename>
    <namespace>lemon::concepts</namespace>
    <namespace>lemon::dim2</namespace>
    <class kind="class">lemon::AbsMap</class>
    <class kind="class">lemon::AddMap</class>
    <class kind="class">lemon::AllArcLookUp</class>
    <class kind="class">lemon::AndMap</class>
    <class kind="class">lemon::ArcLookUp</class>
    <class kind="class">lemon::ArgParser</class>
    <class kind="class">lemon::ArgParserException</class>
    <class kind="class">lemon::BackwardMap</class>
    <class kind="class">lemon::BellmanFord</class>
    <class kind="struct">lemon::BellmanFordDefaultOperationTraits</class>
    <class kind="struct">lemon::BellmanFordDefaultTraits</class>
    <class kind="class">lemon::BellmanFordWizard</class>
    <class kind="class">lemon::BellmanFordWizardBase</class>
    <class kind="struct">lemon::BellmanFordWizardDefaultTraits</class>
    <class kind="class">lemon::Bfs</class>
    <class kind="struct">lemon::BfsDefaultTraits</class>
    <class kind="class">lemon::BfsVisit</class>
    <class kind="struct">lemon::BfsVisitDefaultTraits</class>
    <class kind="struct">lemon::BfsVisitor</class>
    <class kind="class">lemon::BfsWizard</class>
    <class kind="class">lemon::BfsWizardBase</class>
    <class kind="struct">lemon::BfsWizardDefaultTraits</class>
    <class kind="class">lemon::BinHeap</class>
    <class kind="class">lemon::BinomialHeap</class>
    <class kind="class">lemon::BpGraphCopy</class>
    <class kind="class">lemon::BpGraphReader</class>
    <class kind="class">lemon::BpGraphWriter</class>
    <class kind="class">lemon::BucketHeap</class>
    <class kind="class">lemon::CapacityScaling</class>
    <class kind="struct">lemon::CapacityScalingDefaultTraits</class>
    <class kind="class">lemon::CbcMip</class>
    <class kind="class">lemon::ChristofidesTsp</class>
    <class kind="class">lemon::Circulation</class>
    <class kind="struct">lemon::CirculationDefaultTraits</class>
    <class kind="class">lemon::ClpLp</class>
    <class kind="class">lemon::Color</class>
    <class kind="class">lemon::CombineMap</class>
    <class kind="class">lemon::ComposeMap</class>
    <class kind="class">lemon::ConArcIt</class>
    <class kind="class">lemon::ConEdgeIt</class>
    <class kind="class">lemon::ConstMap</class>
    <class kind="class">lemon::ConstMap&lt; K, Const&lt; V, v &gt; &gt;</class>
    <class kind="class">lemon::ConvertMap</class>
    <class kind="class">lemon::CostScaling</class>
    <class kind="struct">lemon::CostScalingDefaultTraits</class>
    <class kind="class">lemon::Counter</class>
    <class kind="class">lemon::CplexBase</class>
    <class kind="class">lemon::CplexEnv</class>
    <class kind="class">lemon::CplexLp</class>
    <class kind="class">lemon::CplexMip</class>
    <class kind="class">lemon::CrossRefMap</class>
    <class kind="class">lemon::CycleCanceling</class>
    <class kind="struct">lemon::DefaultGraphToEpsTraits</class>
    <class kind="class">lemon::Dfs</class>
    <class kind="struct">lemon::DfsDefaultTraits</class>
    <class kind="class">lemon::DfsVisit</class>
    <class kind="struct">lemon::DfsVisitDefaultTraits</class>
    <class kind="struct">lemon::DfsVisitor</class>
    <class kind="class">lemon::DfsWizard</class>
    <class kind="class">lemon::DfsWizardBase</class>
    <class kind="struct">lemon::DfsWizardDefaultTraits</class>
    <class kind="class">lemon::DHeap</class>
    <class kind="class">lemon::DiEulerIt</class>
    <class kind="class">lemon::DigraphCopy</class>
    <class kind="class">lemon::DigraphReader</class>
    <class kind="class">lemon::DigraphWriter</class>
    <class kind="class">lemon::Dijkstra</class>
    <class kind="struct">lemon::DijkstraDefaultOperationTraits</class>
    <class kind="struct">lemon::DijkstraDefaultTraits</class>
    <class kind="class">lemon::DijkstraWizard</class>
    <class kind="class">lemon::DijkstraWizardBase</class>
    <class kind="struct">lemon::DijkstraWizardDefaultTraits</class>
    <class kind="struct">lemon::DimacsDescriptor</class>
    <class kind="class">lemon::DivMap</class>
    <class kind="class">lemon::DynArcLookUp</class>
    <class kind="class">lemon::EdmondsKarp</class>
    <class kind="struct">lemon::EdmondsKarpDefaultTraits</class>
    <class kind="class">lemon::Elevator</class>
    <class kind="class">lemon::EqualMap</class>
    <class kind="class">lemon::EulerIt</class>
    <class kind="class">lemon::Exception</class>
    <class kind="class">lemon::ExtendFindEnum</class>
    <class kind="class">lemon::FalseMap</class>
    <class kind="class">lemon::FibHeap</class>
    <class kind="class">lemon::FilterArcs</class>
    <class kind="class">lemon::FilterEdges</class>
    <class kind="class">lemon::FilterNodes</class>
    <class kind="class">lemon::ForkMap</class>
    <class kind="class">lemon::FormatError</class>
    <class kind="class">lemon::ForwardMap</class>
    <class kind="class">lemon::FullBpGraph</class>
    <class kind="class">lemon::FullDigraph</class>
    <class kind="class">lemon::FullGraph</class>
    <class kind="class">lemon::FunctorToMap</class>
    <class kind="class">lemon::GlpkBase</class>
    <class kind="class">lemon::GlpkLp</class>
    <class kind="class">lemon::GlpkMip</class>
    <class kind="class">lemon::GomoryHu</class>
    <class kind="class">lemon::GraphCopy</class>
    <class kind="class">lemon::GraphReader</class>
    <class kind="class">lemon::GraphToEps</class>
    <class kind="class">lemon::GraphWriter</class>
    <class kind="class">lemon::GreedyTsp</class>
    <class kind="class">lemon::GridGraph</class>
    <class kind="class">lemon::GrossoLocatelliPullanMc</class>
    <class kind="class">lemon::HaoOrlin</class>
    <class kind="class">lemon::HartmannOrlinMmc</class>
    <class kind="struct">lemon::HartmannOrlinMmcDefaultTraits</class>
    <class kind="class">lemon::HeapUnionFind</class>
    <class kind="class">lemon::HowardMmc</class>
    <class kind="struct">lemon::HowardMmcDefaultTraits</class>
    <class kind="class">lemon::HypercubeGraph</class>
    <class kind="class">lemon::IdentityMap</class>
    <class kind="class">lemon::IdMap</class>
    <class kind="class">lemon::InDegMap</class>
    <class kind="class">lemon::InsertionTsp</class>
    <class kind="struct">lemon::Invalid</class>
    <class kind="class">lemon::IoError</class>
    <class kind="class">lemon::IterableBoolMap</class>
    <class kind="class">lemon::IterableIntMap</class>
    <class kind="class">lemon::IterableValueMap</class>
    <class kind="class">lemon::KarpMmc</class>
    <class kind="struct">lemon::KarpMmcDefaultTraits</class>
    <class kind="class">lemon::LessMap</class>
    <class kind="class">lemon::LgfContents</class>
    <class kind="class">lemon::LinkedElevator</class>
    <class kind="class">lemon::ListArcSet</class>
    <class kind="class">lemon::ListBpGraph</class>
    <class kind="class">lemon::ListDigraph</class>
    <class kind="class">lemon::ListEdgeSet</class>
    <class kind="class">lemon::ListGraph</class>
    <class kind="class">lemon::ListPath</class>
    <class kind="class">lemon::LoggerBoolMap</class>
    <class kind="class">lemon::LpBase</class>
    <class kind="class">lemon::LpSkeleton</class>
    <class kind="class">lemon::LpSolver</class>
    <class kind="class">lemon::MapBase</class>
    <class kind="class">lemon::MapToFunctor</class>
    <class kind="class">lemon::MaxCardinalitySearch</class>
    <class kind="struct">lemon::MaxCardinalitySearchDefaultTraits</class>
    <class kind="class">lemon::MaxFractionalMatching</class>
    <class kind="struct">lemon::MaxFractionalMatchingDefaultTraits</class>
    <class kind="class">lemon::MaxMatching</class>
    <class kind="class">lemon::MaxWeightedFractionalMatching</class>
    <class kind="class">lemon::MaxWeightedMatching</class>
    <class kind="class">lemon::MaxWeightedPerfectFractionalMatching</class>
    <class kind="class">lemon::MaxWeightedPerfectMatching</class>
    <class kind="class">lemon::MinCostArborescence</class>
    <class kind="struct">lemon::MinCostArborescenceDefaultTraits</class>
    <class kind="class">lemon::MipSkeleton</class>
    <class kind="class">lemon::MipSolver</class>
    <class kind="class">lemon::MulMap</class>
    <class kind="class">lemon::NagamochiIbaraki</class>
    <class kind="struct">lemon::NagamochiIbarakiDefaultTraits</class>
    <class kind="class">lemon::NearestNeighborTsp</class>
    <class kind="class">lemon::NegMap</class>
    <class kind="class">lemon::NegWriteMap</class>
    <class kind="class">lemon::NetworkSimplex</class>
    <class kind="class">lemon::NoCounter</class>
    <class kind="class">lemon::NoTimeReport</class>
    <class kind="class">lemon::NotMap</class>
    <class kind="class">lemon::NotWriteMap</class>
    <class kind="class">lemon::NullMap</class>
    <class kind="class">lemon::Opt2Tsp</class>
    <class kind="class">lemon::Orienter</class>
    <class kind="class">lemon::OrMap</class>
    <class kind="class">lemon::OutDegMap</class>
    <class kind="class">lemon::PairingHeap</class>
    <class kind="class">lemon::Palette</class>
    <class kind="class">lemon::Path</class>
    <class kind="class">lemon::PathNodeIt</class>
    <class kind="class">lemon::PlanarColoring</class>
    <class kind="class">lemon::PlanarDrawing</class>
    <class kind="class">lemon::PlanarEmbedding</class>
    <class kind="class">lemon::PotentialDifferenceMap</class>
    <class kind="class">lemon::Preflow</class>
    <class kind="struct">lemon::PreflowDefaultTraits</class>
    <class kind="class">lemon::QuadHeap</class>
    <class kind="class">lemon::RadixHeap</class>
    <class kind="class">lemon::Random</class>
    <class kind="class">lemon::RangeIdMap</class>
    <class kind="class">lemon::RangeMap</class>
    <class kind="class">lemon::ResidualDigraph</class>
    <class kind="class">lemon::ReverseDigraph</class>
    <class kind="class">lemon::ScaleMap</class>
    <class kind="class">lemon::ScaleWriteMap</class>
    <class kind="class">lemon::SectionReader</class>
    <class kind="class">lemon::SectionWriter</class>
    <class kind="class">lemon::ShiftMap</class>
    <class kind="class">lemon::ShiftWriteMap</class>
    <class kind="class">lemon::SimpleBucketHeap</class>
    <class kind="class">lemon::SimplePath</class>
    <class kind="class">lemon::SkeletonSolverBase</class>
    <class kind="class">lemon::SmartArcSet</class>
    <class kind="class">lemon::SmartBpGraph</class>
    <class kind="class">lemon::SmartDigraph</class>
    <class kind="class">lemon::SmartEdgeSet</class>
    <class kind="class">lemon::SmartGraph</class>
    <class kind="class">lemon::SoplexLp</class>
    <class kind="class">lemon::SourceMap</class>
    <class kind="class">lemon::SparseMap</class>
    <class kind="class">lemon::SplitNodes</class>
    <class kind="class">lemon::StaticDigraph</class>
    <class kind="class">lemon::StaticPath</class>
    <class kind="class">lemon::SubDigraph</class>
    <class kind="class">lemon::SubGraph</class>
    <class kind="class">lemon::SubMap</class>
    <class kind="class">lemon::Suurballe</class>
    <class kind="struct">lemon::SuurballeDefaultTraits</class>
    <class kind="class">lemon::TargetMap</class>
    <class kind="class">lemon::Timer</class>
    <class kind="class">lemon::TimeReport</class>
    <class kind="class">lemon::TimeStamp</class>
    <class kind="class">lemon::Tolerance</class>
    <class kind="class">lemon::Tolerance&lt; double &gt;</class>
    <class kind="class">lemon::Tolerance&lt; float &gt;</class>
    <class kind="class">lemon::Tolerance&lt; long double &gt;</class>
    <class kind="class">lemon::TrueMap</class>
    <class kind="class">lemon::Undirector</class>
    <class kind="class">lemon::UnionFind</class>
    <class kind="class">lemon::UnionFindEnum</class>
    <member kind="typedef">
      <type>GlpkLp</type>
      <name>Lp</name>
      <anchorfile>a00537.html</anchorfile>
      <anchor>ga8c6461f78849b26ae8be11062410d043</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GlpkMip</type>
      <name>Mip</name>
      <anchorfile>a00537.html</anchorfile>
      <anchor>gad4ee17c56e133b01b9d75eb2cefd4d7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>BellmanFordWizard&lt; BellmanFordWizardBase&lt; GR, LEN &gt; &gt;</type>
      <name>bellmanFord</name>
      <anchorfile>a00524.html</anchorfile>
      <anchor>ga359aa931ac3c9550d5b5b5f3ec2e9e56</anchor>
      <arglist>(const GR &amp;digraph, const LEN &amp;length)</arglist>
    </member>
    <member kind="function">
      <type>BfsWizard&lt; BfsWizardBase&lt; GR &gt; &gt;</type>
      <name>bfs</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>ga99817221896aba2eb403691a0a230a0b</anchor>
      <arglist>(const GR &amp;digraph)</arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>distantColor</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gaafbc768b20325e1e5048dcd2b10bc4e7</anchor>
      <arglist>(const Color &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>distantBW</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga22a184708d82339466dd08286e01a756</anchor>
      <arglist>(const Color &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>function_requires</name>
      <anchorfile>a00554.html</anchorfile>
      <anchor>a3b4bbb2e8a649d05287b65fdf29b6930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConcept</name>
      <anchorfile>a00554.html</anchorfile>
      <anchor>ac202d55258d62489acf256b88b87e470</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connected</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gad5c8d1b650f6b614a852f8430d90e184</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countConnectedComponents</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga33a9d9d4803cb15e83568b2526e978a5</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>connectedComponents</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gaa467a3e0a8c2e9e762650fd01fadff89</anchor>
      <arglist>(const Graph &amp;graph, NodeMap &amp;compMap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stronglyConnected</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gacd21b34d7b42b9835a204a57fcf15964</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countStronglyConnectedComponents</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gad30bc47dfffb78234eeee903cb3766f4</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>stronglyConnectedComponents</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga46f8c22f3e2989c4689faa4c46ec9436</anchor>
      <arglist>(const Digraph &amp;digraph, NodeMap &amp;compMap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>stronglyConnectedCutArcs</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gad7af5c3a97453e37f251f0e86dbb83db</anchor>
      <arglist>(const Digraph &amp;digraph, ArcMap &amp;cutMap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countBiNodeConnectedComponents</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gaf7c5744b2175210b8ea67897aaa27885</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>biNodeConnected</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gac9257323ead7cbe64b7b4a628c4876b3</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>biNodeConnectedComponents</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga9d70526ab54e10b4b6fe3762af8675dd</anchor>
      <arglist>(const Graph &amp;graph, EdgeMap &amp;compMap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>biNodeConnectedCutNodes</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga31461f33a748327ea3ef2a3199ffb6c7</anchor>
      <arglist>(const Graph &amp;graph, NodeMap &amp;cutMap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countBiEdgeConnectedComponents</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga4d5db78dc21099d075c3967484990954</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>biEdgeConnected</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga37d22a2ddd5a064a9203720f2b93518e</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>biEdgeConnectedComponents</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga76c1fdd1881d21677507100b7e96c983</anchor>
      <arglist>(const Graph &amp;graph, NodeMap &amp;compMap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>biEdgeConnectedCutEdges</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga58d444eba448c5f1a53539bd1b69636e</anchor>
      <arglist>(const Graph &amp;graph, EdgeMap &amp;cutMap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dag</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gaef2b43c8cd1d74e15fa5c7607bc5e396</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>topologicalSort</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gafc2cb20cf3859f157c0e12da7f310bb3</anchor>
      <arglist>(const Digraph &amp;digraph, NodeMap &amp;order)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkedTopologicalSort</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gaf10c5e1630e5720c20d83cfb77dbf024</anchor>
      <arglist>(const Digraph &amp;digraph, NodeMap &amp;order)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>acyclic</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga14c191b2133a1dd23e1527f074c821c0</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tree</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gad1e4de234e926958647905478415bd54</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bipartite</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga577db110d33bd487aaad5bfffb31c6f5</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bipartitePartitions</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga58ba1d00c569f0eb0deb42afca9f80bb</anchor>
      <arglist>(const Graph &amp;graph, NodeMap &amp;partMap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loopFree</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga127f3963003cd532c79c226885fe1c8c</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parallelFree</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gaa05e0683f90b69f31eb29fe7d09afde4</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>simpleGraph</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gae4c7ae734e2509ab78dc747d602c9236</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countItems</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga65f512e54ae6256fcd098592fc582e50</anchor>
      <arglist>(const Graph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countNodes</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga9156d36059e59ebc8dc14bad0112633d</anchor>
      <arglist>(const Graph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countRedNodes</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>gac1a04fa8a9e0460accf28c5337b2c5eb</anchor>
      <arglist>(const Graph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countBlueNodes</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga40c1bf81c7096481ca39f286eeb74163</anchor>
      <arglist>(const Graph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countArcs</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga1b3307d4e63c19d4ebadf133ebb43683</anchor>
      <arglist>(const Graph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countEdges</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>gaede53fc1ef848a03b7f844a5ec7eeca6</anchor>
      <arglist>(const Graph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countOutArcs</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>gaf199da654058dd16da1702f38b60f30c</anchor>
      <arglist>(const Graph &amp;g, const typename Graph::Node &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countInArcs</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga03d0d2f770d7f7faac66438139ae9b18</anchor>
      <arglist>(const Graph &amp;g, const typename Graph::Node &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countIncEdges</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>gae93681c4e849f6fd3a102fcb2756e317</anchor>
      <arglist>(const Graph &amp;g, const typename Graph::Node &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>undirected</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>gaa7a3075a14f2acde20f1d999675a8040</anchor>
      <arglist>(const GR &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>DigraphCopy&lt; From, To &gt;</type>
      <name>digraphCopy</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga47e4bf893a80e68971c511735117c707</anchor>
      <arglist>(const From &amp;from, To &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>GraphCopy&lt; From, To &gt;</type>
      <name>graphCopy</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga6d9c65013887bb0710df0d58985d67dc</anchor>
      <arglist>(const From &amp;from, To &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphCopy&lt; From, To &gt;</type>
      <name>bpGraphCopy</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga58f5d796ccf095d19f507f47bf92d38f</anchor>
      <arglist>(const From &amp;from, To &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>Graph::Arc</type>
      <name>findArc</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga8f2c525c18d4b29476db308e49066334</anchor>
      <arglist>(const Graph &amp;g, typename Graph::Node u, typename Graph::Node v, typename Graph::Arc prev=INVALID)</arglist>
    </member>
    <member kind="function">
      <type>Graph::Edge</type>
      <name>findEdge</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga50b131b15b6c98823c4dc308f7e884e8</anchor>
      <arglist>(const Graph &amp;g, typename Graph::Node u, typename Graph::Node v, typename Graph::Edge p=INVALID)</arglist>
    </member>
    <member kind="function">
      <type>DfsWizard&lt; DfsWizardBase&lt; GR &gt; &gt;</type>
      <name>dfs</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>gaa6a12c70b10ad9693117ec2b3774b0d8</anchor>
      <arglist>(const GR &amp;digraph)</arglist>
    </member>
    <member kind="function">
      <type>DijkstraWizard&lt; DijkstraWizardBase&lt; GR, LEN &gt; &gt;</type>
      <name>dijkstra</name>
      <anchorfile>a00524.html</anchorfile>
      <anchor>gaa781be76e5adb6a9df7592457a5c3857</anchor>
      <arglist>(const GR &amp;digraph, const LEN &amp;length)</arglist>
    </member>
    <member kind="function">
      <type>DimacsDescriptor</type>
      <name>dimacsType</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>gad16c7910d72fa073be372881e1b3b087</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDimacsMin</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ga309d99eda5d1f5f3df2b2ca2d57ec024</anchor>
      <arglist>(std::istream &amp;is, Digraph &amp;g, LowerMap &amp;lower, CapacityMap &amp;capacity, CostMap &amp;cost, SupplyMap &amp;supply, typename CapacityMap::Value infty=0, DimacsDescriptor desc=DimacsDescriptor())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDimacsMax</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ga44cf335757161623864f8b1ef4446601</anchor>
      <arglist>(std::istream &amp;is, Digraph &amp;g, CapacityMap &amp;capacity, typename Digraph::Node &amp;s, typename Digraph::Node &amp;t, typename CapacityMap::Value infty=0, DimacsDescriptor desc=DimacsDescriptor())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDimacsSp</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>gae8f5ba3e3f9ce3281f83c152d193625b</anchor>
      <arglist>(std::istream &amp;is, Digraph &amp;g, LengthMap &amp;length, typename Digraph::Node &amp;s, DimacsDescriptor desc=DimacsDescriptor())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDimacsCap</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ga2ec47d238c02a465037377e65875793d</anchor>
      <arglist>(std::istream &amp;is, Digraph &amp;g, CapacityMap &amp;capacity, typename CapacityMap::Value infty=0, DimacsDescriptor desc=DimacsDescriptor())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDimacsMat</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ga2f4cd9537b1e6da13b64220bed687ad2</anchor>
      <arglist>(std::istream &amp;is, Graph &amp;g, DimacsDescriptor desc=DimacsDescriptor())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeDimacsMat</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>gada363b719022ba1fe1c03978ba6cece9</anchor>
      <arglist>(std::ostream &amp;os, const Digraph &amp;g, std::string comment=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eulerian</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gafb5a4961cac4d877006869fc4cb6ea1d</anchor>
      <arglist>(const GR &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; DefaultGraphToEpsTraits&lt; GR &gt; &gt;</type>
      <name>graphToEps</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>gacdf8d8f513b3e79f89b19c20f7755564</anchor>
      <arglist>(GR &amp;g, std::ostream &amp;os=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; DefaultGraphToEpsTraits&lt; GR &gt; &gt;</type>
      <name>graphToEps</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>ga48002fdee116559a9948d1bf540475f1</anchor>
      <arglist>(GR &amp;g, const char *file_name)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; DefaultGraphToEpsTraits&lt; GR &gt; &gt;</type>
      <name>graphToEps</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>ga919340e78dd663a7b77c7aa9c3658170</anchor>
      <arglist>(GR &amp;g, const std::string &amp;file_name)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>kruskal</name>
      <anchorfile>a00525.html</anchorfile>
      <anchor>ga233792b2c44a3581b85a775703e045af</anchor>
      <arglist>(const Graph &amp;g, const In &amp;in, Out &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mapCopy</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>gacd3b1378e8d938e2f4f831cda62d7196</anchor>
      <arglist>(const GR &amp;gr, const From &amp;from, To &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mapCompare</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>gad05d27a9d1f23407ab2960b48a9b7582</anchor>
      <arglist>(const GR &amp;gr, const Map1 &amp;map1, const Map2 &amp;map2)</arglist>
    </member>
    <member kind="function">
      <type>Map::Key</type>
      <name>mapMin</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga6119b9344a9c76eb7fca2f57f67732e4</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Map::Key</type>
      <name>mapMin</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga8c1dd57a1af8310ca04d57a70f3f659c</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map, const Comp &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>Map::Key</type>
      <name>mapMax</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga87e0df0934bba2996ec5c9b6907de88d</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Map::Key</type>
      <name>mapMax</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga262a78bd1f36223d520ffde235730cb9</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map, const Comp &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>Map::Value</type>
      <name>mapMinValue</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga3be91b854e7788d89047f161378fce58</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Map::Value</type>
      <name>mapMinValue</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga712ba7c8df94bd02f28d6e08d11176f7</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map, const Comp &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>Map::Value</type>
      <name>mapMaxValue</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga72688c2e41aa36efa56431b5b585a1c1</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Map::Value</type>
      <name>mapMaxValue</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga7b5174f049f1fd63844d2c914832cbcc</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map, const Comp &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>Map::Key</type>
      <name>mapFind</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga8469265a9d93f69c9402756ffe86bcab</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map, const typename Map::Value &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Map::Key</type>
      <name>mapFindIf</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>gad5e8addbccd1e43a3add48108020ffbd</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map, const Pred &amp;pred)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mapCount</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>gafe30fc86a55d33ad6811f3cc835b4cf9</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map, const typename Map::Value &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mapCountIf</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga33891e575e55c0f9ec0dac31923119b8</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map, const Pred &amp;pred)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mapFill</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>gabbcca4c1a7f23a9f39e97e24dc8c54fc</anchor>
      <arglist>(const GR &amp;gr, Map &amp;map, const typename Map::Value &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga78d99e4135230ce52d67f269ed1d464f</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>round</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gaac8681108dfd2b0deee2dca59dff26bb</anchor>
      <arglist>(double r)</arglist>
    </member>
    <member kind="function">
      <type>CostMap::Value</type>
      <name>minCostArborescence</name>
      <anchorfile>a00525.html</anchorfile>
      <anchor>ga0faeb92308e21beeb093ee6c967a2cb5</anchor>
      <arglist>(const Digraph &amp;digraph, const CostMap &amp;cost, typename Digraph::Node source, ArborescenceMap &amp;arborescence)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>readNautyGraph</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>gab98a634e56974e5266e04dd0a1a63a83</anchor>
      <arglist>(Graph &amp;graph, std::istream &amp;is=std::cin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pathCopy</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>ga1c0da351dc554629ec44013576637e7d</anchor>
      <arglist>(const From &amp;from, To &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyPath</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>ga437e79537f340c99bb743bc928cb0a10</anchor>
      <arglist>(To &amp;to, const From &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkPath</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>ga72529b1d8158a18d4a428dc3eab15a69</anchor>
      <arglist>(const Digraph &amp;digraph, const Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>Digraph::Node</type>
      <name>pathSource</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>ga8cd2b147cef7e0a4fa05145908d95c15</anchor>
      <arglist>(const Digraph &amp;digraph, const Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>Digraph::Node</type>
      <name>pathTarget</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>ga885afd9d4ba099bf2d8104e6e0408b66</anchor>
      <arglist>(const Digraph &amp;digraph, const Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkPlanarity</name>
      <anchorfile>a00532.html</anchorfile>
      <anchor>ga230242aa2ee36f9b1b5a58f2c53016eb</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>radixSort</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>ga9a59ac695f0882ca6c606f4f9091ff97</anchor>
      <arglist>(Iterator first, Iterator last, Functor functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stableRadixSort</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>ga85077aa44152133d90fd5aff65856b47</anchor>
      <arglist>(Iterator first, Iterator last, Functor functor)</arglist>
    </member>
    <member kind="function">
      <type>TimeStamp</type>
      <name>runningTimeTest</name>
      <anchorfile>a00541.html</anchorfile>
      <anchor>ga5a016a4d710b59abefedf870d8b71bb8</anchor>
      <arglist>(F f, double min_time=10, unsigned int *num=NULL, TimeStamp *full_time=NULL)</arglist>
    </member>
    <member kind="variable">
      <type>const Invalid</type>
      <name>INVALID</name>
      <anchorfile>a00554.html</anchorfile>
      <anchor>a0f04de8e6be7bc21ed685c651571d9fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>WHITE</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gaa574c6748d637031ff114ee5396f371d</anchor>
      <arglist>(1, 1, 1)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>BLACK</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga887e77777b0cdd4bd98cd8582eab747d</anchor>
      <arglist>(0, 0, 0)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>RED</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga3aab05ed4f1fa1188cb5cec4a951da36</anchor>
      <arglist>(1, 0, 0)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>GREEN</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga9d50a7cbc8c947f88556291754b964df</anchor>
      <arglist>(0, 1, 0)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>BLUE</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga8d1bd8aebf1ea19b34a359b95afb2271</anchor>
      <arglist>(0, 0, 1)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>YELLOW</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga7b3b82796993ff082f39aeaca4f74be9</anchor>
      <arglist>(1, 1, 0)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>MAGENTA</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gad9c523e1fcd76b6e97a7e8f6c89a6d09</anchor>
      <arglist>(1, 0, 1)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>CYAN</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga6b139d00115defc76ec508dff90c91fd</anchor>
      <arglist>(0, 1, 1)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>GREY</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gaccc4c0904a38839f9554cde971bb4963</anchor>
      <arglist>(0, 0, 0)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>DARK_RED</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga1c9259e9d2ec9a44ea6bf855d3dd3917</anchor>
      <arglist>(.5, 0, 0)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>DARK_GREEN</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gabc9fc012aa002dd8e311065b3115969c</anchor>
      <arglist>(0,.5, 0)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>DARK_BLUE</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gac56cc8c77b9fcb56e308652d922d08f0</anchor>
      <arglist>(0, 0,.5)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>DARK_YELLOW</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga5dbe8dbe7b513bc66228981dcad165f7</anchor>
      <arglist>(.5,.5, 0)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>DARK_MAGENTA</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gaa3457b13dd61099a849816a02ba55efc</anchor>
      <arglist>(.5, 0,.5)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>DARK_CYAN</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga1814dea6aea83b28d9137adaa4d8b937</anchor>
      <arglist>(0,.5,.5)</arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>E</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga72bb95cfe3f4109af43a989e478a2d61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>LOG2E</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga9cef1ca3f697ed0afa15e6ce2658b9cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>LOG10E</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga044b3cac2493404bbd6bb04cf61dc38d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>LN2</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga64f768a3649a214be5a8b9d13acc30fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>LN10</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gab62596f975434ae5b1dde456a64c455a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>PI</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gacf20630e5d2a9696928fe77b0726013c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>PI_2</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga8d3eb5ff33b365b02e3d7065f2ecba48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>PI_4</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga5a75e78cd42171bf864e2bad56639318</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>SQRT2</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gac6586fa2865c0cc54dd89b93a0da1d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>SQRT1_2</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga1794f2ffbd3e762771a25847b905918c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Random</type>
      <name>rnd</name>
      <anchorfile>a00554.html</anchorfile>
      <anchor>af55e529932608e88737901e3404d1d0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>lemon::concepts</name>
    <filename>a00555.html</filename>
    <class kind="class">lemon::concepts::AlterableBpGraphComponent</class>
    <class kind="class">lemon::concepts::AlterableDigraphComponent</class>
    <class kind="class">lemon::concepts::AlterableGraphComponent</class>
    <class kind="class">lemon::concepts::BaseBpGraphComponent</class>
    <class kind="class">lemon::concepts::BaseDigraphComponent</class>
    <class kind="class">lemon::concepts::BaseGraphComponent</class>
    <class kind="class">lemon::concepts::BpGraph</class>
    <class kind="class">lemon::concepts::ClearableBpGraphComponent</class>
    <class kind="class">lemon::concepts::ClearableDigraphComponent</class>
    <class kind="class">lemon::concepts::ClearableGraphComponent</class>
    <class kind="class">lemon::concepts::Digraph</class>
    <class kind="class">lemon::concepts::ErasableBpGraphComponent</class>
    <class kind="class">lemon::concepts::ErasableDigraphComponent</class>
    <class kind="class">lemon::concepts::ErasableGraphComponent</class>
    <class kind="class">lemon::concepts::ExtendableBpGraphComponent</class>
    <class kind="class">lemon::concepts::ExtendableDigraphComponent</class>
    <class kind="class">lemon::concepts::ExtendableGraphComponent</class>
    <class kind="class">lemon::concepts::Graph</class>
    <class kind="class">lemon::concepts::GraphIncIt</class>
    <class kind="class">lemon::concepts::GraphItem</class>
    <class kind="class">lemon::concepts::GraphItemIt</class>
    <class kind="class">lemon::concepts::GraphMap</class>
    <class kind="class">lemon::concepts::Heap</class>
    <class kind="class">lemon::concepts::IDableBpGraphComponent</class>
    <class kind="class">lemon::concepts::IDableDigraphComponent</class>
    <class kind="class">lemon::concepts::IDableGraphComponent</class>
    <class kind="class">lemon::concepts::IterableBpGraphComponent</class>
    <class kind="class">lemon::concepts::IterableDigraphComponent</class>
    <class kind="class">lemon::concepts::IterableGraphComponent</class>
    <class kind="class">lemon::concepts::MappableBpGraphComponent</class>
    <class kind="class">lemon::concepts::MappableDigraphComponent</class>
    <class kind="class">lemon::concepts::MappableGraphComponent</class>
    <class kind="class">lemon::concepts::Path</class>
    <class kind="class">lemon::concepts::PathDumper</class>
    <class kind="class">lemon::concepts::ReadMap</class>
    <class kind="class">lemon::concepts::ReadWriteMap</class>
    <class kind="class">lemon::concepts::ReferenceMap</class>
    <class kind="class">lemon::concepts::WriteMap</class>
  </compound>
  <compound kind="namespace">
    <name>lemon::dim2</name>
    <filename>a00562.html</filename>
    <class kind="class">lemon::dim2::Box</class>
    <class kind="class">lemon::dim2::ConstXMap</class>
    <class kind="class">lemon::dim2::ConstYMap</class>
    <class kind="class">lemon::dim2::NormSquareMap</class>
    <class kind="class">lemon::dim2::Point</class>
    <class kind="class">lemon::dim2::XMap</class>
    <class kind="class">lemon::dim2::YMap</class>
  </compound>
  <compound kind="group">
    <name>datas</name>
    <title>Data Structures</title>
    <filename>a00512.html</filename>
    <subgroup>graphs</subgroup>
    <subgroup>maps</subgroup>
    <subgroup>paths</subgroup>
    <subgroup>heaps</subgroup>
    <subgroup>auxdat</subgroup>
  </compound>
  <compound kind="group">
    <name>graphs</name>
    <title>Graph Structures</title>
    <filename>a00513.html</filename>
    <class kind="class">lemon::ListArcSet</class>
    <class kind="class">lemon::ListEdgeSet</class>
    <class kind="class">lemon::SmartArcSet</class>
    <class kind="class">lemon::SmartEdgeSet</class>
    <class kind="class">lemon::FullDigraph</class>
    <class kind="class">lemon::FullGraph</class>
    <class kind="class">lemon::FullBpGraph</class>
    <class kind="class">lemon::GridGraph</class>
    <class kind="class">lemon::HypercubeGraph</class>
    <class kind="class">lemon::ListDigraph</class>
    <class kind="class">lemon::ListGraph</class>
    <class kind="class">lemon::ListBpGraph</class>
    <class kind="class">lemon::SmartDigraph</class>
    <class kind="class">lemon::SmartGraph</class>
    <class kind="class">lemon::SmartBpGraph</class>
    <class kind="class">lemon::StaticDigraph</class>
    <subgroup>graph_adaptors</subgroup>
    <file>edge_set.h</file>
    <file>full_graph.h</file>
    <file>grid_graph.h</file>
    <file>hypercube_graph.h</file>
    <file>list_graph.h</file>
    <file>smart_graph.h</file>
    <file>static_graph.h</file>
  </compound>
  <compound kind="group">
    <name>graph_adaptors</name>
    <title>Adaptor Classes for Graphs</title>
    <filename>a00514.html</filename>
    <class kind="class">lemon::ReverseDigraph</class>
    <class kind="class">lemon::SubDigraph</class>
    <class kind="class">lemon::SubGraph</class>
    <class kind="class">lemon::FilterNodes</class>
    <class kind="class">lemon::FilterArcs</class>
    <class kind="class">lemon::FilterEdges</class>
    <class kind="class">lemon::Undirector</class>
    <class kind="class">lemon::Orienter</class>
    <class kind="class">lemon::ResidualDigraph</class>
    <class kind="class">lemon::SplitNodes</class>
    <file>adaptors.h</file>
    <member kind="function">
      <type>ReverseDigraph&lt; const DGR &gt;</type>
      <name>reverseDigraph</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>ga79c1b665b375986e20577c316a2abd64</anchor>
      <arglist>(const DGR &amp;digraph)</arglist>
    </member>
    <member kind="function">
      <type>SubDigraph&lt; const DGR, NF, AF &gt;</type>
      <name>subDigraph</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>ga4ecbcee43f13c2eaf1bedc4b2c8467ad</anchor>
      <arglist>(const DGR &amp;digraph, NF &amp;node_filter, AF &amp;arc_filter)</arglist>
    </member>
    <member kind="function">
      <type>SubGraph&lt; const GR, NF, EF &gt;</type>
      <name>subGraph</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>gad30bffcd2a193a2366b54593a98bf7a3</anchor>
      <arglist>(const GR &amp;graph, NF &amp;node_filter, EF &amp;edge_filter)</arglist>
    </member>
    <member kind="function">
      <type>FilterNodes&lt; const GR, NF &gt;</type>
      <name>filterNodes</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>gaa682c0f382bd7ea7227e29c5d45fd33d</anchor>
      <arglist>(const GR &amp;graph, NF &amp;node_filter)</arglist>
    </member>
    <member kind="function">
      <type>FilterArcs&lt; const DGR, AF &gt;</type>
      <name>filterArcs</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>gad6a800aaf8aa5c85de6ab3ff3b828905</anchor>
      <arglist>(const DGR &amp;digraph, AF &amp;arc_filter)</arglist>
    </member>
    <member kind="function">
      <type>FilterEdges&lt; const GR, EF &gt;</type>
      <name>filterEdges</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>gaddd9874f4d5ad214e8f0d4f252c989ee</anchor>
      <arglist>(const GR &amp;graph, EF &amp;edge_filter)</arglist>
    </member>
    <member kind="function">
      <type>Undirector&lt; const DGR &gt;</type>
      <name>undirector</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>gaebf4f5d421ecb3a11161a2efca58bbd9</anchor>
      <arglist>(const DGR &amp;digraph)</arglist>
    </member>
    <member kind="function">
      <type>Orienter&lt; const GR, DM &gt;</type>
      <name>orienter</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>gaf0baa7971373781e810c9b8855cb63c6</anchor>
      <arglist>(const GR &amp;graph, DM &amp;direction)</arglist>
    </member>
    <member kind="function">
      <type>ResidualDigraph&lt; DGR, CM, FM &gt;</type>
      <name>residualDigraph</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>ga16137e105dd234d7e29ff30aebb01a21</anchor>
      <arglist>(const DGR &amp;digraph, const CM &amp;capacity_map, FM &amp;flow_map)</arglist>
    </member>
    <member kind="function">
      <type>SplitNodes&lt; DGR &gt;</type>
      <name>splitNodes</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>gabf58921acaca2eb95d042e2d7440ac20</anchor>
      <arglist>(const DGR &amp;digraph)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>maps</name>
    <title>Maps</title>
    <filename>a00515.html</filename>
    <class kind="class">lemon::MapBase</class>
    <class kind="class">lemon::NullMap</class>
    <class kind="class">lemon::ConstMap</class>
    <class kind="class">lemon::ConstMap&lt; K, Const&lt; V, v &gt; &gt;</class>
    <class kind="class">lemon::IdentityMap</class>
    <class kind="class">lemon::RangeMap</class>
    <class kind="class">lemon::SparseMap</class>
    <class kind="class">lemon::TrueMap</class>
    <class kind="class">lemon::FalseMap</class>
    <class kind="class">lemon::LoggerBoolMap</class>
    <subgroup>graph_maps</subgroup>
    <subgroup>map_adaptors</subgroup>
    <file>maps.h</file>
    <member kind="function">
      <type>NullMap&lt; K, V &gt;</type>
      <name>nullMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gacabbe73018c55fcda9e77e4450a2742f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; K, V &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gae8767f0b0e20d31ee7af27a0e057bee2</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ConstMap&lt; K, Const&lt; V, v &gt; &gt;</type>
      <name>constMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>ga16ec5e6f4258e1da61b9c297f97cebbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IdentityMap&lt; T &gt;</type>
      <name>identityMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gaa15ca3c8150c620c3b368c55068801a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RangeMap&lt; V &gt;</type>
      <name>rangeMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>ga16158762fc81f259cf1daf81d0471569</anchor>
      <arglist>(int size=0, const V &amp;value=V())</arglist>
    </member>
    <member kind="function">
      <type>RangeMap&lt; V &gt;</type>
      <name>rangeMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gab25738127ed9049a5205af0b2fdc9909</anchor>
      <arglist>(const std::vector&lt; V &gt; &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>SparseMap&lt; K, V, Compare &gt;</type>
      <name>sparseMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>ga2bced372308b364deaa17683861a4e05</anchor>
      <arglist>(const V &amp;value=V())</arglist>
    </member>
    <member kind="function">
      <type>SparseMap&lt; K, V, Compare &gt;</type>
      <name>sparseMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gaea7a9a33e919f50b09b7e8fefdde7b32</anchor>
      <arglist>(const std::map&lt; K, V, Compare &gt; &amp;map, const V &amp;value=V())</arglist>
    </member>
    <member kind="function">
      <type>TrueMap&lt; K &gt;</type>
      <name>trueMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>ga58e5052d50110f3f5cb312b38c31b805</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FalseMap&lt; K &gt;</type>
      <name>falseMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>gac84b9c1328d8cd93e401782f1c3f70a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LoggerBoolMap&lt; Iterator &gt;</type>
      <name>loggerBoolMap</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>ga9911949acec69b07b642c082c65d810c</anchor>
      <arglist>(Iterator it)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>graph_maps</name>
    <title>Graph Maps</title>
    <filename>a00516.html</filename>
    <class kind="class">lemon::IdMap</class>
    <class kind="class">lemon::CrossRefMap</class>
    <class kind="class">lemon::RangeIdMap</class>
    <class kind="class">lemon::IterableBoolMap</class>
    <class kind="class">lemon::IterableIntMap</class>
    <class kind="class">lemon::IterableValueMap</class>
    <class kind="class">lemon::SourceMap</class>
    <class kind="class">lemon::TargetMap</class>
    <class kind="class">lemon::ForwardMap</class>
    <class kind="class">lemon::BackwardMap</class>
    <class kind="class">lemon::InDegMap</class>
    <class kind="class">lemon::OutDegMap</class>
    <class kind="class">lemon::PotentialDifferenceMap</class>
    <member kind="function">
      <type>void</type>
      <name>mapCopy</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>gacd3b1378e8d938e2f4f831cda62d7196</anchor>
      <arglist>(const GR &amp;gr, const From &amp;from, To &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mapCompare</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>gad05d27a9d1f23407ab2960b48a9b7582</anchor>
      <arglist>(const GR &amp;gr, const Map1 &amp;map1, const Map2 &amp;map2)</arglist>
    </member>
    <member kind="function">
      <type>Map::Key</type>
      <name>mapMin</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga6119b9344a9c76eb7fca2f57f67732e4</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Map::Key</type>
      <name>mapMin</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga8c1dd57a1af8310ca04d57a70f3f659c</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map, const Comp &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>Map::Key</type>
      <name>mapMax</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga87e0df0934bba2996ec5c9b6907de88d</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Map::Key</type>
      <name>mapMax</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga262a78bd1f36223d520ffde235730cb9</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map, const Comp &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>Map::Value</type>
      <name>mapMinValue</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga3be91b854e7788d89047f161378fce58</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Map::Value</type>
      <name>mapMinValue</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga712ba7c8df94bd02f28d6e08d11176f7</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map, const Comp &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>Map::Value</type>
      <name>mapMaxValue</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga72688c2e41aa36efa56431b5b585a1c1</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>Map::Value</type>
      <name>mapMaxValue</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga7b5174f049f1fd63844d2c914832cbcc</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map, const Comp &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>Map::Key</type>
      <name>mapFind</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga8469265a9d93f69c9402756ffe86bcab</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map, const typename Map::Value &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Map::Key</type>
      <name>mapFindIf</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>gad5e8addbccd1e43a3add48108020ffbd</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map, const Pred &amp;pred)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mapCount</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>gafe30fc86a55d33ad6811f3cc835b4cf9</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map, const typename Map::Value &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mapCountIf</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga33891e575e55c0f9ec0dac31923119b8</anchor>
      <arglist>(const GR &amp;gr, const Map &amp;map, const Pred &amp;pred)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mapFill</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>gabbcca4c1a7f23a9f39e97e24dc8c54fc</anchor>
      <arglist>(const GR &amp;gr, Map &amp;map, const typename Map::Value &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>IdMap&lt; GR, K &gt;</type>
      <name>idMap</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga816a286bed06ff2b19089dbf5ebac20a</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>RangeIdMap&lt; GR, K &gt;</type>
      <name>rangeIdMap</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>gac058be03cd677659864d5ff0a240d8ca</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>SourceMap&lt; GR &gt;</type>
      <name>sourceMap</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga7e40f56fb58a47cf11acf45a53319196</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>TargetMap&lt; GR &gt;</type>
      <name>targetMap</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga76cedc40d120db6feb12f5ae6ea878ba</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>ForwardMap&lt; GR &gt;</type>
      <name>forwardMap</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga658f2b3a54c7e6e15b47b38bbc588e46</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>BackwardMap&lt; GR &gt;</type>
      <name>backwardMap</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga76a84fc9fdb56bcd00cf437cd1d31cdb</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>PotentialDifferenceMap&lt; GR, POT &gt;</type>
      <name>potentialDifferenceMap</name>
      <anchorfile>a00516.html</anchorfile>
      <anchor>ga1817fbea6492f6effbb2f97f1f063349</anchor>
      <arglist>(const GR &amp;gr, const POT &amp;potential)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>map_adaptors</name>
    <title>Map Adaptors</title>
    <filename>a00517.html</filename>
    <class kind="class">lemon::ComposeMap</class>
    <class kind="class">lemon::CombineMap</class>
    <class kind="class">lemon::FunctorToMap</class>
    <class kind="class">lemon::MapToFunctor</class>
    <class kind="class">lemon::ConvertMap</class>
    <class kind="class">lemon::ForkMap</class>
    <class kind="class">lemon::AddMap</class>
    <class kind="class">lemon::SubMap</class>
    <class kind="class">lemon::MulMap</class>
    <class kind="class">lemon::DivMap</class>
    <class kind="class">lemon::ShiftMap</class>
    <class kind="class">lemon::ShiftWriteMap</class>
    <class kind="class">lemon::ScaleMap</class>
    <class kind="class">lemon::ScaleWriteMap</class>
    <class kind="class">lemon::NegMap</class>
    <class kind="class">lemon::NegWriteMap</class>
    <class kind="class">lemon::AbsMap</class>
    <class kind="class">lemon::AndMap</class>
    <class kind="class">lemon::OrMap</class>
    <class kind="class">lemon::NotMap</class>
    <class kind="class">lemon::NotWriteMap</class>
    <class kind="class">lemon::EqualMap</class>
    <class kind="class">lemon::LessMap</class>
    <member kind="function">
      <type>ComposeMap&lt; M1, M2 &gt;</type>
      <name>composeMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>gac36b354e8e808fba48e18cf15db5100f</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>CombineMap&lt; M1, M2, F, V &gt;</type>
      <name>combineMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>gafa8530beb88cb34532f35a6e121e0007</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2, const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>FunctorToMap&lt; F, K, V &gt;</type>
      <name>functorToMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>gab0aac0bb0604df94df88ad5fef5f391c</anchor>
      <arglist>(const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>MapToFunctor&lt; M &gt;</type>
      <name>mapToFunctor</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga0a68bad2e29c1486f3cc8d7a0cf056e1</anchor>
      <arglist>(const M &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>ConvertMap&lt; M, V &gt;</type>
      <name>convertMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga4abd9551cd490eec5bec69576d4a6dbb</anchor>
      <arglist>(const M &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>ForkMap&lt; M1, M2 &gt;</type>
      <name>forkMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga7b7cf375700909175bae19eee48a9962</anchor>
      <arglist>(M1 &amp;m1, M2 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>AddMap&lt; M1, M2 &gt;</type>
      <name>addMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga198bc5656b8dd90ac511504536a9965a</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>SubMap&lt; M1, M2 &gt;</type>
      <name>subMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga6101bbe8a787e7bf7998d529632edcdd</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>MulMap&lt; M1, M2 &gt;</type>
      <name>mulMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>gaf61fff11e845e77cbd7530b10b75aa17</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>DivMap&lt; M1, M2 &gt;</type>
      <name>divMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga166e4520ea24f6a0ef094898df89f180</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>ShiftMap&lt; M, C &gt;</type>
      <name>shiftMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga840b730cb65a418b9d890c27dfa63a27</anchor>
      <arglist>(const M &amp;m, const C &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ShiftWriteMap&lt; M, C &gt;</type>
      <name>shiftWriteMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga9c1611cd915bd96577b7f5e9607c834b</anchor>
      <arglist>(M &amp;m, const C &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ScaleMap&lt; M, C &gt;</type>
      <name>scaleMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga7ce03f4c101f1297901c5ce840543006</anchor>
      <arglist>(const M &amp;m, const C &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ScaleWriteMap&lt; M, C &gt;</type>
      <name>scaleWriteMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga7e7cd505ab3725fdf5785746544eea66</anchor>
      <arglist>(M &amp;m, const C &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>NegMap&lt; M &gt;</type>
      <name>negMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>gac47c5a97a29055bfc88314591fdfdf42</anchor>
      <arglist>(const M &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>NegWriteMap&lt; M &gt;</type>
      <name>negWriteMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>gaacce5676587f1d1e7c7d810cfd2e7ff1</anchor>
      <arglist>(M &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>AbsMap&lt; M &gt;</type>
      <name>absMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>gabb163469d214f85023ebb74c2801a0a1</anchor>
      <arglist>(const M &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>AndMap&lt; M1, M2 &gt;</type>
      <name>andMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga2e998d08fcf3ef385717fdd4e0d983d8</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>OrMap&lt; M1, M2 &gt;</type>
      <name>orMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga06463d7799cefda558eaec8392160529</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>NotMap&lt; M &gt;</type>
      <name>notMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>gac32d5dbe669fc9a75c4ab8ee12db0c12</anchor>
      <arglist>(const M &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>NotWriteMap&lt; M &gt;</type>
      <name>notWriteMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>gac156aa2d3b004c46cd1189aa5459f6e4</anchor>
      <arglist>(M &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>EqualMap&lt; M1, M2 &gt;</type>
      <name>equalMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>gaabcc26e4e6ddc3ff6b98801c115b26bc</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>LessMap&lt; M1, M2 &gt;</type>
      <name>lessMap</name>
      <anchorfile>a00517.html</anchorfile>
      <anchor>ga4c49f5cdfa8c2484f4fd1a8ce476ba14</anchor>
      <arglist>(const M1 &amp;m1, const M2 &amp;m2)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>paths</name>
    <title>Path Structures</title>
    <filename>a00518.html</filename>
    <class kind="class">lemon::Path</class>
    <class kind="class">lemon::SimplePath</class>
    <class kind="class">lemon::ListPath</class>
    <class kind="class">lemon::StaticPath</class>
    <class kind="class">lemon::PathNodeIt</class>
    <file>path.h</file>
    <member kind="function">
      <type>void</type>
      <name>pathCopy</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>ga1c0da351dc554629ec44013576637e7d</anchor>
      <arglist>(const From &amp;from, To &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyPath</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>ga437e79537f340c99bb743bc928cb0a10</anchor>
      <arglist>(To &amp;to, const From &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkPath</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>ga72529b1d8158a18d4a428dc3eab15a69</anchor>
      <arglist>(const Digraph &amp;digraph, const Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>Digraph::Node</type>
      <name>pathSource</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>ga8cd2b147cef7e0a4fa05145908d95c15</anchor>
      <arglist>(const Digraph &amp;digraph, const Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>Digraph::Node</type>
      <name>pathTarget</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>ga885afd9d4ba099bf2d8104e6e0408b66</anchor>
      <arglist>(const Digraph &amp;digraph, const Path &amp;path)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>heaps</name>
    <title>Heap Structures</title>
    <filename>a00519.html</filename>
    <class kind="class">lemon::BinHeap</class>
    <class kind="class">lemon::BinomialHeap</class>
    <class kind="class">lemon::BucketHeap</class>
    <class kind="class">lemon::SimpleBucketHeap</class>
    <class kind="class">lemon::DHeap</class>
    <class kind="class">lemon::FibHeap</class>
    <class kind="class">lemon::PairingHeap</class>
    <class kind="class">lemon::QuadHeap</class>
    <class kind="class">lemon::RadixHeap</class>
    <file>bin_heap.h</file>
    <file>binomial_heap.h</file>
    <file>bucket_heap.h</file>
    <file>dheap.h</file>
    <file>fib_heap.h</file>
    <file>pairing_heap.h</file>
    <file>quad_heap.h</file>
    <file>radix_heap.h</file>
  </compound>
  <compound kind="group">
    <name>auxdat</name>
    <title>Auxiliary Data Structures</title>
    <filename>a00520.html</filename>
    <class kind="class">lemon::Elevator</class>
    <class kind="class">lemon::LinkedElevator</class>
    <class kind="class">lemon::UnionFind</class>
    <class kind="class">lemon::UnionFindEnum</class>
    <class kind="class">lemon::ExtendFindEnum</class>
    <class kind="class">lemon::HeapUnionFind</class>
    <subgroup>geomdat</subgroup>
    <file>elevator.h</file>
    <file>unionfind.h</file>
  </compound>
  <compound kind="group">
    <name>geomdat</name>
    <title>Geometric Data Structures</title>
    <filename>a00521.html</filename>
    <class kind="class">lemon::dim2::Point</class>
    <class kind="class">lemon::dim2::Box</class>
    <class kind="class">lemon::dim2::XMap</class>
    <class kind="class">lemon::dim2::ConstXMap</class>
    <class kind="class">lemon::dim2::YMap</class>
    <class kind="class">lemon::dim2::ConstYMap</class>
    <class kind="class">lemon::dim2::NormSquareMap</class>
    <file>dim2.h</file>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>makePoint</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>gaecc91205bbef122826613af7d8ef7c10</anchor>
      <arglist>(const T &amp;x, const T &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>ga762dc161f1356814820d95a6c3ebb394</anchor>
      <arglist>(const T &amp;u, const Point&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>ga22e95035881a7964352c5eb9b46a3ca5</anchor>
      <arglist>(std::istream &amp;is, Point&lt; T &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>ga70027f9df22e7e13aa89877de52d1064</anchor>
      <arglist>(std::ostream &amp;os, const Point&lt; T &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>rot90</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>gaf827f37672f98e93c11ea37f3fc078e3</anchor>
      <arglist>(const Point&lt; T &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>rot180</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>ga1837137f4a27eeda082094710fbb3201</anchor>
      <arglist>(const Point&lt; T &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>rot270</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>ga98212a9b188bc640993e7fdb274cd7a3</anchor>
      <arglist>(const Point&lt; T &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>ga19c3bfbad77c6e998e017eadf75c2782</anchor>
      <arglist>(std::istream &amp;is, Box&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>gac52c35829fbea8c6f4f42e15ae3a16c1</anchor>
      <arglist>(std::ostream &amp;os, const Box&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>XMap&lt; M &gt;</type>
      <name>xMap</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>gae41a8ab860bdbb63080b0e509c487c57</anchor>
      <arglist>(M &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>ConstXMap&lt; M &gt;</type>
      <name>xMap</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>ga089526b0c8613c8167ee758056c79672</anchor>
      <arglist>(const M &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>YMap&lt; M &gt;</type>
      <name>yMap</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>ga4b8a44ffc54cb9a2db2517d2a17f18af</anchor>
      <arglist>(M &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>ConstYMap&lt; M &gt;</type>
      <name>yMap</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>gacd6c062290503f0e72b7ff1e3ac82bcd</anchor>
      <arglist>(const M &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>NormSquareMap&lt; M &gt;</type>
      <name>normSquareMap</name>
      <anchorfile>a00521.html</anchorfile>
      <anchor>ga55234f3b00cf61ed7bf2a74cfd88fbfd</anchor>
      <arglist>(const M &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>algs</name>
    <title>Algorithms</title>
    <filename>a00522.html</filename>
    <subgroup>search</subgroup>
    <subgroup>shortest_path</subgroup>
    <subgroup>spantree</subgroup>
    <subgroup>max_flow</subgroup>
    <subgroup>min_cost_flow_algs</subgroup>
    <subgroup>min_cut</subgroup>
    <subgroup>min_mean_cycle</subgroup>
    <subgroup>matching</subgroup>
    <subgroup>graph_properties</subgroup>
    <subgroup>planar</subgroup>
    <subgroup>tsp</subgroup>
    <subgroup>approx_algs</subgroup>
    <subgroup>auxalg</subgroup>
  </compound>
  <compound kind="group">
    <name>search</name>
    <title>Graph Search</title>
    <filename>a00523.html</filename>
    <class kind="class">lemon::Bfs</class>
    <class kind="class">lemon::BfsVisit</class>
    <class kind="class">lemon::Dfs</class>
    <class kind="class">lemon::DfsVisit</class>
    <class kind="class">lemon::MaxCardinalitySearch</class>
    <file>bfs.h</file>
    <file>dfs.h</file>
    <file>max_cardinality_search.h</file>
    <member kind="function">
      <type>BfsWizard&lt; BfsWizardBase&lt; GR &gt; &gt;</type>
      <name>bfs</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>ga99817221896aba2eb403691a0a230a0b</anchor>
      <arglist>(const GR &amp;digraph)</arglist>
    </member>
    <member kind="function">
      <type>DfsWizard&lt; DfsWizardBase&lt; GR &gt; &gt;</type>
      <name>dfs</name>
      <anchorfile>a00523.html</anchorfile>
      <anchor>gaa6a12c70b10ad9693117ec2b3774b0d8</anchor>
      <arglist>(const GR &amp;digraph)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>shortest_path</name>
    <title>Shortest Path Algorithms</title>
    <filename>a00524.html</filename>
    <class kind="class">lemon::BellmanFord</class>
    <class kind="class">lemon::Dijkstra</class>
    <class kind="class">lemon::Suurballe</class>
    <file>bellman_ford.h</file>
    <file>dijkstra.h</file>
    <file>suurballe.h</file>
    <member kind="function">
      <type>BellmanFordWizard&lt; BellmanFordWizardBase&lt; GR, LEN &gt; &gt;</type>
      <name>bellmanFord</name>
      <anchorfile>a00524.html</anchorfile>
      <anchor>ga359aa931ac3c9550d5b5b5f3ec2e9e56</anchor>
      <arglist>(const GR &amp;digraph, const LEN &amp;length)</arglist>
    </member>
    <member kind="function">
      <type>DijkstraWizard&lt; DijkstraWizardBase&lt; GR, LEN &gt; &gt;</type>
      <name>dijkstra</name>
      <anchorfile>a00524.html</anchorfile>
      <anchor>gaa781be76e5adb6a9df7592457a5c3857</anchor>
      <arglist>(const GR &amp;digraph, const LEN &amp;length)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>spantree</name>
    <title>Minimum Spanning Tree Algorithms</title>
    <filename>a00525.html</filename>
    <class kind="class">lemon::MinCostArborescence</class>
    <file>kruskal.h</file>
    <file>min_cost_arborescence.h</file>
    <member kind="function">
      <type>Value</type>
      <name>kruskal</name>
      <anchorfile>a00525.html</anchorfile>
      <anchor>ga233792b2c44a3581b85a775703e045af</anchor>
      <arglist>(const Graph &amp;g, const In &amp;in, Out &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>CostMap::Value</type>
      <name>minCostArborescence</name>
      <anchorfile>a00525.html</anchorfile>
      <anchor>ga0faeb92308e21beeb093ee6c967a2cb5</anchor>
      <arglist>(const Digraph &amp;digraph, const CostMap &amp;cost, typename Digraph::Node source, ArborescenceMap &amp;arborescence)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>max_flow</name>
    <title>Maximum Flow Algorithms</title>
    <filename>a00526.html</filename>
    <class kind="class">lemon::Circulation</class>
    <class kind="class">lemon::EdmondsKarp</class>
    <class kind="class">lemon::Preflow</class>
    <file>circulation.h</file>
    <file>edmonds_karp.h</file>
    <file>preflow.h</file>
  </compound>
  <compound kind="group">
    <name>min_cost_flow_algs</name>
    <title>Minimum Cost Flow Algorithms</title>
    <filename>a00527.html</filename>
    <class kind="class">lemon::CapacityScaling</class>
    <class kind="class">lemon::CostScaling</class>
    <class kind="class">lemon::CycleCanceling</class>
    <class kind="class">lemon::NetworkSimplex</class>
    <file>capacity_scaling.h</file>
    <file>cost_scaling.h</file>
    <file>cycle_canceling.h</file>
    <file>network_simplex.h</file>
  </compound>
  <compound kind="group">
    <name>min_cut</name>
    <title>Minimum Cut Algorithms</title>
    <filename>a00528.html</filename>
    <class kind="class">lemon::GomoryHu</class>
    <class kind="class">lemon::HaoOrlin</class>
    <class kind="class">lemon::NagamochiIbaraki</class>
    <file>gomory_hu.h</file>
    <file>hao_orlin.h</file>
    <file>nagamochi_ibaraki.h</file>
  </compound>
  <compound kind="group">
    <name>min_mean_cycle</name>
    <title>Minimum Mean Cycle Algorithms</title>
    <filename>a00529.html</filename>
    <class kind="class">lemon::HartmannOrlinMmc</class>
    <class kind="class">lemon::HowardMmc</class>
    <class kind="class">lemon::KarpMmc</class>
    <file>hartmann_orlin_mmc.h</file>
    <file>howard_mmc.h</file>
    <file>karp_mmc.h</file>
  </compound>
  <compound kind="group">
    <name>matching</name>
    <title>Matching Algorithms</title>
    <filename>a00530.html</filename>
    <class kind="class">lemon::MaxFractionalMatching</class>
    <class kind="class">lemon::MaxWeightedFractionalMatching</class>
    <class kind="class">lemon::MaxWeightedPerfectFractionalMatching</class>
    <class kind="class">lemon::MaxMatching</class>
    <class kind="class">lemon::MaxWeightedMatching</class>
    <class kind="class">lemon::MaxWeightedPerfectMatching</class>
    <file>fractional_matching.h</file>
    <file>matching.h</file>
  </compound>
  <compound kind="group">
    <name>graph_properties</name>
    <title>Connectivity and Other Graph Properties</title>
    <filename>a00531.html</filename>
    <class kind="class">lemon::DiEulerIt</class>
    <class kind="class">lemon::EulerIt</class>
    <file>connectivity.h</file>
    <file>euler.h</file>
    <member kind="function">
      <type>bool</type>
      <name>connected</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gad5c8d1b650f6b614a852f8430d90e184</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countConnectedComponents</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga33a9d9d4803cb15e83568b2526e978a5</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>connectedComponents</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gaa467a3e0a8c2e9e762650fd01fadff89</anchor>
      <arglist>(const Graph &amp;graph, NodeMap &amp;compMap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stronglyConnected</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gacd21b34d7b42b9835a204a57fcf15964</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countStronglyConnectedComponents</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gad30bc47dfffb78234eeee903cb3766f4</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>stronglyConnectedComponents</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga46f8c22f3e2989c4689faa4c46ec9436</anchor>
      <arglist>(const Digraph &amp;digraph, NodeMap &amp;compMap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>stronglyConnectedCutArcs</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gad7af5c3a97453e37f251f0e86dbb83db</anchor>
      <arglist>(const Digraph &amp;digraph, ArcMap &amp;cutMap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>biNodeConnected</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gac9257323ead7cbe64b7b4a628c4876b3</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countBiNodeConnectedComponents</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gaf7c5744b2175210b8ea67897aaa27885</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>biNodeConnectedComponents</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga9d70526ab54e10b4b6fe3762af8675dd</anchor>
      <arglist>(const Graph &amp;graph, EdgeMap &amp;compMap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>biNodeConnectedCutNodes</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga31461f33a748327ea3ef2a3199ffb6c7</anchor>
      <arglist>(const Graph &amp;graph, NodeMap &amp;cutMap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>biEdgeConnected</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga37d22a2ddd5a064a9203720f2b93518e</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countBiEdgeConnectedComponents</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga4d5db78dc21099d075c3967484990954</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>biEdgeConnectedComponents</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga76c1fdd1881d21677507100b7e96c983</anchor>
      <arglist>(const Graph &amp;graph, NodeMap &amp;compMap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>biEdgeConnectedCutEdges</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga58d444eba448c5f1a53539bd1b69636e</anchor>
      <arglist>(const Graph &amp;graph, EdgeMap &amp;cutMap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dag</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gaef2b43c8cd1d74e15fa5c7607bc5e396</anchor>
      <arglist>(const Digraph &amp;digraph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>topologicalSort</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gafc2cb20cf3859f157c0e12da7f310bb3</anchor>
      <arglist>(const Digraph &amp;digraph, NodeMap &amp;order)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkedTopologicalSort</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gaf10c5e1630e5720c20d83cfb77dbf024</anchor>
      <arglist>(const Digraph &amp;digraph, NodeMap &amp;order)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>acyclic</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga14c191b2133a1dd23e1527f074c821c0</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tree</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gad1e4de234e926958647905478415bd54</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bipartite</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga577db110d33bd487aaad5bfffb31c6f5</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bipartitePartitions</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga58ba1d00c569f0eb0deb42afca9f80bb</anchor>
      <arglist>(const Graph &amp;graph, NodeMap &amp;partMap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loopFree</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ga127f3963003cd532c79c226885fe1c8c</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parallelFree</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gaa05e0683f90b69f31eb29fe7d09afde4</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>simpleGraph</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gae4c7ae734e2509ab78dc747d602c9236</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eulerian</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>gafb5a4961cac4d877006869fc4cb6ea1d</anchor>
      <arglist>(const GR &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>planar</name>
    <title>Planar Embedding and Drawing</title>
    <filename>a00532.html</filename>
    <class kind="class">lemon::PlanarEmbedding</class>
    <class kind="class">lemon::PlanarDrawing</class>
    <class kind="class">lemon::PlanarColoring</class>
    <file>planarity.h</file>
    <member kind="function">
      <type>bool</type>
      <name>checkPlanarity</name>
      <anchorfile>a00532.html</anchorfile>
      <anchor>ga230242aa2ee36f9b1b5a58f2c53016eb</anchor>
      <arglist>(const GR &amp;graph)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>tsp</name>
    <title>Traveling Salesman Problem</title>
    <filename>a00533.html</filename>
    <class kind="class">lemon::ChristofidesTsp</class>
    <class kind="class">lemon::GreedyTsp</class>
    <class kind="class">lemon::InsertionTsp</class>
    <class kind="class">lemon::NearestNeighborTsp</class>
    <class kind="class">lemon::Opt2Tsp</class>
    <file>christofides_tsp.h</file>
    <file>greedy_tsp.h</file>
    <file>insertion_tsp.h</file>
    <file>nearest_neighbor_tsp.h</file>
    <file>opt2_tsp.h</file>
  </compound>
  <compound kind="group">
    <name>approx_algs</name>
    <title>Approximation Algorithms</title>
    <filename>a00534.html</filename>
    <class kind="class">lemon::GrossoLocatelliPullanMc</class>
    <file>grosso_locatelli_pullan_mc.h</file>
  </compound>
  <compound kind="group">
    <name>auxalg</name>
    <title>Auxiliary Algorithms</title>
    <filename>a00535.html</filename>
    <file>radix_sort.h</file>
    <member kind="function">
      <type>void</type>
      <name>radixSort</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>ga9a59ac695f0882ca6c606f4f9091ff97</anchor>
      <arglist>(Iterator first, Iterator last, Functor functor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stableRadixSort</name>
      <anchorfile>a00535.html</anchorfile>
      <anchor>ga85077aa44152133d90fd5aff65856b47</anchor>
      <arglist>(Iterator first, Iterator last, Functor functor)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>gen_opt_group</name>
    <title>General Optimization Tools</title>
    <filename>a00536.html</filename>
    <subgroup>lp_group</subgroup>
  </compound>
  <compound kind="group">
    <name>lp_group</name>
    <title>LP and MIP Solvers</title>
    <filename>a00537.html</filename>
    <class kind="class">lemon::CbcMip</class>
    <class kind="class">lemon::ClpLp</class>
    <class kind="class">lemon::CplexBase</class>
    <class kind="class">lemon::CplexLp</class>
    <class kind="class">lemon::CplexMip</class>
    <class kind="class">lemon::GlpkBase</class>
    <class kind="class">lemon::GlpkLp</class>
    <class kind="class">lemon::GlpkMip</class>
    <class kind="class">lemon::LpBase</class>
    <class kind="class">lemon::LpSolver</class>
    <class kind="class">lemon::MipSolver</class>
    <class kind="class">lemon::LpSkeleton</class>
    <class kind="class">lemon::MipSkeleton</class>
    <class kind="class">lemon::SoplexLp</class>
    <file>cbc.h</file>
    <file>glpk.h</file>
    <file>lp.h</file>
    <file>lp_base.h</file>
    <member kind="define">
      <type>#define</type>
      <name>LEMON_DEFAULT_LP</name>
      <anchorfile>a00537.html</anchorfile>
      <anchor>ga459ae538832b3817b7692a81de79d744</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LEMON_DEFAULT_MIP</name>
      <anchorfile>a00537.html</anchorfile>
      <anchor>gae4ce37e43b0032f13b3efa0e0b0af640</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GlpkLp</type>
      <name>Lp</name>
      <anchorfile>a00537.html</anchorfile>
      <anchor>ga8c6461f78849b26ae8be11062410d043</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GlpkMip</type>
      <name>Mip</name>
      <anchorfile>a00537.html</anchorfile>
      <anchor>gad4ee17c56e133b01b9d75eb2cefd4d7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>utils</name>
    <title>Tools and Utilities</title>
    <filename>a00538.html</filename>
    <subgroup>gutils</subgroup>
    <subgroup>misc</subgroup>
    <subgroup>exceptions</subgroup>
  </compound>
  <compound kind="group">
    <name>gutils</name>
    <title>Basic Graph Utilities</title>
    <filename>a00539.html</filename>
    <class kind="class">lemon::DigraphCopy</class>
    <class kind="class">lemon::GraphCopy</class>
    <class kind="class">lemon::BpGraphCopy</class>
    <class kind="class">lemon::ConArcIt</class>
    <class kind="class">lemon::ConEdgeIt</class>
    <class kind="class">lemon::DynArcLookUp</class>
    <class kind="class">lemon::ArcLookUp</class>
    <class kind="class">lemon::AllArcLookUp</class>
    <member kind="define">
      <type>#define</type>
      <name>DIGRAPH_TYPEDEFS</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>gac618f30ace596c69836144bfdcc9112c</anchor>
      <arglist>(Digraph)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TEMPLATE_DIGRAPH_TYPEDEFS</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga14ef90d8fd45b56f1cc2c5023c76c4b1</anchor>
      <arglist>(Digraph)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GRAPH_TYPEDEFS</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>gab8c497e4257836f4669b8922237d830b</anchor>
      <arglist>(Graph)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TEMPLATE_GRAPH_TYPEDEFS</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>gab0e6cf49071e60eda3e15e2b0e0d8310</anchor>
      <arglist>(Graph)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BPGRAPH_TYPEDEFS</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>gac8d6365af7bc18ed8d55d0d4e752399f</anchor>
      <arglist>(BpGraph)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TEMPLATE_BPGRAPH_TYPEDEFS</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga1442da4c0ddce15a9a5f651693d7ab57</anchor>
      <arglist>(BpGraph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countItems</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga65f512e54ae6256fcd098592fc582e50</anchor>
      <arglist>(const Graph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countNodes</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga9156d36059e59ebc8dc14bad0112633d</anchor>
      <arglist>(const Graph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countRedNodes</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>gac1a04fa8a9e0460accf28c5337b2c5eb</anchor>
      <arglist>(const Graph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countBlueNodes</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga40c1bf81c7096481ca39f286eeb74163</anchor>
      <arglist>(const Graph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countArcs</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga1b3307d4e63c19d4ebadf133ebb43683</anchor>
      <arglist>(const Graph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countEdges</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>gaede53fc1ef848a03b7f844a5ec7eeca6</anchor>
      <arglist>(const Graph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countOutArcs</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>gaf199da654058dd16da1702f38b60f30c</anchor>
      <arglist>(const Graph &amp;g, const typename Graph::Node &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countInArcs</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga03d0d2f770d7f7faac66438139ae9b18</anchor>
      <arglist>(const Graph &amp;g, const typename Graph::Node &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>countIncEdges</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>gae93681c4e849f6fd3a102fcb2756e317</anchor>
      <arglist>(const Graph &amp;g, const typename Graph::Node &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>undirected</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>gaa7a3075a14f2acde20f1d999675a8040</anchor>
      <arglist>(const GR &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>DigraphCopy&lt; From, To &gt;</type>
      <name>digraphCopy</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga47e4bf893a80e68971c511735117c707</anchor>
      <arglist>(const From &amp;from, To &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>GraphCopy&lt; From, To &gt;</type>
      <name>graphCopy</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga6d9c65013887bb0710df0d58985d67dc</anchor>
      <arglist>(const From &amp;from, To &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphCopy&lt; From, To &gt;</type>
      <name>bpGraphCopy</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga58f5d796ccf095d19f507f47bf92d38f</anchor>
      <arglist>(const From &amp;from, To &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>Graph::Arc</type>
      <name>findArc</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga8f2c525c18d4b29476db308e49066334</anchor>
      <arglist>(const Graph &amp;g, typename Graph::Node u, typename Graph::Node v, typename Graph::Arc prev=INVALID)</arglist>
    </member>
    <member kind="function">
      <type>Graph::Edge</type>
      <name>findEdge</name>
      <anchorfile>a00539.html</anchorfile>
      <anchor>ga50b131b15b6c98823c4dc308f7e884e8</anchor>
      <arglist>(const Graph &amp;g, typename Graph::Node u, typename Graph::Node v, typename Graph::Edge p=INVALID)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>misc</name>
    <title>Miscellaneous Tools</title>
    <filename>a00540.html</filename>
    <class kind="class">lemon::ArgParser</class>
    <class kind="class">lemon::Color</class>
    <class kind="class">lemon::Palette</class>
    <class kind="class">lemon::Random</class>
    <class kind="class">lemon::Tolerance</class>
    <class kind="class">lemon::Tolerance&lt; float &gt;</class>
    <class kind="class">lemon::Tolerance&lt; double &gt;</class>
    <class kind="class">lemon::Tolerance&lt; long double &gt;</class>
    <subgroup>timecount</subgroup>
    <file>arg_parser.h</file>
    <file>color.h</file>
    <file>math.h</file>
    <file>random.h</file>
    <file>tolerance.h</file>
    <file>test_tools.h</file>
    <member kind="function">
      <type>Color</type>
      <name>distantColor</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gaafbc768b20325e1e5048dcd2b10bc4e7</anchor>
      <arglist>(const Color &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>distantBW</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga22a184708d82339466dd08286e01a756</anchor>
      <arglist>(const Color &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga78d99e4135230ce52d67f269ed1d464f</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>round</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gaac8681108dfd2b0deee2dca59dff26bb</anchor>
      <arglist>(double r)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>WHITE</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gaa574c6748d637031ff114ee5396f371d</anchor>
      <arglist>(1, 1, 1)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>BLACK</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga887e77777b0cdd4bd98cd8582eab747d</anchor>
      <arglist>(0, 0, 0)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>RED</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga3aab05ed4f1fa1188cb5cec4a951da36</anchor>
      <arglist>(1, 0, 0)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>GREEN</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga9d50a7cbc8c947f88556291754b964df</anchor>
      <arglist>(0, 1, 0)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>BLUE</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga8d1bd8aebf1ea19b34a359b95afb2271</anchor>
      <arglist>(0, 0, 1)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>YELLOW</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga7b3b82796993ff082f39aeaca4f74be9</anchor>
      <arglist>(1, 1, 0)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>MAGENTA</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gad9c523e1fcd76b6e97a7e8f6c89a6d09</anchor>
      <arglist>(1, 0, 1)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>CYAN</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga6b139d00115defc76ec508dff90c91fd</anchor>
      <arglist>(0, 1, 1)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>GREY</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gaccc4c0904a38839f9554cde971bb4963</anchor>
      <arglist>(0, 0, 0)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>DARK_RED</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga1c9259e9d2ec9a44ea6bf855d3dd3917</anchor>
      <arglist>(.5, 0, 0)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>DARK_GREEN</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gabc9fc012aa002dd8e311065b3115969c</anchor>
      <arglist>(0,.5, 0)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>DARK_BLUE</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gac56cc8c77b9fcb56e308652d922d08f0</anchor>
      <arglist>(0, 0,.5)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>DARK_YELLOW</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga5dbe8dbe7b513bc66228981dcad165f7</anchor>
      <arglist>(.5,.5, 0)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>DARK_MAGENTA</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gaa3457b13dd61099a849816a02ba55efc</anchor>
      <arglist>(.5, 0,.5)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>DARK_CYAN</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga1814dea6aea83b28d9137adaa4d8b937</anchor>
      <arglist>(0,.5,.5)</arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>E</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga72bb95cfe3f4109af43a989e478a2d61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>LOG2E</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga9cef1ca3f697ed0afa15e6ce2658b9cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>LOG10E</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga044b3cac2493404bbd6bb04cf61dc38d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>LN2</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga64f768a3649a214be5a8b9d13acc30fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>LN10</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gab62596f975434ae5b1dde456a64c455a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>PI</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gacf20630e5d2a9696928fe77b0726013c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>PI_2</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga8d3eb5ff33b365b02e3d7065f2ecba48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>PI_4</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga5a75e78cd42171bf864e2bad56639318</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>SQRT2</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>gac6586fa2865c0cc54dd89b93a0da1d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const long double</type>
      <name>SQRT1_2</name>
      <anchorfile>a00540.html</anchorfile>
      <anchor>ga1794f2ffbd3e762771a25847b905918c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>timecount</name>
    <title>Time Measuring and Counting</title>
    <filename>a00541.html</filename>
    <class kind="class">lemon::Counter</class>
    <class kind="class">lemon::NoCounter</class>
    <class kind="class">lemon::TimeStamp</class>
    <class kind="class">lemon::Timer</class>
    <class kind="class">lemon::TimeReport</class>
    <class kind="class">lemon::NoTimeReport</class>
    <file>counter.h</file>
    <file>time_measure.h</file>
    <member kind="function">
      <type>TimeStamp</type>
      <name>runningTimeTest</name>
      <anchorfile>a00541.html</anchorfile>
      <anchor>ga5a016a4d710b59abefedf870d8b71bb8</anchor>
      <arglist>(F f, double min_time=10, unsigned int *num=NULL, TimeStamp *full_time=NULL)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00541.html</anchorfile>
      <anchor>ga7a8fc6a89c07865a42b13d6a2bbcbbcb</anchor>
      <arglist>(std::ostream &amp;os, const TimeStamp &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>exceptions</name>
    <title>Exceptions</title>
    <filename>a00542.html</filename>
    <class kind="class">lemon::Exception</class>
    <class kind="class">lemon::IoError</class>
    <class kind="class">lemon::FormatError</class>
    <file>assert.h</file>
    <file>error.h</file>
    <member kind="define">
      <type>#define</type>
      <name>LEMON_ASSERT</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>gaf78cf5572d91896ceecdd970f55601bc</anchor>
      <arglist>(exp, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LEMON_DEBUG</name>
      <anchorfile>a00542.html</anchorfile>
      <anchor>gacbefc04b0335938603649e96af183843</anchor>
      <arglist>(exp, msg)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>io_group</name>
    <title>Input-Output</title>
    <filename>a00543.html</filename>
    <subgroup>lemon_io</subgroup>
    <subgroup>eps_io</subgroup>
    <subgroup>dimacs_group</subgroup>
    <subgroup>nauty_group</subgroup>
  </compound>
  <compound kind="group">
    <name>lemon_io</name>
    <title>LEMON Graph Format</title>
    <filename>a00544.html</filename>
    <class kind="class">lemon::DigraphReader</class>
    <class kind="class">lemon::GraphReader</class>
    <class kind="class">lemon::BpGraphReader</class>
    <class kind="class">lemon::SectionReader</class>
    <class kind="class">lemon::LgfContents</class>
    <class kind="class">lemon::DigraphWriter</class>
    <class kind="class">lemon::GraphWriter</class>
    <class kind="class">lemon::BpGraphWriter</class>
    <class kind="class">lemon::SectionWriter</class>
    <file>lgf_reader.h</file>
    <file>lgf_writer.h</file>
    <member kind="function">
      <type>DigraphReader&lt; TDGR &gt;</type>
      <name>digraphReader</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>ga48193af2c3b59a015d51b20f071a1514</anchor>
      <arglist>(TDGR &amp;digraph, std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>GraphReader&lt; TGR &gt;</type>
      <name>graphReader</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>gafdffb110416b03a63e3486f8736b2c6c</anchor>
      <arglist>(TGR &amp;graph, std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphReader&lt; TBGR &gt;</type>
      <name>bpGraphReader</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>gac4c1c8a87aed10ee29c691b70267927d</anchor>
      <arglist>(TBGR &amp;graph, std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>SectionReader</type>
      <name>sectionReader</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>ga919ce27a20ac3228c90a85310a64fa4c</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>DigraphWriter&lt; TDGR &gt;</type>
      <name>digraphWriter</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>ga69cc9c420f57bb132a8d2fc079b83494</anchor>
      <arglist>(const TDGR &amp;digraph, std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>GraphWriter&lt; TGR &gt;</type>
      <name>graphWriter</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>gae03a34e019c92c5383b4d4a188a3bae0</anchor>
      <arglist>(const TGR &amp;graph, std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>BpGraphWriter&lt; TBGR &gt;</type>
      <name>bpGraphWriter</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>ga501cff32bd7af38690224e42bf85bea8</anchor>
      <arglist>(const TBGR &amp;graph, std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>SectionWriter</type>
      <name>sectionWriter</name>
      <anchorfile>a00544.html</anchorfile>
      <anchor>ga6bc4578acf71f56b06729191b8463779</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>eps_io</name>
    <title>Postscript Exporting</title>
    <filename>a00545.html</filename>
    <file>graph_to_eps.h</file>
    <member kind="function">
      <type>GraphToEps&lt; DefaultGraphToEpsTraits&lt; GR &gt; &gt;</type>
      <name>graphToEps</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>gacdf8d8f513b3e79f89b19c20f7755564</anchor>
      <arglist>(GR &amp;g, std::ostream &amp;os=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; DefaultGraphToEpsTraits&lt; GR &gt; &gt;</type>
      <name>graphToEps</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>ga48002fdee116559a9948d1bf540475f1</anchor>
      <arglist>(GR &amp;g, const char *file_name)</arglist>
    </member>
    <member kind="function">
      <type>GraphToEps&lt; DefaultGraphToEpsTraits&lt; GR &gt; &gt;</type>
      <name>graphToEps</name>
      <anchorfile>a00545.html</anchorfile>
      <anchor>ga919340e78dd663a7b77c7aa9c3658170</anchor>
      <arglist>(GR &amp;g, const std::string &amp;file_name)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>dimacs_group</name>
    <title>DIMACS Format</title>
    <filename>a00546.html</filename>
    <class kind="struct">lemon::DimacsDescriptor</class>
    <file>dimacs.h</file>
    <member kind="function">
      <type>DimacsDescriptor</type>
      <name>dimacsType</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>gad16c7910d72fa073be372881e1b3b087</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDimacsMin</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ga309d99eda5d1f5f3df2b2ca2d57ec024</anchor>
      <arglist>(std::istream &amp;is, Digraph &amp;g, LowerMap &amp;lower, CapacityMap &amp;capacity, CostMap &amp;cost, SupplyMap &amp;supply, typename CapacityMap::Value infty=0, DimacsDescriptor desc=DimacsDescriptor())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDimacsMax</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ga44cf335757161623864f8b1ef4446601</anchor>
      <arglist>(std::istream &amp;is, Digraph &amp;g, CapacityMap &amp;capacity, typename Digraph::Node &amp;s, typename Digraph::Node &amp;t, typename CapacityMap::Value infty=0, DimacsDescriptor desc=DimacsDescriptor())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDimacsSp</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>gae8f5ba3e3f9ce3281f83c152d193625b</anchor>
      <arglist>(std::istream &amp;is, Digraph &amp;g, LengthMap &amp;length, typename Digraph::Node &amp;s, DimacsDescriptor desc=DimacsDescriptor())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDimacsCap</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ga2ec47d238c02a465037377e65875793d</anchor>
      <arglist>(std::istream &amp;is, Digraph &amp;g, CapacityMap &amp;capacity, typename CapacityMap::Value infty=0, DimacsDescriptor desc=DimacsDescriptor())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDimacsMat</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ga2f4cd9537b1e6da13b64220bed687ad2</anchor>
      <arglist>(std::istream &amp;is, Graph &amp;g, DimacsDescriptor desc=DimacsDescriptor())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeDimacsMat</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>gada363b719022ba1fe1c03978ba6cece9</anchor>
      <arglist>(std::ostream &amp;os, const Digraph &amp;g, std::string comment=&quot;&quot;)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>nauty_group</name>
    <title>NAUTY Format</title>
    <filename>a00547.html</filename>
    <file>nauty_reader.h</file>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>readNautyGraph</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>gab98a634e56974e5266e04dd0a1a63a83</anchor>
      <arglist>(Graph &amp;graph, std::istream &amp;is=std::cin)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>concept</name>
    <title>Concepts</title>
    <filename>a00548.html</filename>
    <class kind="class">lemon::concepts::Heap</class>
    <class kind="class">lemon::concepts::Path</class>
    <class kind="class">lemon::concepts::PathDumper</class>
    <subgroup>graph_concepts</subgroup>
    <subgroup>map_concepts</subgroup>
    <file>heap.h</file>
    <file>path.h</file>
  </compound>
  <compound kind="group">
    <name>graph_concepts</name>
    <title>Graph Structure Concepts</title>
    <filename>a00549.html</filename>
    <class kind="class">lemon::concepts::BpGraph</class>
    <class kind="class">lemon::concepts::Digraph</class>
    <class kind="class">lemon::concepts::Graph</class>
    <file>bpgraph.h</file>
    <file>digraph.h</file>
    <file>graph.h</file>
    <file>graph_components.h</file>
  </compound>
  <compound kind="group">
    <name>map_concepts</name>
    <title>Map Concepts</title>
    <filename>a00550.html</filename>
    <class kind="class">lemon::concepts::ReadMap</class>
    <class kind="class">lemon::concepts::WriteMap</class>
    <class kind="class">lemon::concepts::ReadWriteMap</class>
    <class kind="class">lemon::concepts::ReferenceMap</class>
    <file>maps.h</file>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>True</type>
      <name>ReferenceMapTag</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga804d338ca2e0e71ef0572ec61ddefffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2cfe904ef7579cf511b9fcb14420539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga34b57a974fe67a997b7693e6e71cd904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>Reference</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga6e8175a8d0f7ccdbabe88aea29e38777</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CR</type>
      <name>ConstReference</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>gaaaf1f16bcbee97f0cb6727e10901222b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriteMap</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga7988a5ffa9402369408447cb21be1123</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga2f67984c5736c6fd579e5eefd17cd01f</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga46b66c881c64c81af62a9616946a2f3a</anchor>
      <arglist>(const Key &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga3fdb5b25c67b183083ebd86dba491e50</anchor>
      <arglist>(const Key &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ConstReference</type>
      <name>operator[]</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga684549455562e7ec9cf54817a68387d4</anchor>
      <arglist>(const Key &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00550.html</anchorfile>
      <anchor>ga1eb01f50386db49765cdf4edbe951369</anchor>
      <arglist>(const Key &amp;k, const Value &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>tools</name>
    <title>Standalone Utility Applications</title>
    <filename>a00551.html</filename>
    <file>dimacs-solver.cc</file>
    <file>dimacs-to-lgf.cc</file>
    <file>lgf-gen.cc</file>
  </compound>
  <compound kind="group">
    <name>demos</name>
    <title>Demo Programs</title>
    <filename>a00552.html</filename>
    <file>arg_parser_demo.cc</file>
    <file>graph_to_eps_demo.cc</file>
    <file>lgf_demo.cc</file>
    <docanchor file="a00552.html">demoprograms</docanchor>
  </compound>
  <compound kind="page">
    <name>coding_style</name>
    <title>LEMON Coding Style</title>
    <filename>a07258.html</filename>
    <docanchor file="a07258.html" title="Naming Conventions">naming_conv</docanchor>
    <docanchor file="a07258.html" title="File Names">cs-files</docanchor>
    <docanchor file="a07258.html" title="Classes and other types">cs-class</docanchor>
    <docanchor file="a07258.html" title="Methods and other functions">cs-func</docanchor>
    <docanchor file="a07258.html" title="Constants, Macros">cs-funcs</docanchor>
    <docanchor file="a07258.html" title="Class and instance member variables, auto variables">cs-loc-var</docanchor>
    <docanchor file="a07258.html" title="Private member variables">pri-loc-var</docanchor>
    <docanchor file="a07258.html" title="Exceptions">cs-excep</docanchor>
    <docanchor file="a07258.html" title="Template Header File">header-template</docanchor>
  </compound>
  <compound kind="page">
    <name>lgf-format</name>
    <title>LEMON Graph Format (LGF)</title>
    <filename>a07259.html</filename>
  </compound>
  <compound kind="page">
    <name>license</name>
    <title>License Terms</title>
    <filename>a07260.html</filename>
  </compound>
  <compound kind="page">
    <name>migration</name>
    <title>Migration from the 0.x Series</title>
    <filename>a07261.html</filename>
    <docanchor file="a07261.html" title="Graph Related Name Changes">migration-graph</docanchor>
    <docanchor file="a07261.html" title="LGF tools">migration-lgf</docanchor>
    <docanchor file="a07261.html" title="BFS, DFS and Dijkstra">migration-search</docanchor>
    <docanchor file="a07261.html" title="Exceptions and Debug tools">migration-error</docanchor>
    <docanchor file="a07261.html" title="Others">migration-other</docanchor>
  </compound>
  <compound kind="page">
    <name>min_cost_flow</name>
    <title>Minimum Cost Flow Problem</title>
    <filename>a07262.html</filename>
    <docanchor file="a07262.html" title="Definition (GEQ form)">mcf_def</docanchor>
    <docanchor file="a07262.html" title="Algorithms">mcf_algs</docanchor>
    <docanchor file="a07262.html" title="Dual Solution">mcf_dual</docanchor>
    <docanchor file="a07262.html" title="Equality Form">mcf_eq</docanchor>
    <docanchor file="a07262.html" title="Opposite Inequalites (LEQ Form)">mcf_leq</docanchor>
  </compound>
  <compound kind="page">
    <name>named-param</name>
    <title>Named Parameters</title>
    <filename>a07263.html</filename>
    <docanchor file="a07263.html" title="Named Function Parameters">named-func-param</docanchor>
    <docanchor file="a07263.html" title="Named Function Template Parameters">named-templ-func-param</docanchor>
    <docanchor file="a07263.html" title="Traits Classes">traits-classes</docanchor>
    <docanchor file="a07263.html" title="Named Class Template Parameters">named-templ-param</docanchor>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>LEMON 1.3.1 Documentation</title>
    <filename>index.html</filename>
    <docanchor file="index.html" title="Introduction">intro</docanchor>
    <docanchor file="index.html" title="How to Read the Documentation">howtoread</docanchor>
  </compound>
</tagfile>
